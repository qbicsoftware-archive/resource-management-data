%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: UT_WBMW_Rot_RGB.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Christian Zander
%%CreationDate: 21.09.10
%%BoundingBox: 0 0 553 142
%%HiResBoundingBox: 0 0 552.7559 141.7334
%%CropBox: 0 0 552.7559 141.7334
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">EKUT_WortBildMarke_W_RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2010-07-08T15:06:52+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2010-07-08T15:06:52+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2010-07-08T15:06:52+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS3</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>68</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgARAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXmPm/RNIu&#xA;/wAwrs3HliLzAZdEjaWLjAJARcSJzDSlW5cRxBQ8qDbtkCN3a6fLIYRU+D1+fcl/5kaM15511RbD&#xA;SF1DUp/LLGJk9NJo5RclEuI2biTJEPs0YE0pXBIbtmiycOKNyqPifo5fFV8w/oPXvMXkXUYtLj8y&#xA;297puoMEnjg5zqiWxRnFxxTkrOxoTsScJ3pGHjxwyRMuAiUe/bn3KHmODydp3m7TrjWtDX9EweVp&#xA;PVsjbi5a3SC4txGHoGp6K1XnX4fHAatOE5ZYyIS9Xic7q9j9679B32nzflrDeW8epanb3F+YRPIr&#xA;sIvq801vGbikgJhThuKjktR2ONcl8USGYg8MSI/eAdvNOtSinuPzV8p3OoaZBa3AtNU4TK6zO3BY&#xA;ONW4IRw5mn+scPVogQNPMRJIuP6UDqvmae3/ADIttaEk/wCiLe6/w5cJ6Mv1bjOAzXHr8fRDLecI&#xA;SOdfhO2JO7ZjwA4DDbiI4+e+3Suf07qfnSLybbeedZn1/SlureXRrAmdIEdknku7mFH9Ugek7Hgo&#xA;kJHQVO2Jq06Y5TiiISo8cuvSgfj7l0nlcR65+W9h5ihg1LUYbS+t72WZFn5mK1UqrM4+PgTsT337&#xA;41yQM/ozGFxjYrp1TeTTI/LH5gaBBof+i6Try3cF/pMZItke2gM8dxDF9mI/D6bcaA1HfDVFpE/F&#xA;wyM95Qqj13NUe/vS782L+HRfMvlrXUs45bq3jvUa9eP1Pq0TCJTcOq/G6QCRn4r79Kk4Jc23QQM8&#xA;c4Xsa27+e3xTDW9M0XRPKbWWmF5LrzTOtvc6lBG091c/WqyXVz+5VmdhbiV14rxG1KDCdg14pynk&#xA;uXLGOXICuQ386SS51L9MfkVrdtqKerf6NaXNheCeMq/r2S0jlKSAMrMnCTcAiuD+FujDg1cTHlIg&#xA;j3H8UmHkvT9HufNs1zoVmNP0+20/6l5gsGjECTXcwilhb6ttuIuRaQrRgwAr8VEc2vUzkMdTNkyu&#xA;J57b3v7+iN8g6LG35XyadpZXTprxdRjjuIVClJZJ5o0l+HulFp7AYYjZhq8v+EcUvVXD9wb/AC1k&#xA;0yOe802bRItC80adBBBqcEChYp4QX9G4hZQBIjnlufiU7HGK60SIEhLjxyJry7wWd5J17sVdirsV&#xA;dirsVdirsVYB56/NW18v6n+h7T6uLxVBur2+do7S3Z0aSONuAZnkdVqF+EbirCoyJlTsdLoDkjxG&#xA;67hzP7GO6F/zkFpq2sU/mFrUxT2n1pJ9NMr+lMFY/U54pRVJmMT8Dy4t7AgmIm5OXsiV1C+db/eP&#xA;JCN+ePmyfU5rS20eCK5SJrhNHaK8urwIpUgTNbIyxmRWDL8JA6NTu8ZZ/wAl4xGzI137AfC2feQv&#xA;zM8u+cbOM2r/AFXVDH6txpUxpMi148lqF9RPBl+mh2yUZW67V6KeE77x72XZJw3Yq7FXYqx7UPJ/&#xA;1vX5dch1i/sbuW0FgUtjbGMRK5kBVZoJTz5MTyrgpyYaiocBjEi73v8AQVl15Jjl14a3DrGoWl4t&#xA;iNNAia2dfQD+pU+tBKxctuWLVxpMdTUOAxiRd9f0FSb8vNNjn0SXTr670xfL9tJaafFbfV2QRzBR&#xA;IX9eGYszemu9e3zwcKfzkiJcQEuM2bv9BCq3kWxl1SHUbu+u7x00+TSp4ZzA8c9vMwaX1qRByzso&#xA;J4sPYUw0j80RHhAA9XF12PzULX8vLW3bQyNX1GQeXWdtNEjWzUWSMw+m7ehyZRExUb1964OFlLWE&#xA;8Xpj6+fP396P1byrFqOvWGtfpC6tLrTYZ4LZIPq5jpchRIzCWGUljwXvTbp1qSGrHn4YGFAiVd/T&#xA;4qB8iaU/k2bypPcXNxZTrJ6l1I0f1kvLKZzLzWNU9QStyDcOu+NbUy/NS8XxABf2dylN+X9hdXl5&#xA;c6hqF7fi/wBOGlXcE5t/Te3UuVP7uGNuYaVm5A9Tg4WQ1ZAAiAKlxdefzWyeQuU+j3I13UTd6Gkq&#xA;WMz/AFRyVmUIwlrb/H8C8a7H3rvjwqNXtIcManz5/rTLTvLMFtqZ1a7up9S1T0zBHc3JQCKJiGZI&#xA;Y4ljjQMVHI05GgqTTDTXPOTHhAEY+X6WtV8r2upa5p2rT3M6tp0c8SWa+kbeVLkBZRKrxuzVCgbM&#xA;P14kLjzmMDEAeqt+uyA0b8vdM0jUrS6tb69a108XA07S5Xie2t1uac1jrH61Bx+Csh4ioGxpgEWz&#xA;JrJTiQQLNWepr419i3Vfy803UZNeb6/eWsXmOKOLU7eAwemfTT0uaepDIVdk+FjXfExXHrJR4dge&#xA;Dlz/AFou18nW1prC6tb393HeG1js7wgwcLpIa+k8yelx9RORoycdtumGmEtSTHhIFXY57e7dAaf+&#xA;XSWGlJpVv5g1UWMZndIuVmCHuC7s5dbZXPF5WdQTSvUECmDhbJ6zilxGMb27+nxTzTdDSzvJ7+e5&#xA;kvdQuI44XuZljUiKIsVjQRJGAvJ2Y9yT8qGmieWwABQCZYWp2KuxV2KuxV2KuxVAeYNVGkaDqWrM&#xA;nMafaz3RT+YQxtJT6eOAlsw4+OYj3kB8tXc2lx6kb6/eHzBrk4a7nlt2kuoLiUejct9bhVXX6vEp&#xA;eALG32kJNKfDS9ZESMaHojy7q5jY955796j5u0mW4tFXWLcW99HaGexuxEYXjtYWZPTntVjgkJkk&#xA;ZWWSjcUPQgFsSE6fIAfSbF7+/wAjZ+Xe28es6vbC208JbaZHZzNp9y0RE8quI0u5o1grct6v1Wbk&#xA;8nMMocUHTFQYwNy3lYvu60N9trHKuiY6VeHQNXtZtSjMEllcacbbUF/cJYelcBNQtkgMknKJ1uGa&#xA;T06cmZWC8GDYRs1ZI+JEiPUS2/nbek3XPba/dzZ/oGi2i/8AOQ+rWCyTjT7CwXULWzM0hhWdvQWv&#xA;Akig9ZmA7H5ZID1OvzZT+SidrMqvy3/U9nmhjmheGVQ8UilHU9CrChGWOkBo28r/ACe0q2g80+dm&#xA;DzS/UNTezshNLJKIoAWbggcn2367ZCPMu27RyE48fnGz72MflX+Z2q+X5bPSPNzkeX9XeZtA1iQ8&#xA;lRo52ieCRz+wrgjf7G37BBEYyrm5Wv0Mclyx/XGuIfDn+Ofve83NtBcwPBOgkhkHF0PQg9stefjI&#xA;g2HnX5TaLZpJ5yWUNN6euX2nxepJJIEs1WJkhXmxoBzyERzdl2hlP7v+oD8d90h/JfSLWTzX58hu&#xA;HmuotN1CTT7KO4lklEdv6syFQGY7lUAJ64IDcuR2lkIx4iNuKNn37KAs08mfn1YwSvI2g+YIGXTU&#xA;llkeOC5agKpzY7+olB4CSmPKTLi8fRk/xwO/mPx9z2e+ntbexuLi7YJaQxPJcO3QRqpLk+3EZY6S&#xA;AJIA5vOfyh8q29z5en8xanC7TeYJZ7m2tZZHZLexmc+jCiliqgp8VR2IyEQ7LtHORMQj/BQ956li&#xA;/wCVvk7Rda8xedrHVWvLu30bVHtNOU315GY4llmXjWKVOWyDrgiObl67UyhDGY0DKNn0jy8nqWhe&#xA;R9M0vQrzRHeW7sLueWYCaSRpFSSnFPVLF/g47NWuTAdTl1UpzE+RAeb/AJK+UtH8xeUbu61s3V9d&#xA;R39xapO95dKyxRqgVRwkUClTkICw7PtPUSx5AIUBwg8h+pNfI135h8v/AJpap5Gu9QuNV0VrIalp&#xA;k145lnhXmq8DI1WK1Zl38ARSpwjY01aqMMmnjlAEZXRrkiNbvLPXPzeXypr07ppMGmrc2GmiR4o7&#xA;u5d/iaTgUMnBAeKGo2JxO5pjiicem8SA9XFRPcGU6D5F0vQNeuNQ0gNbWd3brFNYh5Gj9VHqJVV2&#xA;YKSvwmmSApxMuqlkgIy3IPNgOm6Ha/8AQw19aLJMLC10xdTisvVkMIuC0UdQnLjT94Wp0rkK9TsJ&#xA;5T+SB6mVX5bsz/5Vf5en1O+1XUZby5v76d5mkjvLu1VEPwxxolvLGKLGFWp6/hkuFwvz0xERjQAH&#xA;cD94YT+XXlyx1jzT52sdRudQntdI1BbfTo/0lfp6cRMnw1SdWb7I3Yk5GI3LnazMYY8ZiI3KO/pj&#xA;5eT0Lyx5Is/LqapBZXVy1tqLq6etM8skNI+B4SSFm6/EMmBTrs+qOThJAseTyWXWdX03z/ZaX+lb&#xA;5/K0izeUf0vJNyuPrnFZXn5kcRIk8yxq3gh8Mrvd24xxlhMuGPif3ldK7vkL+L1bW/INjrVro9jq&#xA;N5dzWOkgll9Z0muJBGI0eWeMo+w5E0pUn75mLqcWrMDIxAuX2fBgH5ieWtP0bzR5I0/TLjULez1b&#xA;UDbX8Q1K/YSRAxgLV52K/aP2aZGQ3DsNHmM8eSUhEmMbHpj5+TNm/LDRIdV07VNPub63ubCdJSst&#xA;7dXMciCvJHW4ll612p3yXC4P56ZiYyAII7gPuDMck4TsVdiqF1XT4tS0u806Y0ivYJLeQjeiyoUP&#xA;4HEs8c+GQkOhfHXlSa2W0uz6U1/e3cElrbPHBNza5nrBFAJkZWPKFWcLUdCDyFVzHD2mcGx0AN8x&#xA;yG917/wE+8822o6jIZ/M8DWurXUbSNHNbxxS28UckcdoYJYKfWllQ+lwVfgJZm6DCfNx9LKMdsZu&#xA;I8+fO7v6a5+aYaLZSahp0t2I4r3T7HjFqNlqCtaWKRCP0lpIjpI8iyep9Xj+MInxfCz4Q15ZcMq5&#xA;E8iNz+OXEdrPeAh7qx0x/NbaVa6farqxuJ7WHS7eO54SQ6lBJC8vpzrE0bWv97vHUqwo3FQcerKM&#xA;peHxEnhoG9v4TfTv5c3p+jfu/wDnJXXefw+toiel70a2/wCaDkx9Tqsm+hj/AF/1vWsm6d5x+U8b&#xA;f4i8/wAv7Da7KoPuoqf+JDIR6uz7QPoxf1EB5F8naN5u/Jey0fVErG8t80M6gepDKL6fjJGT0I/E&#xA;bYxFhs1Wplh1RlH+j8fSEJ+X3nLW/KOvr+XfneQlwQvl7WX/ALu4i6JGzn7lqdj8B7YImtiz1emh&#xA;mh4+L/OHd+P2so/K3+/86f8AgTX3/JqDJR6uJruWP/hY/Sx78lP+Uw/Mr/ttyf8AJ+4wQ5lye0/7&#xA;rD/U/QEf+fvlyfUfJY1mxquqeXJl1C2lX7QjUj1qHwAAk/2GMxs19k5hHLwn6Z7fq/V8VnmTzKPO&#xA;Hkjy5pmnOUuPOzRwz+mfihtoh6moEf6gQxn/AFsSbHvThweDlnKXLF9/8P63pVvbw21vFbwII4IU&#xA;WOKNdgqKKKo9gBk3Vkkmy8Q/LXR9e1Dzl+YZ0rXptF9PW5hKsNvbXAkrPPQn6xHIRx9sriNy73W5&#xA;IRxYuKPF6O8joO5635S0/W7DRUttbvm1LUVmuDJeMFUyRmdzCeCAKn7rj8I6HJh0+onCUrgOGO23&#xA;w3+14v8Alf5q81eWvy51zVbPRINU0uyv7qaR/rbQTrQIJP3XoyhlQfETzG1criSA7zXYMeXPGJkY&#xA;yMR0sfe9J/LjTbe/jbz3cXS3+reYbeI+pGvpxW1uoqLWJeTn4HHxkmpYdsnHvdZrZmP7kCowPzPe&#xA;t/M/8r7PznawXNvOdO8w6f8AFpupJUEEHkEcr8XHluCN1O47gso2uh1xwEgi4HmEt/KXz15hv73U&#xA;PJ3m6L0vNGiKGebb/SIKgCQ02qOa/ENmDA+OCJ6Ft7Q0sIgZcf8Ady+wqGmf+tHav/4Dy/8AJ+DH&#xA;+JlP/Eo/1/0F6lk3UvLfyj/5Tf8AMj/trL+ubIR5l23aH91h/q/qZ35v8wweXfLGp63NQrY27yop&#xA;2DSUpGn+zchfpyRNB1+nwnJkEB1LxrzB5c81Tfk8miy+WL5NSsT+lZNUa4sT/pXNp55eK3BmqVkc&#xA;ABeXTbKyDTu8ObGNTxCceE+mqly5DpT1r8vPNKeaPJul60CPWuIQt0o/ZnjPCUU7fGpI9qZZE2HT&#xA;6zB4WWUO77mH/m5/ym/5b/8AbWb9cORlzDm9n/3Wb+r+t6lk3UuxV2KuxV2KvCfMf5N6r5YsrjVP&#xA;L0Ntr8UbSFdCurUzBI2WUI0atN8boZa0pSpLKtdjWYU7/D2lHKRGdw/pA+7yeN61pPm3TfL1rq90&#xA;7jStSmeCzklP77/RQYiAjfHGlFoF/wAkeAysgu7xZMcpmI+qPP4orSLHX5fLWmailtbXGnW2oSvD&#xA;Hey/uZJ7eMTTB4SURg8fENyJYhKCgrVHJhklAZDGzxGPTuO3P8c3on5LaJBrPmHS9Qhi9dtDeaaT&#xA;WObqotmWWG2shEWYK3Nmk+LcRhRUdMnAOt7TymEJRP8AF089iT+j329G8+eUPMcPnHS/PnlWFLzU&#xA;rGI2uo6U7iL61bGv2Hb4Q45nr7eFDIjew63SaiBxSw5NoncHuKZP59165tzFpflDVf0owCol8kVt&#xA;bIx6tJOZGBVf8gEnDxeTUNJAG5ZI8PlufkivJvl248o+WJluS+p6tdTy6hqj26jlNd3LAyemHKCg&#xA;2A5EbCu2IFBhqcwzZNvTEChfQBKvyZsdc0ryoukazpc+n3cM1xNWQxtGyzSmReLRu2/x03HbGHJu&#xA;7SlCeTijIEUE78++RNH856FJpmoKElWr2V6orJBLTZ16VH8y9x9BwyFtGk1UsE+KPxHekX5QeX/N&#xA;Hlzy/rVv5kVp9ROpzTrMhEhuYhbQIkiHavP06fFQ1674Ighv7RzY8s4mH08Py3KUflLpvmnSvNfm&#xA;y41fQrmytfMN+19azs8LqgMkr8JODkg0kG4BwRu27tCeOeOAjIEwjXXyeqzwQ3EEkE6CSGZWjljb&#xA;cMrCjA/MZN1IJBsPK/ye/LXVfLWsavPqrM9tp8s1h5dWTelrLIJ5Jl7fvPgHzDDIRjTtu0dbHLGI&#xA;jzO8vfyr4PVZZPTieTiz8FLcEFWagrRRtucm6kC3jn5eDzl5a8webdQ1HylqMltr1899a/VntHdA&#xA;ZJX4Orzx9pBuCfllcbFu61nhZYQjGcbhGt78vJ6DoGv6/fWOpanf6Lc2CRycNP0uT0zdSIkalnNG&#xA;4AvIxABboMmC67LihEiIkD3nowz8kNA8waRoOr6D5k0Sa1S/vJroPI0UkLxTxJG0TcHY1/d+G9cj&#xA;AOb2plhOcZwldAD5K/5baT5r8j3Go+WbvTLi+8ui5efRNTt2ifhFId45UZ1dfHZTvXtTGII2Y63J&#xA;jzgZAQJ16gnb+afMmj+YtXtdS0LUL/TJpo5dIv8AT0W4T0jBGrROnMNGRIjGtKEk/Mm2gYIThExl&#xA;ESrcHbqpeU9B1W8876n541WybS2urRNN03T5GRpxbo4keWf0yyBnZRRakgdcQN7TqMsY4hiieKjZ&#xA;PS/JILaz83Rfnfd+ZW0G7GhT2X6NFyrQliF4N6hj9Tlx9SP5039sG925MpYzpRj4hx3fV6vK5jid&#xA;wrOVUtwXdmoK0FabnJuoAeVflXY+bdM84+bLnWdDubSy8wXpu7O5ZoWEaiSUhJQjkj4JF3A7b5CN&#xA;27bXyxyxQEZAmAo8/JMvzMi8wa1f6Lo1pot3c6HDqEF3rd0nohZIYGDLEitIrOpbdtu21cZNWiMI&#xA;CUjICfCRHn1eikAggioOxBybrXlH5X6N5o8ma/r2gy6RcyeVrm9efR72NomWIMeNHUyc+JQLvTt0&#xA;3yEQQ7fXZMeeEZ8Q8QDcN/m3pvmzUfNnlK60XRbi+tdAvBe3k8bxIHHqRN6cfN1NeMbVqO+Mrtez&#xA;54445iUgDMUPtepW8xmgSUxvEXAJikADr7MASK/Tk3UkUVTFDsVdirsVdirwz/nKz/lH9C/5i5f+&#xA;TeV5Hfdg/XL3Ir8gNC0nXfylu9M1W2S6s7i+uFeORQaExRjkpP2XWvwsNx2xgLDHtbLLHqRKJo8I&#xA;etaHoOjaDpsem6PaR2VlF9iGMbVPVmJqzMe7Ma5MCnT5csskuKRso/C1uxVh02ufmRNqeoLpmhWU&#xA;mlwTmGznvLqS2lkEYAd+Ail+EyV4nbbx65Gy5oxYBEcUjxVvQv8ASkHl78yfP+vaxrek2Pl/Txda&#xA;BMkF8ZL+VULuXA9Mi3PIfuj1AwCRLkZtFhxxjIylU+Xp/an1v5l89LpeuTaholra3+lKJbWAXDvD&#xA;cRemzsVmCbGqkCq/Pxw2XHOHFxREZEiXly+DX5Z+eNY84eW5NeudMjs4Gd0s4IpvVkl9LZieaxqt&#xA;W+EVOMTadbpY4Z8AN97fmPzpr+l+Qv8AFKaKIriCMTX2k3k3CWNeXE0eMOpI+1Q028DtiTtaMOmh&#xA;PN4fFt0Ibu/NnmSD8u/8Vrp1q90ln+kZtP8AXcKLf0xKQJeG7rHU/ZpXb3xva1jp4HN4dmrq66pG&#xA;fzR802/kuz86XOg202hzqst1Ha3btdQxO3AScJIUR6HqA/4VIHEatv8AyOM5TiEjx+Y2P2syvvME&#xA;svlJvMGhpHehrT69axzMYlkj9P1AOQDcWK+I69clezhRw1k4J7b0lf5YedNU85eXRrt3YxWFvNI8&#xA;drFHK0rMIzxZmqqAfECAMETbdrtNHDPgBsobyp+aOmaz5t1rypdBbTVtMuporVeXw3MMbEckr+2o&#xA;HxL9I70RLemWo0MoY45BvGQ+TN358G4U50PHl0r2rTJOAGH+WfN+v6p5w13y/eWNrbpoH1f6xcRT&#xA;SSGT63EZYuCtGlNh8VTkQd3Nz6eEMUZgk8d9O5U1TzzO+uzeXvLOn/pjV7UKdQleT0LK05/ZE83G&#xA;Ri56hEQn5Y33IhpRwceQ8MTy6k+4LbmT82ok9WCHQrggEm253cbHwCyEMCfmox3WI0x58Y+SI8me&#xA;Z9c8waPfTX2lLpGrWN3JZSWck3rLziRG5F1Vdjz2pXbepriDbHU4IY5ACXFEi7Yz5U/Mbz55lvta&#xA;srLQ9NguNBuTaXq3F9OAZQzqfTMdtICKxnc0wCRLlZ9HhxCJMpVMWPSP1sz8p6nruo6fPJrdimnX&#xA;sNzLB6ETmRCkZAV1dgvIN1BoMkHC1EIRI4DYpIfyy/NLTPOtvcwFVtNZsXZbqy5V5IG4iWKu5Q9/&#xA;5Tt4EiMrcjW6GWAg84nqzS4+seg/1bgZ6fuxJUJX3pvknBFXuxbyF5u1jzJLrX1yyt7OLR9QuNKb&#xA;0ZXlaSa2K83HJEASjbd8jE25er08cXDRJ4oiXzZbknDdirsVdirsVdirEvOv5p+TPJxEWr3ZN6yh&#xA;0sLdfVnKnoxWoVQe3JhXImQDmabQZc30jbv6PnX86vzSuPOcum20emy6bplspubb6x/eziYALKQP&#xA;hC0X4aE998qnK3pOzNCMFm+KR29yffkF+bmh+WbK48ua6Wt7a4uDc2l8qvIA8iojROiBmAPAFSB4&#xA;1wwlTR2t2fPKROG5qqfSFjqVhfxNJZzpOqNwkCn4kelSki/aRxXdWAI75c8xOBjzCJxYuxV2KvJf&#xA;yf8A/Jj/AJnf9tCD/k5dZCPMu47R/uMP9U/716V5i/5R/U/+YSf/AJNtki6vD9Y94YH/AM4+LI35&#xA;TWCxsEkMl2EcjkAfXehptWmRhydh2v8A4wfh9yM/MS11a1/JrWLfV7xdQ1GKxK3N6kYhEjcx8XAE&#xA;gbf5jDLkw0conVRMRUb5K+o/+SOuv/AZf/unnH+FjD/Gx/wz/fPPl8x6rD+Q9hpo0G/Fnd2YtrnW&#xA;FWCaCK2dyJZxHFM83wpWgdE375C/S7HwYnVmXFGwbre77uVfe9Q06bQJPy1A8v3C3OjxaW8NnMvU&#xA;pFAU+KoBD/D8QIrXrk+jqpiYz+sVLi3+aQf847/+Sr03/jLdf8n3wQ5OR2x/jB+H3MWf8uz5th80&#xA;6hpkgsPNWjeZb1tI1BSUJ4rDKI5CO3JvhP7J+mo4bcsazwTCMt8csYsfNmP5WfmYfMkU2ia5H9R8&#xA;4aXWPULJxwMnA8TLGv8AxIDofYjJRlbha/ReF64b45cipaJMbD8xfzLvkHN47bSrjg3QmOzmoNu3&#xA;wYBzKco4sGEecvvCj/zj0gk/L0anKxkvtUvbq6vp23Z5TJwqT8kGMOTLtc/vuHpEAB6Lf39rYWr3&#xA;V0xSCPd3Cs9ATStEDHJuthAyNBKvLfmvylrsl0dAvIbxgwku3gU05lQgLtxA5cVA61oMAILdm0+T&#xA;HXGK7nlf5Y6/JpXnL8xQmlX+perrUxrYxJIF4zz7NzeOhNdshE7l22uw8eLF6ox9HX3B615W8wL5&#xA;g0aPVFs57BZJZ4vqt0Ak6G3meFhIgJ4tyjO1dsmDbp8+Hw5cNg8uXLcW8R0X8vNTvvIWiedPKTm3&#xA;846ZLeEBTQXcUd7OPTcHYsF+EV6r8J2pSsR2sO9y6yMc0sWTfHKvh6R+Ptep/ln+ZGneddH9ZQLX&#xA;WLX4NT00k8opAacgG34NTbw6HcZOMrdTrdFLBKucTyKG/KtVWbzqFAA/xPfGg23MUBJ+/GPVlr+W&#xA;P/hcf0s6yTgOxV2KuxV2KuxV8r/nHZ6xqXmbUFaWOC1S4V7mCGotLUsPhe+uD8D3TJv6aciF+FSa&#xA;ccplzes7OlGOMd9fE/1R/N83mWo3jS2dtbLyktrOSeO0uXFCYmYOI/8AYsxeni+QdrCNEnqav8fj&#xA;kmHly8a1t5LiJ9TsUhcfX9R02U0WNxSIPF+735cxyMoBrSleqGvNGzR4T3A/j9D3b8gL7UpEVLSZ&#xA;bjR1jMP1WS9aSeAc2kEjQJCLdWdidufPrXlTLYPP9rRj12l7tj8bv9D2/LHROxV2KvIvydmhb8yP&#xA;zNCyKxbUISoBBqFkuQxHyJocrhzLue0QfAw/1f1PWbqBLi2lt3+xMjRtUV2YUOx+eWOniaNvKfyB&#xA;1AaZpmo+RtUYW+vaLeTVtHNGeB6MJI6/aXkSduxB75CHc7ftaHFIZY7wkPtTz85NQWTypL5Zs6T6&#xA;95haOz0+yU1ch5AZJWHURxorFm6DDPlTj9mwrJ4h+iG5Ka+eIIrD8r9etTJ+7t9GuoFdqCtLVo1+&#xA;ljieTVpTxaiJ75j70B+Uk9ifyn0SSeSP6olmVuWkK+mFVmEgcnYAb1rjHk2doA/mJVztiX5QafJY&#xA;fl15tuVLR6Hc3F/No/qVUG2WIqJQW/ZYL+GRjycztGfFngP4wI3706/5x1kjb8rNPVWDMk9yrgGp&#xA;U+szUPgaEHDDk0dsD/CD7h9yM/Km5R7/AM8QqQfT8yXjFga/aSNaU9jHhj1Ya+O2M/7WP0qP5o/l&#xA;pd61NB5n8sTfo/zjpnx206UQXCqP7qQnatNlLbU+FtjsJR6hOh1ogDjyb45fYk35N+YLrzT5n87X&#xA;uq2JsrySLTLXULFwQFlhjuIpRRviAJXoenTBA2S39pYRix4xE2PUQfklv5e6yfyu16/8j+aXNto1&#xA;1cNc6BrEu0Dq9FKO/wBlagKT2Vq12IOMTWxbdZj/ADUBlx7yAqQ6vbFubdoPrCyo1uV5iYMCnGle&#xA;XLpSnfLHRcJuury7/nG9YR5EvTCFCNqtyVK9COMYH4ZDHydt2zfjC/5o/Sh/yRngk84/mQEkVy+s&#xA;vIoVgaoZ7ijCnb3wQ5ll2mD4WH+p+gPULDUdNuZ7y2snV2spAl0I6cVlkUSkbftEOGPzyx1M4SAB&#xA;PVhn5Ez+r+XFoOQZYrq9VaU2BupH7f61cjDk53aorOfcPuSr8yPIGs2GsL5+8iAQ+YLYE6lYIPhv&#xA;oti/wDZnIHxL+11HxgVEo9Q26LVxlHwc30Hke78fjZFfkRrK63o3mPV1ha3F/r1zcGBjUoZLe3JS&#xA;vfidq4wLHtXHwShHnUB95el5N1bsVdirsVdirsVeT/mT+Vl3r2u2lxDapd6JEjST2SymOT12lluJ&#xA;2WpX4rhvSj5VqFr02yEo27fRa8Y4EE1Lv8tgPluXneo/kz5tv9Tg0UaZIqNOqTa84hS0ihSpkW1t&#xA;o2/dR8mqC1XkND8NWrDgLsodpY4xMr6fTvfxPX7h5rbD8kPPM9zS0t5ND1i2T0Ly4aRDp92g25pI&#xA;haQeoAOaGJgTuafZDwFM+08QG54onl/OH477ew/lv+Xl3oAF/rM8lxqioYreL1xLbW6PQv6MSQ2y&#xA;IzkfE3Ekjv1yyMadLrdYMm0RUfduffuWe5J17sVWTen6Mnq/3fE8+v2ab9MUjmwry5/yqH9Mn/Dv&#xA;6M/TG/P6lx9f7Qrz4fFTlSvLvkRTnZvzPD6+Lh82cZJwGE+fP+VU/Wrf/F31L9I7fVuXL65Su3D0&#xA;P3/Gv0ZGVdXO0n5ij4d19n27L/I//KsPrlz/AIW+q/pOh+t15/XeNf2/rH7/AI18dsRXRGq8eh4l&#xA;8P2fZsnnmr/DH6Hk/wATfV/0RyX1vrdPRrX4edfh69K98Jrq0YPE4v3d8XkwWz/6F3+tt9X/AELz&#xA;qnqfY9Cv7HLl+569K98j6XYS/O1vx/p/WzzXP8N/oKT9MfV/0HwHq+rT6v6dNuVPh4U+jJF1+Lj4&#xA;/TfH9qT+VP8AlWv1W8/wt9R+q8H+u/UKenSg5cvT+Hlxp74BXRuz+PY8S76Wt8q/8qx/Sc3+GPqH&#xA;6RqfrP1KnPl8VfV4d/tfaxFdFz+Pw/vOLh82X5Jw0ssf8Pfp3U/qP1f9M8Lf9L+lT1eNH+r+tTvx&#xA;5ca709qYG2fHwC74d6/TS3zN/hf9FP8A4m+p/ouvx/pD0/R5dv734eXh3xNdU4PE4v3d8Xk8w/6x&#xA;rq1Pqno8vi4/XPq9fo/c5D0u0/w7z+y/1vTND/wp+gf9wP1T9B8Xp9Q4ehSnx09Havj3yYp1eXxO&#xA;P13xef7Xn97/ANC27ev+hK1NfT48q9+Xp7/fkfS7GP57pxsq8sf8q2/wrd/4d+qf4c9Vvrv1evpe&#xA;rROXqd68eFa9qdsIqnEz+P4g474+lq3kv/lXf77/AAf9S4b+v+j+PCu32uHw16e+IrojU+N/lb+L&#xA;KMk4iV6H/h3nqX6F9Cv11/0p9XpT67wT1OfHb1OPDl+O+ANuXj2475bX3JphanYq7FXYq7FXYq7F&#xA;XYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:400ba1e7-f71d-6947-815c-cb4ad5070641</stRef:instanceID>
            <stRef:documentID>uuid:674716182B8CDF11938FC449556742DA</stRef:documentID>
         </xmpMM:DerivedFrom>
         <xmpMM:InstanceID>uuid:4743E9BF348CDF11938FC449556742DA</xmpMM:InstanceID>
         <xmpMM:DocumentID>uuid:4643E9BF348CDF11938FC449556742DA</xmpMM:DocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>194.999984</stDim:w>
            <stDim:h>50.000049</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standard-Farbfeldgruppe</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=165 G=30 B=55</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>165</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>54</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -141.733 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 141.733 li
552.756 141.733 li
552.756 0 li
cp
clp
[1 0 0 1 0 0 ]ct
295.99 1.40918 mo
296.936 1.39844 299.014 1.24121 300.68 2.93848 cv
302.348 4.63623 302.439 6.74219 302.439 7.7793 cv
302.439 10.6709 300.066 12.8364 297.018 12.8364 cv
295.758 12.8364 294.367 12.6221 293.906 12.3462 cv
293.754 12.2544 293.693 12.1318 293.693 11.9785 cv
293.693 1.96094 li
293.693 1.77686 293.785 1.6543 293.938 1.59326 cv
294.244 1.50098 295.07 1.41943 295.99 1.40918 cv
cp
299.541 13.127 mo
302.738 12.2495 304.893 9.57959 304.893 5.95654 cv
304.893 4.29004 304.012 2.87598 303.32 2.21582 cv
302.818 1.74463 301.402 .423828 297.475 .423828 cv
296.027 .423828 293.361 .520508 292.529 .520508 cv
292.168 .520508 290.445 .428711 289.066 .428711 cv
288.73 .428711 288.576 .490234 288.576 .674316 cv
288.576 .796875 288.699 .85791 288.822 .85791 cv
289.098 .85791 289.619 .888184 289.863 .950195 cv
290.875 1.16406 291.119 1.6543 291.182 2.6958 cv
291.242 3.67627 291.242 4.53418 291.242 9.31348 cv
291.242 14.7051 li
291.242 17.6465 291.242 20.0664 291.09 21.353 cv
290.967 22.2417 290.813 22.916 290.201 23.0381 cv
289.924 23.0996 289.557 23.1606 289.281 23.1606 cv
289.098 23.1606 289.035 23.2529 289.035 23.3442 cv
289.035 23.5288 289.189 23.5898 289.527 23.5898 cv
290.445 23.5898 292.375 23.498 292.406 23.498 cv
292.559 23.498 294.488 23.5898 296.174 23.5898 cv
296.512 23.5898 296.664 23.498 296.664 23.3442 cv
296.664 23.2529 296.604 23.1606 296.42 23.1606 cv
296.143 23.1606 295.469 23.0996 295.041 23.0381 cv
294.121 22.916 293.938 22.2417 293.846 21.353 cv
293.693 20.0664 293.693 17.6465 293.693 14.7051 cv
293.693 13.9697 li
293.693 13.8169 293.754 13.7251 293.906 13.7251 cv
296.881 13.771 li
297.064 13.771 297.227 13.8433 297.285 13.9697 cv
297.75 14.9878 298.395 16.7065 299.32 18.605 cv
300.586 21.1992 300.805 22.3486 302.121 23.0527 cv
302.918 23.4819 303.752 23.5898 305.469 23.5898 cv
306.945 23.5898 li
307.496 23.5898 307.682 23.5288 307.682 23.3442 cv
307.682 23.2529 307.559 23.1567 307.404 23.1606 cv
307.102 23.1689 306.594 23.0835 306.014 22.981 cv
305.516 22.8931 304.066 22.541 303.172 20.8633 cv
302.051 18.7651 300.764 15.7124 299.541 13.127 cv
cp
314.66 9.31348 mo
314.66 4.53418 314.66 3.67627 314.723 2.6958 cv
314.783 1.62354 315.027 1.10303 315.916 .950195 cv
316.285 .888184 316.713 .85791 316.928 .85791 cv
317.051 .85791 317.172 .796875 317.172 .674316 cv
317.172 .490234 317.02 .428711 316.684 .428711 cv
315.764 .428711 313.527 .520996 313.373 .520996 cv
313.221 .520996 311.289 .428711 309.912 .428711 cv
309.574 .428711 309.422 .490234 309.422 .674316 cv
309.422 .796875 309.543 .85791 309.666 .85791 cv
309.943 .85791 310.463 .888184 310.709 .950195 cv
311.719 1.16406 311.965 1.6543 312.025 2.6958 cv
312.088 3.67627 312.088 4.53418 312.088 9.31348 cv
312.088 14.7051 li
312.088 17.6465 312.088 20.0664 311.934 21.353 cv
311.813 22.2417 311.658 22.916 311.045 23.0381 cv
310.77 23.0996 310.402 23.1606 310.127 23.1606 cv
309.943 23.1606 309.881 23.2529 309.881 23.3442 cv
309.881 23.5288 310.035 23.5898 310.371 23.5898 cv
310.83 23.5898 311.506 23.5591 312.117 23.5288 cv
312.73 23.5288 313.252 23.498 313.373 23.498 cv
314.262 23.498 315.213 23.5288 316.498 23.5898 cv
317.785 23.6201 319.379 23.6816 321.584 23.6816 cv
323.207 23.6816 323.301 23.5591 323.514 22.8545 cv
323.76 21.9658 323.973 20.1279 323.973 19.7905 cv
323.973 19.4536 323.943 19.3311 323.789 19.3311 cv
323.605 19.3311 323.545 19.4844 323.514 19.7295 cv
323.422 20.3115 323.115 21.0776 322.717 21.5674 cv
321.982 22.4565 320.635 22.4868 319.01 22.4868 cv
316.621 22.4868 315.824 22.2725 315.334 21.7822 cv
314.783 21.2305 314.66 19.27 314.66 14.7666 cv
314.66 9.31348 li
cp
330.256 24.0186 mo
331.91 24.0186 333.564 23.6514 334.883 22.7319 cv
336.996 21.2305 337.486 18.9028 337.486 17.6465 cv
337.486 15.1958 336.629 13.2964 333.014 10.4473 cv
332.156 9.77295 li
329.215 7.47559 328.418 6.37207 328.418 4.62598 cv
328.418 2.38965 330.072 1.07275 332.188 1.07275 cv
335.006 1.07275 335.832 2.35889 336.016 2.6958 cv
336.199 3.0332 336.383 3.85986 336.414 4.22803 cv
336.445 4.47266 336.477 4.62598 336.66 4.62598 cv
336.813 4.62598 336.873 4.41162 336.873 3.92139 cv
336.873 1.83838 336.996 .827148 336.996 .674316 cv
336.996 .520996 336.936 .459473 336.689 .459473 cv
336.445 .459473 336.199 .428711 335.617 .306152 cv
334.852 .122559 333.963 0 332.768 0 cv
328.877 0 326.426 2.23633 326.426 5.51465 cv
326.426 7.59766 327.162 9.49707 330.41 12.1626 cv
331.789 13.2964 li
334.422 15.4712 335.311 16.6968 335.311 18.8105 cv
335.311 20.771 333.871 22.8848 330.93 22.8848 cv
328.877 22.8848 326.855 22.0273 326.396 19.7603 cv
326.305 19.3311 326.305 18.9028 326.305 18.627 cv
326.305 18.3813 326.273 18.2896 326.09 18.2896 cv
325.938 18.2896 325.875 18.4434 325.844 18.7798 cv
325.814 19.27 325.691 20.4951 325.691 22.0273 cv
325.691 22.8545 325.723 22.9771 326.15 23.1914 cv
327.406 23.8037 328.816 24.0186 330.256 24.0186 cv
cp
271.172 23.5898 mo
271.448 23.5898 271.631 23.5283 271.631 23.3442 cv
271.631 23.2217 271.54 23.1606 271.325 23.1606 cv
271.018 23.1606 li
270.499 23.1606 269.854 22.8848 269.854 22.2725 cv
269.854 21.7207 270.008 20.9854 270.284 20.2197 cv
272.122 14.7974 li
272.184 14.644 272.274 14.5518 272.428 14.5518 cv
279.014 14.5518 li
279.168 14.5518 279.229 14.6133 279.289 14.7358 cv
282.139 22.2725 li
282.322 22.7622 282.139 23.0381 281.955 23.0996 cv
281.834 23.1304 281.74 23.1914 281.74 23.314 cv
281.74 23.4976 282.078 23.4976 282.66 23.5283 cv
284.773 23.5898 287.01 23.5898 287.469 23.5898 cv
287.807 23.5898 288.082 23.5283 288.082 23.3442 cv
288.082 23.1914 287.959 23.1606 287.777 23.1606 cv
287.469 23.1606 287.01 23.1304 286.551 22.9771 cv
285.906 22.7935 285.018 22.3027 283.916 19.5762 cv
282.047 14.9199 277.238 2.26709 276.778 1.10254 cv
276.411 .15332 276.288 0 276.104 0 cv
275.92 0 275.797 .183594 275.43 1.19482 cv
268.477 20.2197 li
268.018 21.4907 267.518 22.5083 266.557 22.9233 cv
265.758 22.6543 264.963 22.0469 263.952 20.9121 cv
261.649 18.3247 256.864 12.2178 255.727 10.6621 cv
256.372 9.89551 261.737 4.65625 262.502 3.92139 cv
263.881 2.604 264.555 1.83789 265.813 1.28662 cv
266.424 1.01123 267.069 .85791 267.528 .85791 cv
267.772 .85791 267.834 .796875 267.834 .643555 cv
267.834 .490234 267.711 .428711 267.374 .428711 cv
266.608 .428711 264.586 .520996 264.434 .520996 cv
263.698 .520996 262.749 .428711 262.135 .428711 cv
261.922 .428711 261.768 .490234 261.768 .643555 cv
261.768 .765625 261.889 .827148 262.043 .888184 cv
262.29 .980469 262.442 1.16406 262.442 1.53174 cv
262.442 2.05273 261.645 2.84912 260.788 3.7373 cv
259.684 4.93213 254.139 10.5693 253.62 11.1514 cv
253.497 9.31348 li
253.497 4.53418 253.497 3.67627 253.557 2.6958 cv
253.62 1.62354 253.864 1.10254 254.69 .949707 cv
255.059 .888184 255.243 .85791 255.458 .85791 cv
255.581 .85791 255.702 .796875 255.702 .674316 cv
255.702 .490234 255.549 .428711 255.211 .428711 cv
254.293 .428711 252.516 .520996 252.241 .520996 cv
252.057 .520996 250.249 .428711 248.87 .428711 cv
248.534 .428711 248.379 .490234 248.379 .674316 cv
248.379 .796875 248.502 .85791 248.625 .85791 cv
248.901 .85791 249.422 .888184 249.667 .949707 cv
250.678 1.16406 250.922 1.6543 250.985 2.6958 cv
251.045 3.67627 251.045 4.53418 251.045 9.31348 cv
251.045 14.7051 li
251.045 17.6465 251.045 20.0664 250.893 21.353 cv
250.77 22.2417 250.618 22.9155 250.002 23.0381 cv
249.727 23.0996 249.36 23.1606 249.084 23.1606 cv
248.901 23.1606 248.84 23.2529 248.84 23.3442 cv
248.84 23.5283 248.993 23.5898 249.331 23.5898 cv
250.249 23.5898 252.026 23.4976 252.272 23.4976 cv
252.516 23.4976 254.293 23.5898 255.793 23.5898 cv
256.131 23.5898 256.284 23.4976 256.284 23.3442 cv
256.284 23.2529 256.223 23.1606 256.04 23.1606 cv
255.764 23.1606 255.272 23.0996 254.844 23.0381 cv
253.926 22.9155 253.743 22.2417 253.649 21.353 cv
253.497 20.0664 253.497 17.6465 253.497 14.7051 cv
253.512 11.7256 li
254.202 12.6807 257.036 16.4609 258.911 18.8325 cv
260.54 20.896 261.758 22.3564 263.067 23.0757 cv
263.624 23.3813 263.911 23.5962 265.333 23.5962 cv
265.333 23.5962 267.346 23.4932 268.418 23.4932 cv
269.438 23.4932 270.436 23.5898 271.172 23.5898 cv
cp
272.764 13.4492 mo
272.672 13.4492 272.612 13.3877 272.672 13.2344 cv
275.37 4.96338 li
275.522 4.50342 275.676 4.50342 275.829 4.96338 cv
278.738 13.2344 li
278.77 13.3574 278.77 13.4492 278.615 13.4492 cv
272.764 13.4492 li
cp
174.187 20.2197 mo
173.635 21.7515 173.022 22.916 171.613 23.0996 cv
171.368 23.1304 170.939 23.1606 170.724 23.1606 cv
170.571 23.1606 170.449 23.2217 170.449 23.3442 cv
170.449 23.5288 170.633 23.5898 171.031 23.5898 cv
172.471 23.5898 174.155 23.498 174.493 23.498 cv
174.83 23.498 176.147 23.5898 176.882 23.5898 cv
177.158 23.5898 177.342 23.5288 177.342 23.3442 cv
177.342 23.2217 177.25 23.1606 177.036 23.1606 cv
176.729 23.1606 li
176.208 23.1606 175.565 22.8848 175.565 22.2725 cv
175.565 21.7207 175.718 20.9854 175.994 20.2197 cv
177.832 14.7974 li
177.893 14.644 177.985 14.5518 178.138 14.5518 cv
184.725 14.5518 li
184.878 14.5518 184.939 14.6138 185 14.7358 cv
187.85 22.2725 li
188.034 22.7627 187.85 23.0381 187.666 23.0996 cv
187.544 23.1304 187.452 23.1914 187.452 23.314 cv
187.452 23.498 187.789 23.498 188.371 23.5288 cv
190.484 23.5898 192.721 23.5898 193.18 23.5898 cv
193.518 23.5898 193.793 23.5288 193.793 23.3442 cv
193.793 23.1914 193.671 23.1606 193.487 23.1606 cv
193.18 23.1606 192.721 23.1304 192.261 22.9771 cv
191.618 22.7935 190.729 22.3027 189.626 19.5762 cv
187.758 14.9199 182.948 2.26709 182.488 1.10303 cv
182.121 .15332 181.999 0 181.814 0 cv
181.631 0 181.508 .183594 181.141 1.19482 cv
174.187 20.2197 li
cp
178.475 13.4492 mo
178.383 13.4492 178.322 13.3877 178.383 13.2344 cv
181.08 4.96338 li
181.232 4.50391 181.386 4.50391 181.539 4.96338 cv
184.449 13.2344 li
184.48 13.3574 184.48 13.4492 184.327 13.4492 cv
178.475 13.4492 li
cp
133.554 1.40918 mo
134.5 1.39844 136.579 1.24121 138.244 2.93848 cv
139.911 4.63623 140.004 6.74219 140.004 7.7793 cv
140.004 10.6709 137.629 12.8364 134.581 12.8364 cv
133.321 12.8364 131.931 12.6221 131.471 12.3462 cv
131.318 12.2544 131.257 12.1318 131.257 11.9785 cv
131.257 1.96094 li
131.257 1.77686 131.349 1.6543 131.502 1.59326 cv
131.808 1.50098 132.635 1.41943 133.554 1.40918 cv
cp
137.104 13.127 mo
140.302 12.2495 142.456 9.57959 142.456 5.95654 cv
142.456 4.29004 141.576 2.87598 140.885 2.21582 cv
140.382 1.74463 138.967 .423828 135.038 .423828 cv
133.592 .423828 130.924 .520508 130.093 .520508 cv
129.732 .520508 128.009 .428711 126.63 .428711 cv
126.293 .428711 126.141 .490234 126.141 .674316 cv
126.141 .796875 126.263 .85791 126.386 .85791 cv
126.661 .85791 127.182 .888184 127.427 .950195 cv
128.438 1.16406 128.683 1.6543 128.745 2.6958 cv
128.806 3.67627 128.806 4.53418 128.806 9.31348 cv
128.806 14.7051 li
128.806 17.6465 128.806 20.0664 128.653 21.353 cv
128.53 22.2417 128.377 22.916 127.764 23.0381 cv
127.488 23.0996 127.121 23.1606 126.845 23.1606 cv
126.661 23.1606 126.6 23.2529 126.6 23.3442 cv
126.6 23.5288 126.753 23.5898 127.09 23.5898 cv
128.009 23.5898 129.939 23.498 129.97 23.498 cv
130.123 23.498 132.053 23.5898 133.738 23.5898 cv
134.075 23.5898 134.228 23.498 134.228 23.3442 cv
134.228 23.2529 134.167 23.1606 133.983 23.1606 cv
133.708 23.1606 133.033 23.0996 132.604 23.0381 cv
131.686 22.916 131.502 22.2417 131.41 21.353 cv
131.257 20.0664 131.257 17.6465 131.257 14.7051 cv
131.257 13.9697 li
131.257 13.8169 131.318 13.7251 131.471 13.7251 cv
134.444 13.771 li
134.628 13.771 134.791 13.8433 134.848 13.9697 cv
135.313 14.9878 135.958 16.7065 136.884 18.605 cv
138.149 21.1992 138.368 22.3486 139.686 23.0527 cv
140.482 23.4819 141.317 23.5898 143.033 23.5898 cv
144.509 23.5898 li
145.061 23.5898 145.245 23.5288 145.245 23.3442 cv
145.245 23.2529 145.122 23.1567 144.969 23.1606 cv
144.666 23.1689 144.158 23.0835 143.577 22.981 cv
143.08 22.8931 141.63 22.541 140.735 20.8633 cv
139.616 18.7651 138.327 15.7124 137.104 13.127 cv
cp
216.643 14.7051 mo
216.643 17.6465 216.643 20.0664 216.489 21.353 cv
216.368 22.2417 216.213 22.916 215.6 23.0381 cv
215.325 23.0996 214.958 23.1606 214.682 23.1606 cv
214.499 23.1606 214.436 23.2529 214.436 23.3442 cv
214.436 23.5288 214.59 23.5898 214.926 23.5898 cv
215.385 23.5898 216.09 23.5288 216.704 23.5288 cv
217.346 23.498 217.868 23.498 217.928 23.498 cv
218.083 23.498 219.124 23.5898 220.471 23.6816 cv
221.79 23.7734 223.413 23.8652 224.731 23.8652 cv
229.938 23.8652 232.696 21.7207 234.012 20.3423 cv
235.727 18.5347 237.321 15.563 237.321 11.7031 cv
237.321 8.05762 235.881 5.51465 234.35 3.92139 cv
230.704 .15332 225.098 .428711 222.065 .428711 cv
220.227 .428711 218.297 .520996 217.928 .520996 cv
217.776 .520996 215.844 .428711 214.467 .428711 cv
214.129 .428711 213.977 .490234 213.977 .674316 cv
213.977 .796875 214.1 .85791 214.221 .85791 cv
214.499 .85791 215.018 .888184 215.264 .950195 cv
216.274 1.16406 216.52 1.6543 216.581 2.6958 cv
216.643 3.67627 216.643 4.53418 216.643 9.31348 cv
216.643 14.7051 li
cp
219.215 8.82324 mo
219.215 6.46436 219.215 3.33936 219.247 2.29785 cv
219.247 1.96094 219.338 1.80762 219.614 1.68506 cv
219.86 1.5625 220.993 1.4707 221.606 1.4707 cv
225.25 1.4707 228.743 1.89941 231.624 4.93213 cv
232.879 6.24951 234.565 8.76172 234.565 12.6528 cv
234.565 15.4712 233.706 18.4121 232.114 19.9746 cv
230.305 21.7822 227.67 22.8237 224.823 22.8237 cv
221.208 22.8237 220.012 22.1807 219.614 21.5986 cv
219.37 21.2612 219.307 20.0356 219.278 19.27 cv
219.247 18.688 219.215 15.8696 219.215 12.6221 cv
219.215 8.82324 li
cp
201.458 1.40918 mo
202.404 1.39844 204.483 1.24121 206.148 2.93848 cv
207.815 4.63623 207.909 6.74219 207.909 7.7793 cv
207.909 10.6709 205.534 12.8364 202.485 12.8364 cv
201.226 12.8364 199.835 12.6221 199.375 12.3462 cv
199.222 12.2544 199.161 12.1318 199.161 11.9785 cv
199.161 1.96094 li
199.161 1.77686 199.253 1.6543 199.407 1.59326 cv
199.713 1.50098 200.54 1.41943 201.458 1.40918 cv
cp
205.009 13.127 mo
208.208 12.2495 210.36 9.57959 210.36 5.95654 cv
210.36 4.29004 209.481 2.87598 208.79 2.21582 cv
208.286 1.74463 206.872 .423828 202.942 .423828 cv
201.497 .423828 198.829 .520508 197.998 .520508 cv
197.637 .520508 195.914 .428711 194.535 .428711 cv
194.198 .428711 194.045 .490234 194.045 .674316 cv
194.045 .796875 194.168 .85791 194.29 .85791 cv
194.566 .85791 195.087 .888184 195.332 .950195 cv
196.343 1.16406 196.588 1.6543 196.649 2.6958 cv
196.71 3.67627 196.71 4.53418 196.71 9.31348 cv
196.71 14.7051 li
196.71 17.6465 196.71 20.0664 196.558 21.353 cv
196.435 22.2417 196.282 22.916 195.669 23.0381 cv
195.393 23.0996 195.025 23.1606 194.75 23.1606 cv
194.566 23.1606 194.505 23.2529 194.505 23.3442 cv
194.505 23.5288 194.658 23.5898 194.995 23.5898 cv
195.914 23.5898 197.844 23.498 197.875 23.498 cv
198.027 23.498 199.958 23.5898 201.643 23.5898 cv
201.98 23.5898 202.133 23.498 202.133 23.3442 cv
202.133 23.2529 202.072 23.1606 201.888 23.1606 cv
201.612 23.1606 200.938 23.0996 200.509 23.0381 cv
199.59 22.916 199.407 22.2417 199.314 21.353 cv
199.161 20.0664 199.161 17.6465 199.161 14.7051 cv
199.161 13.9697 li
199.161 13.8169 199.222 13.7251 199.375 13.7251 cv
202.349 13.771 li
202.532 13.771 202.695 13.8433 202.753 13.9697 cv
203.218 14.9878 203.862 16.7065 204.789 18.605 cv
206.054 21.1992 206.272 22.3486 207.59 23.0527 cv
208.385 23.4819 209.221 23.5898 210.938 23.5898 cv
212.415 23.5898 li
212.965 23.5898 213.149 23.5288 213.149 23.3442 cv
213.149 23.2529 213.026 23.1567 212.874 23.1606 cv
212.571 23.1689 212.063 23.0835 211.481 22.981 cv
210.985 22.8931 209.536 22.541 208.639 20.8633 cv
207.52 18.7651 206.231 15.7124 205.009 13.127 cv
cp
166.893 9.31348 mo
166.893 4.53418 166.893 3.67627 166.954 2.6958 cv
167.015 1.62354 167.261 1.10303 168.087 .950195 cv
168.455 .888184 168.639 .85791 168.853 .85791 cv
168.976 .85791 169.099 .796875 169.099 .674316 cv
169.099 .490234 168.945 .428711 168.608 .428711 cv
167.689 .428711 165.759 .520996 165.606 .520996 cv
165.453 .520996 163.522 .428711 162.144 .428711 cv
161.807 .428711 161.654 .490234 161.654 .674316 cv
161.654 .796875 161.776 .85791 161.899 .85791 cv
162.175 .85791 162.696 .888184 162.94 .950195 cv
163.952 1.16406 164.197 1.6543 164.258 2.6958 cv
164.319 3.67627 164.319 4.53418 164.319 9.31348 cv
164.319 9.95654 li
164.319 10.1099 164.228 10.1406 164.135 10.1406 cv
151.146 10.1406 li
151.054 10.1406 150.962 10.1099 150.962 9.95654 cv
150.962 9.31348 li
150.962 4.53418 150.962 3.67627 151.023 2.6958 cv
151.084 1.62354 151.33 1.10303 152.157 .950195 cv
152.524 .888184 152.708 .85791 152.923 .85791 cv
153.045 .85791 153.168 .796875 153.168 .674316 cv
153.168 .490234 153.014 .428711 152.677 .428711 cv
151.758 .428711 149.829 .520996 149.675 .520996 cv
149.522 .520996 147.592 .428711 146.213 .428711 cv
145.876 .428711 145.724 .490234 145.724 .674316 cv
145.724 .796875 145.846 .85791 145.968 .85791 cv
146.244 .85791 146.765 .888184 147.01 .950195 cv
148.021 1.16406 148.266 1.6543 148.327 2.6958 cv
148.388 3.67627 148.388 4.53418 148.388 9.31348 cv
148.388 14.7051 li
148.388 17.6465 148.388 20.0664 148.235 21.353 cv
148.113 22.2417 147.959 22.916 147.347 23.0381 cv
147.071 23.0996 146.704 23.1606 146.428 23.1606 cv
146.244 23.1606 146.183 23.2529 146.183 23.3442 cv
146.183 23.5288 146.336 23.5898 146.673 23.5898 cv
147.592 23.5898 149.522 23.498 149.675 23.498 cv
149.829 23.498 151.758 23.5898 153.443 23.5898 cv
153.781 23.5898 153.934 23.498 153.934 23.3442 cv
153.934 23.2529 153.872 23.1606 153.688 23.1606 cv
153.413 23.1606 152.739 23.0996 152.31 23.0381 cv
151.391 22.916 151.207 22.2417 151.115 21.353 cv
150.962 20.0664 150.962 17.6465 150.962 14.7051 cv
150.962 11.4888 li
150.962 11.3354 151.054 11.3047 151.146 11.3047 cv
164.135 11.3047 li
164.228 11.3047 164.319 11.3662 164.319 11.4888 cv
164.319 14.7051 li
164.319 17.6465 164.319 20.0664 164.166 21.353 cv
164.043 22.2417 163.891 22.916 163.278 23.0381 cv
163.002 23.0996 162.634 23.1606 162.358 23.1606 cv
162.175 23.1606 162.114 23.2529 162.114 23.3442 cv
162.114 23.5288 162.267 23.5898 162.604 23.5898 cv
163.522 23.5898 165.453 23.498 165.606 23.498 cv
165.759 23.498 167.689 23.5898 169.375 23.5898 cv
169.711 23.5898 169.864 23.498 169.864 23.3442 cv
169.864 23.2529 169.803 23.1606 169.619 23.1606 cv
169.343 23.1606 168.669 23.0996 168.241 23.0381 cv
167.322 22.916 167.138 22.2417 167.046 21.353 cv
166.893 20.0664 166.893 17.6465 166.893 14.7051 cv
166.893 9.31348 li
cp
96.085 11.4888 mo
96.085 11.3354 96.146 11.2739 96.269 11.2739 cv
96.7285 11.2739 98.2598 11.2739 98.6582 11.3354 cv
99.3936 11.4272 100.16 11.519 101.201 12.2241 cv
103.56 13.8477 104.173 16.5127 104.173 18.3511 cv
104.173 21.813 101.507 22.7012 99.853 22.7012 cv
99.3018 22.7012 97.9844 22.6401 97.1572 22.2417 cv
96.2075 21.7822 96.2075 21.353 96.1157 19.8521 cv
96.085 19.3926 96.085 15.5938 96.085 13.2344 cv
96.085 11.4888 li
cp
96.085 1.77686 mo
96.085 1.59326 96.1768 1.50098 96.4526 1.43994 cv
96.9424 1.31738 97.5864 1.28662 97.9229 1.28662 cv
100.925 1.28662 102.059 4.01318 102.059 6.55615 cv
102.059 7.8125 101.6 8.91504 100.956 9.65039 cv
100.313 10.3857 99.8838 10.4473 98.1685 10.4473 cv
97.0347 10.4473 96.4829 10.355 96.2993 10.3247 cv
96.146 10.2627 96.085 10.2017 96.085 9.9873 cv
96.085 1.77686 li
cp
93.6338 14.7051 mo
93.6338 17.6465 93.6338 20.0664 93.481 21.353 cv
93.3584 22.2417 93.2051 22.916 92.5923 23.0381 cv
92.3164 23.0996 91.9492 23.1606 91.6733 23.1606 cv
91.4897 23.1606 91.4287 23.2529 91.4287 23.3442 cv
91.4287 23.5288 91.5811 23.5898 91.9185 23.5898 cv
92.3779 23.5898 93.083 23.5288 93.6953 23.5288 cv
94.3389 23.498 94.8594 23.498 94.9209 23.498 cv
95.0435 23.498 95.9009 23.5288 96.7896 23.5898 cv
97.6782 23.6201 98.6582 23.6816 98.9951 23.6816 cv
104.234 23.6816 106.808 20.2813 106.808 17.0029 cv
106.808 13.4189 103.775 11.2437 101.507 10.5386 cv
102.947 9.0376 104.388 7.53662 104.388 5.02441 cv
104.388 3.49268 103.284 .428711 98.2598 .428711 cv
96.8511 .428711 95.6563 .520996 94.9209 .520996 cv
94.7676 .520996 92.8374 .428711 91.459 .428711 cv
91.1216 .428711 90.9688 .490234 90.9688 .674316 cv
90.9688 .796875 91.0913 .85791 91.2139 .85791 cv
91.4897 .85791 92.0103 .888184 92.2554 .950195 cv
93.2666 1.16406 93.5117 1.6543 93.5728 2.6958 cv
93.6338 3.67627 93.6338 4.53418 93.6338 9.31348 cv
93.6338 14.7051 li
cp
76.1816 14.7051 mo
76.1816 17.6465 76.1816 20.0664 76.0288 21.353 cv
75.9063 22.2417 75.7529 22.916 75.1401 23.0381 cv
74.8643 23.0996 74.4966 23.1606 74.2207 23.1606 cv
74.0371 23.1606 73.9761 23.2529 73.9761 23.3442 cv
73.9761 23.5288 74.1289 23.5898 74.4658 23.5898 cv
74.9253 23.5898 75.6304 23.5288 76.2427 23.5288 cv
76.8862 23.498 77.4072 23.498 77.4683 23.498 cv
77.9277 23.498 78.6631 23.5288 79.8579 23.5898 cv
81.0527 23.6201 82.7378 23.6816 85.0352 23.6816 cv
86.23 23.6816 86.4756 23.6816 86.6895 22.8848 cv
86.8428 22.2417 87.0879 20.1587 87.0879 19.9131 cv
87.0879 19.6992 87.0879 19.4536 86.9043 19.4536 cv
86.751 19.4536 86.6895 19.5762 86.6284 19.9131 cv
86.4136 21.1694 86.0464 21.7822 85.25 22.1191 cv
84.4531 22.4565 83.1055 22.4565 82.3091 22.4565 cv
79.3066 22.4565 78.8472 22.0581 78.7549 19.9443 cv
78.7246 19.3008 78.7549 15.7466 78.7549 14.7051 cv
78.7549 12.0093 li
78.7549 11.8867 78.8164 11.7949 78.9692 11.7949 cv
79.4902 11.7949 82.5229 11.856 83.3506 11.9482 cv
84.5454 12.0708 84.8213 12.5913 84.9438 13.0205 cv
85.0659 13.4189 85.0659 13.7251 85.0659 14.0313 cv
85.0659 14.1846 85.1274 14.3071 85.2808 14.3071 cv
85.4946 14.3071 85.4946 13.9697 85.4946 13.7251 cv
85.4946 13.5103 85.5562 12.377 85.6172 11.7646 cv
85.7095 10.7534 85.8628 10.2324 85.8628 10.0488 cv
85.8628 9.86475 85.8013 9.80322 85.7095 9.80322 cv
85.5869 9.80322 85.4644 9.95654 85.25 10.2017 cv
84.9741 10.5083 84.5454 10.5693 83.8101 10.6309 cv
83.1055 10.6919 79.3374 10.6919 78.939 10.6919 cv
78.7856 10.6919 78.7549 10.6001 78.7549 10.3857 cv
78.7549 1.93018 li
78.7549 1.71582 78.8164 1.62354 78.939 1.62354 cv
79.2759 1.62354 82.6152 1.6543 83.1362 1.71582 cv
84.7905 1.89941 85.0967 2.26709 85.311 2.75732 cv
85.4644 3.125 85.4946 3.646 85.4946 3.85986 cv
85.4946 4.10547 85.5562 4.2583 85.7402 4.2583 cv
85.8628 4.2583 85.9238 4.07471 85.9541 3.92139 cv
86.0156 3.55371 86.0771 2.20557 86.1074 1.89941 cv
86.1997 1.0415 86.3525 .674316 86.3525 .459473 cv
86.3525 .306152 86.3223 .183594 86.23 .183594 cv
86.0771 .183594 85.9541 .306152 85.8013 .336914 cv
85.5562 .398438 85.0659 .459473 84.4839 .490234 cv
83.7793 .520996 77.6831 .520996 77.4683 .520996 cv
76.2124 .459473 li
75.5381 .428711 74.7114 .428711 74.0063 .428711 cv
73.6694 .428711 73.5166 .490234 73.5166 .674316 cv
73.5166 .796875 73.6387 .85791 73.7612 .85791 cv
74.0371 .85791 74.5581 .888184 74.8027 .950195 cv
75.814 1.16406 76.0591 1.6543 76.1201 2.6958 cv
76.1816 3.67627 76.1816 4.53418 76.1816 9.31348 cv
76.1816 14.7051 li
cp
112.615 14.7051 mo
112.615 17.6465 112.615 20.0664 112.462 21.353 cv
112.34 22.2417 112.186 22.916 111.573 23.0381 cv
111.297 23.0996 110.93 23.1606 110.654 23.1606 cv
110.471 23.1606 110.409 23.2529 110.409 23.3442 cv
110.409 23.5288 110.563 23.5898 110.899 23.5898 cv
111.359 23.5898 112.064 23.5288 112.676 23.5288 cv
113.32 23.498 113.841 23.498 113.902 23.498 cv
114.361 23.498 115.097 23.5288 116.292 23.5898 cv
117.486 23.6201 119.171 23.6816 121.469 23.6816 cv
122.664 23.6816 122.909 23.6816 123.123 22.8848 cv
123.276 22.2417 123.521 20.1587 123.521 19.9131 cv
123.521 19.6992 123.521 19.4536 123.338 19.4536 cv
123.184 19.4536 123.123 19.5762 123.062 19.9131 cv
122.847 21.1694 122.48 21.7822 121.683 22.1191 cv
120.887 22.4565 119.539 22.4565 118.742 22.4565 cv
115.74 22.4565 115.28 22.0581 115.188 19.9443 cv
115.158 19.3008 115.188 15.7466 115.188 14.7051 cv
115.188 12.0093 li
115.188 11.8867 115.25 11.7949 115.403 11.7949 cv
115.924 11.7949 118.957 11.856 119.784 11.9482 cv
120.979 12.0708 121.254 12.5913 121.377 13.0205 cv
121.5 13.4189 121.5 13.7251 121.5 14.0313 cv
121.5 14.1846 121.561 14.3071 121.714 14.3071 cv
121.928 14.3071 121.928 13.9697 121.928 13.7251 cv
121.928 13.5103 121.989 12.377 122.051 11.7646 cv
122.143 10.7534 122.296 10.2324 122.296 10.0488 cv
122.296 9.86475 122.235 9.80322 122.143 9.80322 cv
122.021 9.80322 121.898 9.95654 121.683 10.2017 cv
121.408 10.5083 120.979 10.5693 120.244 10.6309 cv
119.539 10.6919 115.771 10.6919 115.373 10.6919 cv
115.219 10.6919 115.188 10.6001 115.188 10.3857 cv
115.188 1.93018 li
115.188 1.71582 115.25 1.62354 115.373 1.62354 cv
115.709 1.62354 119.049 1.6543 119.569 1.71582 cv
121.224 1.89941 121.53 2.26709 121.745 2.75732 cv
121.898 3.125 121.928 3.646 121.928 3.85986 cv
121.928 4.10547 121.989 4.2583 122.174 4.2583 cv
122.296 4.2583 122.357 4.07471 122.388 3.92139 cv
122.449 3.55371 122.511 2.20557 122.541 1.89941 cv
122.633 1.0415 122.786 .674316 122.786 .459473 cv
122.786 .306152 122.755 .183594 122.664 .183594 cv
122.511 .183594 122.388 .306152 122.235 .336914 cv
121.989 .398438 121.5 .459473 120.917 .490234 cv
120.213 .520996 114.116 .520996 113.902 .520996 cv
112.646 .459473 li
111.972 .428711 111.145 .428711 110.44 .428711 cv
110.103 .428711 109.95 .490234 109.95 .674316 cv
109.95 .796875 110.072 .85791 110.195 .85791 cv
110.471 .85791 110.991 .888184 111.236 .950195 cv
112.248 1.16406 112.492 1.6543 112.554 2.6958 cv
112.615 3.67627 112.615 4.53418 112.615 9.31348 cv
112.615 14.7051 li
cp
141.167 116.678 mo
141.167 116.371 141.289 116.248 141.535 116.248 cv
142.454 116.248 145.517 116.248 146.313 116.371 cv
147.784 116.556 149.316 116.738 151.399 118.148 cv
156.117 121.396 157.343 126.727 157.343 130.402 cv
157.343 137.327 152.012 139.103 148.703 139.103 cv
147.601 139.103 144.966 138.98 143.311 138.185 cv
141.411 137.265 141.411 136.406 141.228 133.404 cv
141.167 132.485 141.167 124.889 141.167 120.169 cv
141.167 116.678 li
cp
141.167 97.2539 mo
141.167 96.8867 141.351 96.7021 141.902 96.5801 cv
142.882 96.335 144.169 96.2734 144.843 96.2734 cv
150.848 96.2734 153.115 101.728 153.115 106.813 cv
153.115 109.325 152.196 111.531 150.909 113.002 cv
149.622 114.473 148.765 114.595 145.333 114.595 cv
143.066 114.595 141.963 114.41 141.596 114.35 cv
141.289 114.227 141.167 114.104 141.167 113.676 cv
141.167 97.2539 li
cp
136.265 123.11 mo
136.265 128.994 136.265 133.834 135.959 136.406 cv
135.714 138.185 135.407 139.532 134.182 139.777 cv
133.63 139.899 132.895 140.022 132.343 140.022 cv
131.976 140.022 131.854 140.206 131.854 140.39 cv
131.854 140.758 132.159 140.881 132.833 140.881 cv
133.752 140.881 135.162 140.758 136.387 140.758 cv
137.674 140.695 138.716 140.695 138.838 140.695 cv
139.083 140.695 140.799 140.758 142.576 140.881 cv
144.353 140.94 146.313 141.063 146.987 141.063 cv
157.465 141.063 162.612 134.263 162.612 127.706 cv
162.612 120.538 156.546 116.188 152.012 114.777 cv
154.891 111.776 157.771 108.773 157.771 103.749 cv
157.771 100.686 155.565 94.5576 145.517 94.5576 cv
142.699 94.5576 140.309 94.7422 138.838 94.7422 cv
138.532 94.7422 134.671 94.5576 131.914 94.5576 cv
131.24 94.5576 130.935 94.6807 130.935 95.0488 cv
130.935 95.2939 131.18 95.416 131.424 95.416 cv
131.976 95.416 133.018 95.4775 133.507 95.6006 cv
135.53 96.0283 136.02 97.0098 136.142 99.0928 cv
136.265 101.053 136.265 102.769 136.265 112.327 cv
136.265 123.11 li
cp
177.204 112.327 mo
177.204 102.769 177.204 101.053 177.327 99.0928 cv
177.45 96.9482 177.939 95.9063 179.593 95.6006 cv
180.329 95.4775 180.696 95.416 181.125 95.416 cv
181.371 95.416 181.616 95.2939 181.616 95.0488 cv
181.616 94.6807 181.309 94.5576 180.635 94.5576 cv
178.797 94.5576 174.938 94.7422 174.631 94.7422 cv
174.324 94.7422 170.464 94.5576 168.442 94.5576 cv
167.768 94.5576 167.462 94.6807 167.462 95.0488 cv
167.462 95.2939 167.707 95.416 167.952 95.416 cv
168.381 95.416 169.177 95.4775 169.851 95.6611 cv
171.2 95.9678 171.812 97.0098 171.934 99.0928 cv
172.057 101.053 172.057 102.769 172.057 112.327 cv
172.057 123.11 li
172.057 128.994 172.057 133.834 171.751 136.406 cv
171.506 138.185 171.2 139.532 169.974 139.777 cv
169.422 139.899 168.688 140.022 168.136 140.022 cv
167.768 140.022 167.646 140.206 167.646 140.39 cv
167.646 140.758 167.952 140.881 168.625 140.881 cv
170.464 140.881 174.324 140.695 174.631 140.695 cv
174.938 140.695 178.797 140.881 182.167 140.881 cv
182.841 140.881 183.147 140.695 183.147 140.39 cv
183.147 140.206 183.024 140.022 182.657 140.022 cv
182.105 140.022 180.758 139.899 179.9 139.777 cv
178.062 139.532 177.694 138.185 177.51 136.406 cv
177.204 133.834 177.204 128.994 177.204 123.11 cv
177.204 112.327 li
cp
195.759 103.198 mo
197.72 105.403 204.632 113.124 211.727 120.782 cv
218.211 127.768 227.02 136.775 227.692 137.387 cv
230.948 140.635 231.69 141.309 232.182 141.309 cv
232.616 141.309 232.739 141.003 232.739 136.958 cv
232.862 101.053 li
232.862 97.377 233.106 96.0283 235.129 95.6006 cv
235.864 95.416 236.293 95.416 236.6 95.416 cv
237.028 95.416 237.274 95.2324 237.274 94.9873 cv
237.274 94.6191 236.844 94.5576 236.17 94.5576 cv
233.659 94.5576 231.627 94.7422 230.948 94.7422 cv
230.268 94.7422 227.325 94.5576 224.573 94.5576 cv
223.838 94.5576 223.35 94.6191 223.35 94.9873 cv
223.35 95.2324 223.411 95.416 223.838 95.416 cv
224.329 95.416 225.735 95.4775 226.836 95.7227 cv
228.733 96.2129 229.161 97.5605 229.223 101.543 cv
229.897 132.669 li
227.938 130.647 221.27 123.173 215.213 116.678 cv
205.794 106.567 196.68 96.7021 195.759 95.6611 cv
195.141 95.0488 194.091 93.7012 193.597 93.7012 cv
193.104 93.7012 192.919 94.375 192.919 96.7646 cv
192.857 131.873 li
192.857 137.449 192.55 139.226 191.018 139.654 cv
190.099 139.961 188.997 140.022 188.506 140.022 cv
188.2 140.022 188.016 140.145 188.016 140.39 cv
188.016 140.818 188.383 140.881 188.997 140.881 cv
191.754 140.881 194.339 140.695 194.894 140.695 cv
195.45 140.695 197.903 140.881 201.39 140.881 cv
202.124 140.881 202.491 140.758 202.491 140.39 cv
202.491 140.145 202.307 140.022 202.001 140.022 cv
201.451 140.022 200.105 139.961 198.943 139.654 cv
197.292 139.165 196.68 137.571 196.558 132.548 cv
195.759 103.198 li
cp
276.944 135.668 mo
276.944 136.709 276.514 137.383 275.719 137.813 cv
274.125 138.731 270.94 139.099 268.735 139.099 cv
263.098 139.099 257.522 137.261 252.682 132.543 cv
250.536 130.459 246.186 124.21 246.186 115.57 cv
246.186 108.402 248.698 102.826 252.252 100.007 cv
256.909 96.3311 261.504 95.9639 265.364 95.9639 cv
273.268 95.9639 278.23 98.5977 279.764 100.927 cv
280.682 102.397 280.988 104.112 281.049 104.971 cv
281.109 105.521 281.172 105.89 281.479 105.89 cv
281.906 105.89 282.029 105.583 282.029 104.603 cv
282.029 98.4756 282.459 96.7607 282.459 95.9023 cv
282.459 95.6563 282.336 95.4121 281.723 95.3496 cv
280.191 95.29 278.047 95.0439 276.76 94.7383 cv
275.596 94.4932 271.247 93.6963 267.385 93.6963 cv
262.668 93.6963 256.602 94.126 251.088 97.5566 cv
245.635 100.988 240.856 107.911 240.856 117.715 cv
240.856 125.374 244.409 131.93 248.147 135.177 cv
254.948 141.12 263.649 141.733 268.305 141.733 cv
271.86 141.733 277.373 141.06 281.295 138.977 cv
282.029 138.547 282.09 138.424 282.09 135.668 cv
282.09 128.805 li
282.09 126.231 282.09 124.394 282.213 122.433 cv
282.336 120.289 282.826 119.246 284.48 118.94 cv
285.215 118.818 285.584 118.756 286.012 118.756 cv
286.256 118.756 286.502 118.634 286.502 118.389 cv
286.502 118.021 286.197 117.898 285.521 117.898 cv
283.684 117.898 279.824 118.082 279.518 118.082 cv
279.211 118.082 275.352 117.898 272.594 117.898 cv
271.92 117.898 271.614 118.021 271.614 118.389 cv
271.614 118.634 271.86 118.756 272.104 118.756 cv
272.655 118.756 273.698 118.818 274.188 118.94 cv
276.637 119.614 276.944 120.289 276.944 125.252 cv
276.944 135.668 li
cp
296.123 123.11 mo
296.123 128.994 296.123 133.834 295.816 136.406 cv
295.572 138.185 295.266 139.532 294.039 139.777 cv
293.488 139.899 292.752 140.022 292.201 140.022 cv
291.834 140.022 291.711 140.206 291.711 140.39 cv
291.711 140.758 292.018 140.881 292.691 140.881 cv
293.609 140.881 295.02 140.758 296.244 140.758 cv
297.531 140.695 298.574 140.695 298.697 140.695 cv
299.615 140.695 301.086 140.758 303.477 140.881 cv
305.865 140.94 309.234 141.063 313.83 141.063 cv
316.219 141.063 316.711 141.063 317.139 139.47 cv
317.445 138.185 317.936 134.018 317.936 133.527 cv
317.936 133.099 317.936 132.607 317.568 132.607 cv
317.262 132.607 317.139 132.853 317.016 133.527 cv
316.588 136.039 315.852 137.265 314.26 137.939 cv
312.666 138.613 309.971 138.613 308.377 138.613 cv
302.373 138.613 301.453 137.816 301.27 133.589 cv
301.209 132.302 301.27 125.193 301.27 123.11 cv
301.27 117.719 li
301.27 117.474 301.393 117.29 301.697 117.29 cv
302.74 117.29 308.807 117.412 310.461 117.597 cv
312.85 117.842 313.402 118.883 313.646 119.741 cv
313.893 120.538 313.893 121.15 313.893 121.763 cv
313.893 122.069 314.014 122.314 314.32 122.314 cv
314.748 122.314 314.748 121.64 314.748 121.15 cv
314.748 120.722 314.871 118.454 314.994 117.229 cv
315.178 115.207 315.484 114.165 315.484 113.798 cv
315.484 113.43 315.363 113.307 315.178 113.307 cv
314.934 113.307 314.688 113.614 314.26 114.104 cv
313.707 114.718 312.85 114.84 311.379 114.962 cv
309.971 115.085 302.434 115.085 301.637 115.085 cv
301.33 115.085 301.27 114.9 301.27 114.473 cv
301.27 97.5605 li
301.27 97.1318 301.393 96.9482 301.637 96.9482 cv
302.313 96.9482 308.99 97.0098 310.031 97.1318 cv
313.34 97.499 313.953 98.2354 314.381 99.2148 cv
314.688 99.9512 314.748 100.992 314.748 101.42 cv
314.748 101.911 314.871 102.218 315.24 102.218 cv
315.484 102.218 315.607 101.85 315.668 101.543 cv
315.791 100.808 315.914 98.1113 315.975 97.499 cv
316.158 95.7842 316.465 95.0488 316.465 94.6191 cv
316.465 94.3135 316.404 94.0684 316.219 94.0684 cv
315.914 94.0684 315.668 94.3135 315.363 94.375 cv
314.871 94.498 313.893 94.6191 312.729 94.6807 cv
311.318 94.7422 299.125 94.7422 298.697 94.7422 cv
296.184 94.6191 li
294.836 94.5576 293.182 94.5576 291.771 94.5576 cv
291.098 94.5576 290.793 94.6807 290.793 95.0488 cv
290.793 95.2939 291.037 95.416 291.281 95.416 cv
291.834 95.416 292.875 95.4775 293.365 95.6006 cv
295.387 96.0283 295.877 97.0098 296 99.0928 cv
296.123 101.053 296.123 102.769 296.123 112.327 cv
296.123 123.11 li
cp
331.896 103.198 mo
333.857 105.403 340.77 113.124 347.865 120.782 cv
354.35 127.768 363.156 136.775 363.83 137.387 cv
367.086 140.635 367.826 141.309 368.32 141.309 cv
368.754 141.309 368.877 141.003 368.877 136.958 cv
369 101.053 li
369 97.377 369.244 96.0283 371.268 95.6006 cv
372.002 95.416 372.432 95.416 372.738 95.416 cv
373.166 95.416 373.41 95.2324 373.41 94.9873 cv
373.41 94.6191 372.982 94.5576 372.309 94.5576 cv
369.797 94.5576 367.766 94.7422 367.086 94.7422 cv
366.406 94.7422 363.463 94.5576 360.711 94.5576 cv
359.977 94.5576 359.488 94.6191 359.488 94.9873 cv
359.488 95.2324 359.549 95.416 359.977 95.416 cv
360.467 95.416 361.873 95.4775 362.973 95.7227 cv
364.869 96.2129 365.297 97.5605 365.359 101.543 cv
366.035 132.669 li
364.076 130.647 357.406 123.173 351.352 116.678 cv
341.932 106.567 332.818 96.7021 331.896 95.6611 cv
331.279 95.0488 330.229 93.7012 329.734 93.7012 cv
329.242 93.7012 329.057 94.375 329.057 96.7646 cv
328.994 131.873 li
328.994 137.449 328.688 139.226 327.156 139.654 cv
326.236 139.961 325.135 140.022 324.643 140.022 cv
324.338 140.022 324.152 140.145 324.152 140.39 cv
324.152 140.818 324.521 140.881 325.135 140.881 cv
327.891 140.881 330.477 140.695 331.031 140.695 cv
331.588 140.695 334.041 140.881 337.527 140.881 cv
338.262 140.881 338.627 140.758 338.627 140.39 cv
338.627 140.145 338.445 140.022 338.139 140.022 cv
337.588 140.022 336.244 139.961 335.08 139.654 cv
333.43 139.165 332.818 137.571 332.695 132.548 cv
331.896 103.198 li
cp
60.0176 97.1934 mo
67.7231 97.3154 li
73.5947 97.4385 75.0625 98.8477 75.2456 100.686 cv
75.3076 101.36 li
75.3701 102.218 75.4956 102.401 75.8086 102.401 cv
76.0591 102.401 76.2471 102.156 76.2471 101.604 cv
76.2471 100.931 76.4351 96.7021 76.4351 94.8643 cv
76.4351 94.498 76.4351 94.1299 76.1216 94.1299 cv
75.8711 94.1299 75.3076 94.3135 74.3892 94.4355 cv
73.4111 94.6191 72.0044 94.7422 70.0474 94.7422 cv
47.0884 94.7422 li
46.3535 94.7422 44.0254 94.6191 42.248 94.4355 cv
40.5942 94.3135 39.981 93.7012 39.5527 93.7012 cv
39.3071 93.7012 39.062 94.498 38.9395 94.8643 cv
38.8169 95.3545 37.5913 100.624 37.5913 101.237 cv
37.5913 101.604 37.7139 101.789 37.8979 101.789 cv
38.1431 101.789 38.3271 101.666 38.5103 101.176 cv
38.6943 100.748 38.8789 100.318 39.5527 99.2773 cv
40.5327 97.8066 42.0034 97.377 45.8018 97.3154 cv
54.8706 97.1934 li
54.8706 123.11 li
54.8706 128.994 54.8706 133.834 54.564 136.406 cv
54.3193 138.185 54.0127 139.532 52.7866 139.777 cv
52.2363 139.899 51.5005 140.022 50.9487 140.022 cv
50.5811 140.022 50.459 140.206 50.459 140.39 cv
50.459 140.758 50.7656 140.881 51.4395 140.881 cv
53.2778 140.881 57.1372 140.695 57.4438 140.695 cv
57.7505 140.695 61.6069 140.881 64.9707 140.881 cv
65.644 140.881 65.9497 140.695 65.9497 140.39 cv
65.9497 140.206 65.8271 140.022 65.4609 140.022 cv
64.9102 140.022 63.5645 139.899 62.708 139.777 cv
60.873 139.532 60.5063 138.185 60.3232 136.406 cv
60.0176 133.834 60.0176 128.994 60.0176 123.11 cv
60.0176 97.1934 li
cp
85.8101 121.268 mo
85.8101 130.213 88.1387 134.502 91.1411 137.381 cv
95.4912 141.486 101.68 141.731 103.763 141.731 cv
107.378 141.731 111.973 141.119 116.385 137.197 cv
121.287 132.848 122.022 125.494 122.022 118.877 cv
122.022 112.322 li
122.022 102.763 122.022 101.048 122.145 99.0859 cv
122.267 96.9414 122.757 95.9619 124.412 95.5947 cv
125.146 95.4717 125.515 95.4102 125.943 95.4102 cv
126.188 95.4102 126.434 95.2881 126.434 95.043 cv
126.434 94.6748 126.127 94.5518 125.453 94.5518 cv
123.615 94.5518 120.735 94.7363 120.306 94.7363 cv
119.938 94.7363 116.568 94.5518 113.811 94.5518 cv
113.137 94.5518 112.831 94.6748 112.831 95.043 cv
112.831 95.2881 113.076 95.4102 113.321 95.4102 cv
113.873 95.4102 114.915 95.4717 115.404 95.5947 cv
117.426 96.0225 117.917 97.0039 118.039 99.0859 cv
118.162 101.048 118.162 102.763 118.162 112.322 cv
118.162 119.98 li
118.162 126.291 117.426 131.5 114.608 134.992 cv
112.402 137.627 108.726 139.403 104.988 139.403 cv
101.496 139.403 98.7383 138.853 95.7363 136.033 cv
93.1016 133.521 91.1411 129.723 91.1411 120.899 cv
91.1411 112.322 li
91.1411 102.763 91.1411 101.048 91.2632 99.0859 cv
91.3857 96.9414 91.876 95.8398 93.5308 95.5947 cv
94.2656 95.4717 94.6338 95.4102 95.062 95.4102 cv
95.3071 95.4102 95.5527 95.2881 95.5527 95.043 cv
95.5527 94.6748 95.2461 94.5518 94.5723 94.5518 cv
92.7339 94.5518 89.0581 94.7363 88.5063 94.7363 cv
87.9546 94.7363 84.2168 94.5518 81.4595 94.5518 cv
80.7856 94.5518 80.48 94.6748 80.48 95.043 cv
80.48 95.2881 80.7251 95.4102 80.9697 95.4102 cv
81.5215 95.4102 82.563 95.4717 83.0527 95.5947 cv
85.0752 96.0225 85.5649 97.0039 85.6875 99.0859 cv
85.8101 101.048 85.8101 102.763 85.8101 112.322 cv
85.8101 121.268 li
cp
107.713 110.441 mo
107.713 108.786 106.487 107.745 104.894 107.745 cv
103.362 107.745 102.443 108.909 102.443 110.38 cv
102.443 112.279 103.975 113.015 105.078 113.015 cv
106.242 113.015 107.713 112.279 107.713 110.441 cv
cp
107.713 98.126 mo
107.713 96.4707 106.487 95.4297 104.894 95.4297 cv
103.362 95.4297 102.443 96.5938 102.443 98.0645 cv
102.443 99.9639 103.975 100.698 105.078 100.698 cv
106.242 100.698 107.713 99.9639 107.713 98.126 cv
cp
224.932 61.4629 mo
231.342 59.7051 235.659 54.3535 235.659 47.0923 cv
235.659 43.7529 233.895 40.9185 232.508 39.5957 cv
231.5 38.6509 228.665 36.0044 220.792 36.0044 cv
217.893 36.0044 212.547 36.1982 210.879 36.1982 cv
210.157 36.1982 206.703 36.0142 203.941 36.0142 cv
203.266 36.0142 202.959 36.1367 202.959 36.5059 cv
202.959 36.7515 203.205 36.874 203.45 36.874 cv
204.003 36.874 205.046 36.9351 205.538 37.0586 cv
207.565 37.4878 208.055 38.4707 208.178 40.5576 cv
208.301 42.5225 208.301 44.2417 208.301 53.8203 cv
208.301 64.6265 li
208.301 70.5215 208.301 75.3721 207.995 77.9492 cv
207.749 79.7314 207.44 81.082 206.213 81.3271 cv
205.66 81.4502 204.924 81.5732 204.371 81.5732 cv
204.003 81.5732 203.88 81.7568 203.88 81.9404 cv
203.88 82.3105 204.187 82.4326 204.862 82.4326 cv
206.703 82.4326 210.573 82.248 210.633 82.248 cv
210.94 82.248 214.809 82.4326 218.186 82.4326 cv
218.862 82.4326 219.168 82.248 219.168 81.9404 cv
219.168 81.7568 219.045 81.5732 218.676 81.5732 cv
218.124 81.5732 216.774 81.4502 215.915 81.3271 cv
214.073 81.082 213.704 79.7314 213.52 77.9492 cv
213.211 75.3721 213.211 70.5215 213.211 64.6265 cv
213.211 63.1528 li
213.211 62.8462 213.334 62.6616 213.643 62.6616 cv
219.6 62.7544 li
219.969 62.7544 220.293 62.8984 220.411 63.1528 cv
221.344 65.1924 222.635 68.6377 224.491 72.4424 cv
227.026 77.6406 227.465 79.9443 230.106 81.3564 cv
231.702 82.2168 233.375 82.4326 236.813 82.4326 cv
239.772 82.4326 li
240.877 82.4326 241.247 82.3105 241.247 81.9404 cv
241.247 81.7568 241 81.5645 240.694 81.5732 cv
240.086 81.5889 239.069 81.418 237.905 81.2119 cv
236.909 81.0361 234.002 80.3311 232.209 76.9688 cv
229.965 72.7627 227.381 66.6445 224.932 61.4629 cv
cp
5.34424 62.772 mo
5.34424 71.7402 7.6792 76.041 10.689 78.9287 cv
15.0503 83.0439 21.2549 83.29 23.3438 83.29 cv
26.9683 83.29 31.5757 82.6768 35.999 78.7441 cv
40.9136 74.3818 41.6504 67.0107 41.6504 60.376 cv
41.6504 53.8032 li
41.6504 44.2192 41.6504 42.499 41.7734 40.5332 cv
41.896 38.3833 42.3882 37.4009 44.0464 37.0322 cv
44.7832 36.9087 45.1528 36.8477 45.582 36.8477 cv
45.8286 36.8477 46.0742 36.7246 46.0742 36.4795 cv
46.0742 36.1099 45.7666 35.9873 45.0908 35.9873 cv
43.248 35.9873 40.3608 36.1719 39.9307 36.1719 cv
39.562 36.1719 36.1831 35.9873 33.4185 35.9873 cv
32.7427 35.9873 32.436 36.1099 32.436 36.4795 cv
32.436 36.7246 32.6816 36.8477 32.9272 36.8477 cv
33.4805 36.8477 34.5244 36.9087 35.0156 37.0322 cv
37.0435 37.4614 37.5347 38.4448 37.6572 40.5332 cv
37.7803 42.499 37.7803 44.2192 37.7803 53.8032 cv
37.7803 61.4819 li
37.7803 67.8096 37.0435 73.0313 34.2173 76.5322 cv
32.0059 79.1738 28.3203 80.9561 24.5723 80.9561 cv
21.0713 80.9561 18.3062 80.4023 15.2964 77.5771 cv
12.6548 75.0576 10.689 71.2495 10.689 62.4033 cv
10.689 53.8032 li
10.689 44.2192 10.689 42.499 10.812 40.5332 cv
10.9346 38.3833 11.4258 37.2778 13.085 37.0322 cv
13.8218 36.9087 14.1909 36.8477 14.6201 36.8477 cv
14.8657 36.8477 15.1123 36.7246 15.1123 36.4795 cv
15.1123 36.1099 14.8047 35.9873 14.1289 35.9873 cv
12.2861 35.9873 8.60059 36.1719 8.04736 36.1719 cv
7.49414 36.1719 3.74658 35.9873 .982422 35.9873 cv
.306641 35.9873 0 36.1099 0 36.4795 cv
0 36.7246 .245605 36.8477 .491211 36.8477 cv
1.04443 36.8477 2.08838 36.9087 2.57959 37.0322 cv
4.60742 37.4614 5.09814 38.4448 5.22119 40.5332 cv
5.34424 42.499 5.34424 44.2192 5.34424 53.8032 cv
5.34424 62.772 li
cp
55.4888 44.6494 mo
57.4546 46.8608 64.3843 54.6016 71.499 62.2808 cv
78 69.2837 86.8311 78.3145 87.5059 78.9287 cv
90.77 82.1846 91.5132 82.8604 92.0083 82.8604 cv
92.4424 82.8604 92.5659 82.5527 92.5659 78.498 cv
92.6885 42.499 li
92.6885 38.8135 92.9341 37.4614 94.9619 37.0322 cv
95.6987 36.8477 96.1289 36.8477 96.4365 36.8477 cv
96.8657 36.8477 97.1123 36.6631 97.1123 36.4175 cv
97.1123 36.0488 96.6821 35.9873 96.0059 35.9873 cv
93.4873 35.9873 91.4512 36.1719 90.77 36.1719 cv
90.0884 36.1719 87.1377 35.9873 84.3779 35.9873 cv
83.6421 35.9873 83.1519 36.0488 83.1519 36.4175 cv
83.1519 36.6631 83.2129 36.8477 83.6421 36.8477 cv
84.1333 36.8477 85.543 36.9087 86.6475 37.1553 cv
88.5483 37.6465 88.9775 38.998 89.0396 42.9902 cv
89.7173 74.1982 li
87.7515 72.1709 81.0664 64.6768 74.9946 58.1646 cv
65.5498 48.0278 56.4121 38.1377 55.4888 37.0933 cv
54.8691 36.4795 53.8164 35.1274 53.3218 35.1274 cv
52.8267 35.1274 52.6411 35.8032 52.6411 38.1992 cv
52.5791 73.3994 li
52.5791 78.9902 52.272 80.7715 50.7354 81.2021 cv
49.814 81.5088 48.7085 81.5693 48.2168 81.5693 cv
47.9102 81.5693 47.7256 81.6934 47.7256 81.9385 cv
47.7256 82.3691 48.0938 82.4307 48.7085 82.4307 cv
51.4731 82.4307 54.0649 82.2451 54.6216 82.2451 cv
55.1787 82.2451 57.6382 82.4307 61.1348 82.4307 cv
61.8706 82.4307 62.2378 82.3076 62.2378 81.9385 cv
62.2378 81.6934 62.0542 81.5693 61.7476 81.5693 cv
61.1953 81.5693 59.8467 81.5088 58.6816 81.2021 cv
57.0254 80.71 56.4121 79.1133 56.2896 74.0762 cv
55.4888 44.6494 li
cp
111.326 53.8032 mo
111.326 44.2192 111.326 42.499 111.449 40.5332 cv
111.572 38.3833 112.063 37.3389 113.721 37.0322 cv
114.459 36.9087 114.828 36.8477 115.258 36.8477 cv
115.503 36.8477 115.749 36.7246 115.749 36.4795 cv
115.749 36.1099 115.441 35.9873 114.766 35.9873 cv
112.923 35.9873 109.053 36.1719 108.746 36.1719 cv
108.438 36.1719 104.568 35.9873 102.542 35.9873 cv
101.865 35.9873 101.558 36.1099 101.558 36.4795 cv
101.558 36.7246 101.804 36.8477 102.049 36.8477 cv
102.479 36.8477 103.278 36.9087 103.954 37.0933 cv
105.306 37.4009 105.919 38.4448 106.042 40.5332 cv
106.165 42.499 106.165 44.2192 106.165 53.8032 cv
106.165 64.6147 li
106.165 70.5127 106.165 75.3652 105.859 77.9453 cv
105.613 79.7275 105.306 81.0791 104.077 81.3242 cv
103.523 81.4473 102.787 81.5693 102.234 81.5693 cv
101.865 81.5693 101.743 81.7549 101.743 81.9385 cv
101.743 82.3076 102.049 82.4307 102.725 82.4307 cv
104.568 82.4307 108.438 82.2451 108.746 82.2451 cv
109.053 82.2451 112.923 82.4307 116.302 82.4307 cv
116.978 82.4307 117.284 82.2451 117.284 81.9385 cv
117.284 81.7549 117.162 81.5693 116.793 81.5693 cv
116.24 81.5693 114.889 81.4473 114.029 81.3242 cv
112.186 81.0791 111.817 79.7275 111.633 77.9453 cv
111.326 75.3652 111.326 70.5127 111.326 64.6147 cv
111.326 53.8032 li
cp
346.76 41.6953 mo
348.418 41.6953 349.463 40.4668 349.463 38.8691 cv
349.463 37.334 348.295 36.4126 346.82 36.4126 cv
344.916 36.4126 344.18 37.9478 344.18 39.0537 cv
344.18 40.2212 344.916 41.6953 346.76 41.6953 cv
cp
362.52 41.6953 mo
364.18 41.6953 365.223 40.4668 365.223 38.8691 cv
365.223 37.334 364.057 36.4126 362.582 36.4126 cv
360.678 36.4126 359.939 37.9478 359.939 39.0537 cv
359.939 40.2212 360.678 41.6953 362.52 41.6953 cv
cp
347.605 62.0962 mo
347.422 62.0962 347.299 61.9731 347.422 61.6655 cv
352.828 45.0796 li
353.135 44.1582 353.441 44.1582 353.748 45.0796 cv
359.584 61.6655 li
359.646 61.9121 359.646 62.0962 359.34 62.0962 cv
347.605 62.0962 li
cp
339.006 75.6729 mo
337.898 78.7441 336.672 81.0791 333.844 81.4473 cv
333.354 81.5088 332.494 81.5693 332.063 81.5693 cv
331.756 81.5693 331.51 81.6934 331.51 81.9385 cv
331.51 82.3076 331.879 82.4307 332.678 82.4307 cv
335.564 82.4307 338.943 82.2451 339.619 82.2451 cv
340.295 82.2451 342.938 82.4307 344.41 82.4307 cv
344.965 82.4307 345.332 82.3076 345.332 81.9385 cv
345.332 81.6934 345.148 81.5693 344.719 81.5693 cv
344.104 81.5693 li
343.059 81.5693 341.77 81.0176 341.77 79.7891 cv
341.77 78.6826 342.076 77.209 342.631 75.6729 cv
346.316 64.7993 li
346.439 64.4917 346.623 64.3071 346.93 64.3071 cv
360.139 64.3071 li
360.445 64.3071 360.568 64.4312 360.689 64.6768 cv
366.404 79.7891 li
366.771 80.7715 366.404 81.3242 366.035 81.4473 cv
365.789 81.5088 365.605 81.6318 365.605 81.877 cv
365.605 82.2451 366.281 82.2451 367.447 82.3076 cv
371.688 82.4307 376.172 82.4307 377.094 82.4307 cv
377.768 82.4307 378.322 82.3076 378.322 81.9385 cv
378.322 81.6318 378.076 81.5693 377.707 81.5693 cv
377.094 81.5693 376.172 81.5088 375.25 81.2021 cv
373.959 80.833 372.178 79.8496 369.967 74.3818 cv
366.219 65.0449 356.574 39.6738 355.652 37.3389 cv
354.916 35.4351 354.672 35.1274 354.301 35.1274 cv
353.934 35.1274 353.688 35.4961 352.951 37.5234 cv
339.006 75.6729 li
cp
132.678 43.4824 mo
131.757 41.0864 131.019 39.1816 131.019 38.3833 cv
131.019 37.9536 131.142 37.4614 131.818 37.1553 cv
132.371 36.9087 133.477 36.8477 134.153 36.8477 cv
134.582 36.8477 134.767 36.7246 134.767 36.4175 cv
134.767 36.1099 134.214 35.9873 133.108 35.9873 cv
130.773 35.9873 128.009 36.1719 127.395 36.1719 cv
126.658 36.1719 123.156 35.9873 120.208 35.9873 cv
119.224 35.9873 118.61 36.0488 118.61 36.4175 cv
118.61 36.6631 118.733 36.8477 119.101 36.8477 cv
119.471 36.8477 120.515 36.8477 121.437 37.0933 cv
123.586 37.707 124.508 38.3833 125.859 41.8232 cv
140.91 79.4814 li
142.077 82.4307 142.384 83.29 143.122 83.29 cv
143.735 83.29 143.981 82.3076 145.701 78.6211 cv
147.115 75.6104 149.879 68.9766 153.627 60.0073 cv
156.76 52.4512 159.832 45.0796 160.507 43.3599 cv
162.166 39.1816 163.087 38.1377 163.886 37.5845 cv
165.053 36.8477 166.404 36.8477 166.834 36.8477 cv
167.326 36.8477 167.571 36.7246 167.571 36.4175 cv
167.571 36.1099 167.203 35.9873 166.527 35.9873 cv
164.746 35.9873 162.104 36.1719 161.735 36.1719 cv
160.999 36.1719 158.172 35.9873 155.715 35.9873 cv
154.732 35.9873 154.364 36.1099 154.364 36.4795 cv
154.364 36.7856 154.671 36.8477 155.04 36.8477 cv
155.715 36.8477 156.637 36.8477 157.374 37.0933 cv
157.988 37.4009 158.172 38.0146 158.172 38.5059 cv
158.172 39.0591 157.927 39.9194 157.619 40.8408 cv
156.269 45.2637 148.036 66.7031 144.473 74.9355 cv
132.678 43.4824 li
cp
175.229 64.6147 mo
175.229 70.5127 175.229 75.3652 174.923 77.9453 cv
174.677 79.7275 174.37 81.0791 173.141 81.3242 cv
172.588 81.4473 171.851 81.5693 171.298 81.5693 cv
170.93 81.5693 170.807 81.7549 170.807 81.9385 cv
170.807 82.3076 171.113 82.4307 171.789 82.4307 cv
172.71 82.4307 174.124 82.3076 175.352 82.3076 cv
176.643 82.2451 177.687 82.2451 177.81 82.2451 cv
178.731 82.2451 180.206 82.3076 182.602 82.4307 cv
184.998 82.4922 188.376 82.6143 192.983 82.6143 cv
195.379 82.6143 195.871 82.6143 196.301 81.0176 cv
196.608 79.7275 197.099 75.5508 197.099 75.0576 cv
197.099 74.6289 197.099 74.1367 196.731 74.1367 cv
196.423 74.1367 196.301 74.3818 196.178 75.0576 cv
195.748 77.5771 195.011 78.8057 193.414 79.4814 cv
191.816 80.1572 189.114 80.1572 187.517 80.1572 cv
181.496 80.1572 180.574 79.3594 180.39 75.1201 cv
180.329 73.8301 180.39 66.7031 180.39 64.6147 cv
180.39 59.209 li
180.39 58.9634 180.513 58.7788 180.82 58.7788 cv
181.864 58.7788 187.946 58.9014 189.605 59.0859 cv
192.001 59.3315 192.554 60.376 192.8 61.2363 cv
193.045 62.0352 193.045 62.6489 193.045 63.2632 cv
193.045 63.5703 193.168 63.8159 193.476 63.8159 cv
193.905 63.8159 193.905 63.1401 193.905 62.6489 cv
193.905 62.2188 194.027 59.9458 194.15 58.7178 cv
194.335 56.6899 194.643 55.646 194.643 55.2773 cv
194.643 54.9082 194.52 54.7852 194.335 54.7852 cv
194.089 54.7852 193.844 55.0928 193.414 55.584 cv
192.86 56.1992 192.001 56.3218 190.526 56.4443 cv
189.114 56.5674 181.558 56.5674 180.759 56.5674 cv
180.451 56.5674 180.39 56.3828 180.39 55.9531 cv
180.39 38.998 li
180.39 38.5679 180.513 38.3833 180.759 38.3833 cv
181.435 38.3833 188.13 38.4448 189.175 38.5679 cv
192.492 38.936 193.106 39.6738 193.536 40.6563 cv
193.844 41.394 193.905 42.438 193.905 42.8677 cv
193.905 43.3599 194.027 43.666 194.397 43.666 cv
194.643 43.666 194.765 43.2979 194.826 42.9902 cv
194.949 42.2534 195.073 39.5503 195.134 38.936 cv
195.318 37.2163 195.625 36.4795 195.625 36.0488 cv
195.625 35.7417 195.564 35.4961 195.379 35.4961 cv
195.073 35.4961 194.826 35.7417 194.52 35.8032 cv
194.027 35.9263 193.045 36.0488 191.878 36.1099 cv
190.465 36.1719 178.24 36.1719 177.81 36.1719 cv
175.292 36.0488 li
173.939 35.9873 172.281 35.9873 170.868 35.9873 cv
170.192 35.9873 169.885 36.1099 169.885 36.4795 cv
169.885 36.7246 170.131 36.8477 170.376 36.8477 cv
170.93 36.8477 171.974 36.9087 172.465 37.0322 cv
174.493 37.4614 174.984 38.4448 175.106 40.5332 cv
175.229 42.499 175.229 44.2192 175.229 53.8032 cv
175.229 64.6147 li
cp
255.165 83.29 mo
258.481 83.29 261.797 82.5527 264.44 80.71 cv
268.678 77.6992 269.661 73.0313 269.661 70.5127 cv
269.661 65.5981 267.94 61.7896 260.692 56.0762 cv
258.971 54.7246 li
253.075 50.1172 251.477 47.9048 251.477 44.4038 cv
251.477 39.9194 254.795 37.2778 259.034 37.2778 cv
264.686 37.2778 266.344 39.8574 266.713 40.5332 cv
267.081 41.209 267.45 42.8677 267.512 43.6055 cv
267.573 44.0962 267.635 44.4038 268.002 44.4038 cv
268.311 44.4038 268.434 43.9736 268.434 42.9902 cv
268.434 38.8135 268.678 36.7856 268.678 36.4795 cv
268.678 36.1719 268.555 36.0488 268.063 36.0488 cv
267.573 36.0488 267.081 35.9873 265.915 35.7417 cv
264.377 35.373 262.596 35.1274 260.202 35.1274 cv
252.399 35.1274 247.485 39.6118 247.485 46.1851 cv
247.485 50.3628 248.959 54.1714 255.471 59.5161 cv
258.235 61.7896 li
263.518 66.1509 265.299 68.6079 265.299 72.8467 cv
265.299 76.7783 262.413 81.0176 256.514 81.0176 cv
252.399 81.0176 248.344 79.2969 247.422 74.752 cv
247.239 73.8906 247.239 73.0313 247.239 72.4785 cv
247.239 71.9863 247.176 71.8027 246.809 71.8027 cv
246.5 71.8027 246.377 72.1104 246.317 72.7852 cv
246.256 73.7686 246.01 76.2246 246.01 79.2969 cv
246.01 80.9561 246.073 81.2021 246.932 81.6318 cv
249.45 82.8604 252.276 83.29 255.165 83.29 cv
cp
287.139 53.8032 mo
287.139 44.2192 287.139 42.499 287.262 40.5332 cv
287.385 38.3833 287.877 37.3389 289.535 37.0322 cv
290.271 36.9087 290.641 36.8477 291.07 36.8477 cv
291.316 36.8477 291.563 36.7246 291.563 36.4795 cv
291.563 36.1099 291.254 35.9873 290.578 35.9873 cv
288.736 35.9873 284.867 36.1719 284.559 36.1719 cv
284.252 36.1719 280.381 35.9873 278.355 35.9873 cv
277.68 35.9873 277.371 36.1099 277.371 36.4795 cv
277.371 36.7246 277.617 36.8477 277.863 36.8477 cv
278.293 36.8477 279.092 36.9087 279.768 37.0933 cv
281.119 37.4009 281.732 38.4448 281.855 40.5332 cv
281.979 42.499 281.979 44.2192 281.979 53.8032 cv
281.979 64.6147 li
281.979 70.5127 281.979 75.3652 281.672 77.9453 cv
281.426 79.7275 281.119 81.0791 279.889 81.3242 cv
279.338 81.4473 278.6 81.5693 278.047 81.5693 cv
277.68 81.5693 277.557 81.7549 277.557 81.9385 cv
277.557 82.3076 277.863 82.4307 278.539 82.4307 cv
280.381 82.4307 284.252 82.2451 284.559 82.2451 cv
284.867 82.2451 288.736 82.4307 292.115 82.4307 cv
292.791 82.4307 293.098 82.2451 293.098 81.9385 cv
293.098 81.7549 292.975 81.5693 292.605 81.5693 cv
292.053 81.5693 290.703 81.4473 289.842 81.3242 cv
287.998 81.0791 287.631 79.7275 287.445 77.9453 cv
287.139 75.3652 287.139 70.5127 287.139 64.6147 cv
287.139 53.8032 li
cp
318.855 38.6284 mo
326.58 38.7524 li
332.467 38.875 333.939 40.2876 334.123 42.1309 cv
334.184 42.8066 li
334.248 43.666 334.373 43.8506 334.688 43.8506 cv
334.938 43.8506 335.127 43.6055 335.127 43.0522 cv
335.127 42.3765 335.314 38.1377 335.314 36.2944 cv
335.314 35.9263 335.314 35.5576 335 35.5576 cv
334.75 35.5576 334.184 35.7417 333.264 35.8643 cv
332.283 36.0488 330.873 36.1719 328.91 36.1719 cv
305.891 36.1719 li
305.154 36.1719 302.82 36.0488 301.039 35.8643 cv
299.381 35.7417 298.766 35.1274 298.336 35.1274 cv
298.09 35.1274 297.844 35.9263 297.721 36.2944 cv
297.598 36.7856 296.369 42.0688 296.369 42.6836 cv
296.369 43.0522 296.492 43.2368 296.676 43.2368 cv
296.922 43.2368 297.107 43.1143 297.291 42.6221 cv
297.477 42.1924 297.66 41.7622 298.336 40.7183 cv
299.318 39.2437 300.793 38.8135 304.602 38.7524 cv
313.693 38.6284 li
313.693 64.6147 li
313.693 70.5127 313.693 75.3652 313.387 77.9453 cv
313.141 79.7275 312.834 81.0791 311.605 81.3242 cv
311.053 81.4473 310.314 81.5693 309.762 81.5693 cv
309.393 81.5693 309.271 81.7549 309.271 81.9385 cv
309.271 82.3076 309.578 82.4307 310.254 82.4307 cv
312.098 82.4307 315.967 82.2451 316.273 82.2451 cv
316.58 82.2451 320.447 82.4307 323.82 82.4307 cv
324.496 82.4307 324.801 82.2451 324.801 81.9385 cv
324.801 81.7549 324.68 81.5693 324.313 81.5693 cv
323.76 81.5693 322.41 81.4473 321.553 81.3242 cv
319.713 81.0791 319.344 79.7275 319.16 77.9453 cv
318.855 75.3652 318.855 70.5127 318.855 64.6147 cv
318.855 38.6284 li
cp
394.563 38.6284 mo
402.289 38.7524 li
408.176 38.875 409.646 40.2876 409.83 42.1309 cv
409.893 42.8066 li
409.955 43.666 410.08 43.8506 410.396 43.8506 cv
410.646 43.8506 410.834 43.6055 410.834 43.0522 cv
410.834 42.3765 411.023 38.1377 411.023 36.2944 cv
411.023 35.9263 411.023 35.5576 410.709 35.5576 cv
410.459 35.5576 409.893 35.7417 408.973 35.8643 cv
407.992 36.0488 406.58 36.1719 404.619 36.1719 cv
381.6 36.1719 li
380.863 36.1719 378.529 36.0488 376.748 35.8643 cv
375.09 35.7417 374.473 35.1274 374.045 35.1274 cv
373.797 35.1274 373.553 35.9263 373.43 36.2944 cv
373.307 36.7856 372.078 42.0688 372.078 42.6836 cv
372.078 43.0522 372.201 43.2368 372.385 43.2368 cv
372.631 43.2368 372.814 43.1143 373 42.6221 cv
373.184 42.1924 373.369 41.7622 374.045 40.7183 cv
375.027 39.2437 376.502 38.8135 380.311 38.7524 cv
389.402 38.6284 li
389.402 64.6147 li
389.402 70.5127 389.402 75.3652 389.096 77.9453 cv
388.85 79.7275 388.543 81.0791 387.313 81.3242 cv
386.762 81.4473 386.023 81.5693 385.471 81.5693 cv
385.102 81.5693 384.979 81.7549 384.979 81.9385 cv
384.979 82.3076 385.287 82.4307 385.963 82.4307 cv
387.805 82.4307 391.676 82.2451 391.982 82.2451 cv
392.289 82.2451 396.156 82.4307 399.529 82.4307 cv
400.205 82.4307 400.51 82.2451 400.51 81.9385 cv
400.51 81.7549 400.389 81.5693 400.021 81.5693 cv
399.469 81.5693 398.119 81.4473 397.26 81.3242 cv
395.42 81.0791 395.053 79.7275 394.869 77.9453 cv
394.563 75.3652 394.563 70.5127 394.563 64.6147 cv
394.563 38.6284 li
cp
217.817 37.979 mo
219.711 37.957 223.877 37.6426 227.217 41.0444 cv
230.557 44.4463 230.745 48.667 230.745 50.7461 cv
230.745 56.5415 225.985 60.8809 219.874 60.8809 cv
217.35 60.8809 214.563 60.4517 213.643 59.8989 cv
213.334 59.7144 213.211 59.4688 213.211 59.1616 cv
213.211 39.084 li
213.211 38.7158 213.397 38.4707 213.704 38.3477 cv
214.319 38.1631 215.975 38 217.817 37.979 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.255009 .96463 .70602 .17734 cmyk
ef
508.499 131.823 mo
509.682 131.558 510.351 131.251 511.323 130.528 cv
512.721 129.491 513.392 128.569 513.951 126.923 cv
514.148 128.88 513.828 130.749 512.065 131.704 cv
510.842 132.366 509.754 132.216 508.499 131.823 cv
cp
504.065 117.827 mo
506.96 114.999 507.799 111.604 506.555 107.753 cv
505.789 105.386 504.787 104.048 502.732 102.647 cv
503.322 101.999 503.68 101.651 504.342 101.077 cv
504.899 100.593 505.229 100.333 505.832 99.9072 cv
506.555 101.851 li
507.48 104.335 508.891 105.866 508.957 108.212 cv
509.076 112.409 506.463 115.94 504.065 117.827 cv
cp
546.779 62.2983 mo
542.266 69.9751 536.35 73.7256 533.441 73.6729 cv
533.975 72.8506 534.15 71.7212 534.1 71.0581 cv
531.494 71.1069 529.742 69.8325 528.432 67.6001 cv
527.377 65.8022 527.682 62.3081 527.682 62.3081 cv
525.307 61.9751 523.938 64.4126 523.938 66.6626 cv
523.938 89.0811 li
523.938 90.7686 524.121 91.8916 524.73 93.0771 cv
527.166 97.8311 532.604 100.743 537.148 100.144 cv
535.145 102.349 533.123 103.882 529.895 104.228 cv
528.063 104.423 526.938 104.286 525.205 103.661 cv
527.438 105.687 529.67 106.728 532.709 106.181 cv
535.814 105.624 537.584 102.878 539.188 102.433 cv
540.164 102.161 541.014 102.317 542.146 102.536 cv
540.736 102.692 539.719 103.466 539.02 104.394 cv
538.439 105.161 538.293 106.517 538.252 107.333 cv
539.271 107.577 540.395 107.638 541.623 107.165 cv
542.545 106.812 543.051 106.464 543.711 105.728 cv
545.105 106.642 546.021 108.995 546.021 108.995 cv
544.672 108.427 543.242 108.376 541.979 108.806 cv
538.125 110.118 536.563 112.603 529.225 111.312 cv
526.006 110.745 524.98 108.456 522.377 108.06 cv
523.25 108.583 523.768 109.327 524.143 110.411 cv
524.418 111.208 524.475 111.724 524.373 112.562 cv
528.563 111.536 531.145 113.937 533.938 114.118 cv
537.66 114.36 538.121 111.118 544.041 111.185 cv
545.891 111.206 548.5 112.499 549.309 114.536 cv
547.334 113.603 544.414 113.874 542.852 114.308 cv
540.428 114.978 538.98 115.786 537.268 117.665 cv
539.018 118.354 540.139 118.55 542.021 118.495 cv
543.611 118.448 544.537 118.261 546.021 117.687 cv
543.934 119.683 541.924 120.79 538.652 121.905 cv
536.461 122.651 535.016 122.394 532.771 121.915 cv
533.434 121.56 533.791 120.911 533.791 120.911 cv
530.463 120.335 530.168 118.335 527.477 117.786 cv
526.762 117.642 526.35 117.587 525.623 117.54 cv
528.332 122.62 534.496 125.54 539.396 124.394 cv
541.75 123.845 544.846 122.86 547.229 120.394 cv
546.516 123.892 545.205 125.728 542.334 126.999 cv
538.496 128.698 535.521 128.995 531.584 127.515 cv
533.33 129.058 535.334 129.702 538 130.181 cv
539.75 130.495 540.789 130.534 542.559 130.349 cv
538 133.12 530.537 131.64 525.623 127.989 cv
522.123 125.39 520.186 122.788 518.684 118.517 cv
519.229 123.165 520.252 128.22 524.896 131.144 cv
527.086 132.522 529.184 133.435 531.207 133.183 cv
529.518 134.349 527.082 134.646 525.119 134.646 cv
521.205 134.646 517.561 130.978 515.871 126.663 cv
516.227 131.493 514.321 134.646 510.945 134.646 cv
509.041 134.646 508.059 133.812 506.23 133.79 cv
505.084 133.778 504.264 134.028 503.104 134.495 cv
503.643 133.302 503.873 132.509 504.834 131.62 cv
506.81 129.79 510.6 129.776 511.996 126.683 cv
512.894 124.698 512.75 123.333 512.479 121.12 cv
511.061 125.099 508.479 126.935 504.08 128.952 cv
501.677 130.056 500.457 132.415 499.912 134.433 cv
499.702 131.731 499.849 129.927 501.267 127.62 cv
502.956 124.868 507.02 124.081 508.688 121.245 cv
509.982 119.046 510.274 117.446 510.272 114.894 cv
509.393 117.896 508.08 120.06 506.517 121.142 cv
503.157 123.466 499.584 124.437 497.938 127.312 cv
496.602 129.644 496.525 131.452 496.98 134.077 cv
495.181 132.38 494.541 130.526 494.914 128.081 cv
495.234 125.981 496.059 124.669 497.812 123.474 cv
495.324 123.726 493.592 125.132 492.834 127.515 cv
492.221 129.444 492.458 130.989 493.623 132.646 cv
489.393 131.536 489.699 125.657 492.373 122.769 cv
496.96 117.812 505.086 118.181 501.686 109.12 cv
501.287 112.521 500.703 114.513 498.146 116.312 cv
494.084 119.165 487.814 118.872 486.684 125.624 cv
486.355 120.437 487.947 118.753 490.956 115.913 cv
492.813 114.161 496.332 113.308 496.102 108.29 cv
494.936 111.04 493.287 112.144 490.998 113.142 cv
488.35 114.296 486.727 113.769 484.541 116.54 cv
484.436 114.517 485.129 112.628 487.04 111.493 cv
488.793 110.454 490.663 110.683 491.996 108.687 cv
491.996 108.687 490.482 108.101 488.289 108.952 cv
490.377 106.327 491.912 106.999 493.979 105.999 cv
495.249 105.386 495.766 104.849 496.688 103.892 cv
494.873 103.683 493.164 103.657 491.313 104.101 cv
489.127 104.624 486.789 106.474 486.789 106.474 cv
488.123 102.731 493.359 99.5752 498.517 98.1182 cv
505.512 96.1436 508.347 95.4326 509.653 93.0127 cv
510.549 91.3545 510.709 90.8096 510.709 86.9795 cv
510.709 64.8208 li
510.709 62.2905 506.693 63.0708 505.512 64.2515 cv
504.443 65.3208 504.095 66.6138 504.924 68.3247 cv
499.891 68.3911 498.545 64.4282 498.545 64.4282 cv
498.512 64.8677 498.504 65.3228 498.508 65.7993 cv
496.723 64.9302 495.775 64.0669 494.744 62.3696 cv
494.094 61.2974 493.825 60.5981 493.592 59.3657 cv
492.025 60.6079 487.871 61.0063 487.2 60.5161 cv
485.5 59.2739 484.513 56.1021 484.075 52.9331 cv
483.672 50.0054 483.848 48.186 484.809 45.3911 cv
482.417 41.1167 481.891 36.1909 481.891 31.1831 cv
481.891 26.9995 484.441 21.6665 487.934 18.2666 cv
489.352 11.2729 496.9 7.08643 502.417 7.08643 cv
507.658 7.08643 511.981 10.0923 514.548 15.6914 cv
516.934 10.1782 522.619 7.08643 528.434 7.08643 cv
533.869 7.08643 537.643 9.14551 540.752 13.6045 cv
543.295 14.1377 544.893 14.7495 546.689 16.6265 cv
549.072 19.1157 550.779 21.4268 550.887 25.6045 cv
550.916 26.7578 550.387 27.3701 549.766 28.3423 cv
551.84 31.2827 552.756 33.4731 552.756 37.0718 cv
552.756 40.752 552.422 42.6499 550.779 45.6763 cv
550.957 46.0259 551.037 46.2378 551.135 46.6177 cv
551.275 47.1646 551.309 47.4946 551.277 48.0581 cv
550.096 48.4487 548.793 48.3687 548.469 49.5688 cv
548.184 50.6177 550.406 55.7739 546.779 62.2983 cv
cp
524.736 61.8208 mo
524.979 59.645 525.951 57.6021 527.32 56.0415 cv
528.035 56.2368 528.578 56.52 529.281 57.0337 cv
529.795 57.4087 530.121 57.7036 530.455 58.1235 cv
528.131 58.5308 525.82 59.979 524.736 61.8208 cv
cp
538.248 58.8462 mo
538.596 61.5522 538.055 64.6665 536.736 66.8677 cv
537.035 65.0161 536.932 62.8696 536.262 61.1587 cv
537.016 60.7798 537.475 60.3208 537.926 59.521 cv
538.064 59.2759 538.17 59.0601 538.248 58.8462 cv
cp
533.703 53.1421 mo
533.957 53.1714 534.211 53.2183 534.463 53.2837 cv
535.986 53.6802 537.041 54.8872 537.664 56.479 cv
536.744 56.9038 536.15 57.3452 535.367 58.1519 cv
535.086 58.4409 534.896 58.6577 534.703 58.9185 cv
534.313 58.6079 533.863 58.3696 533.354 58.2231 cv
533.063 58.1411 532.764 58.0825 532.459 58.0474 cv
532.502 56.811 532.652 56.0132 533.059 54.7603 cv
533.271 54.1011 533.445 53.6567 533.703 53.1421 cv
cp
529.752 54.0347 mo
530.789 53.4478 531.908 53.1118 533.033 53.106 cv
532.691 53.4927 532.441 53.8989 532.162 54.4741 cv
531.969 54.8774 531.879 55.1167 531.76 55.5474 cv
531.441 55.0483 531.186 54.7915 530.688 54.4741 cv
530.352 54.2612 530.061 54.1196 529.752 54.0347 cv
cp
497.582 42.9902 mo
497.905 42.7568 498.232 42.5391 498.566 42.3394 cv
498.788 42.6519 498.924 42.8857 499.11 43.27 cv
499.519 44.1079 499.704 44.7075 499.781 45.5239 cv
498.966 45.8853 498.236 46.3755 497.588 46.9614 cv
497.384 46.5054 497.293 46.1431 497.227 45.5806 cv
497.104 44.5571 497.196 43.8271 497.582 42.9902 cv
cp
499.036 42.0723 mo
500.684 41.188 502.491 40.7583 504.646 41.0718 cv
504.822 41.0986 li
504.369 41.874 503.988 42.3994 503.335 43.1738 cv
502.85 43.7495 502.554 44.0591 502.002 44.5708 cv
501.417 44.0396 501.081 43.7461 500.477 43.2378 cv
499.912 42.7642 499.546 42.4673 499.036 42.0723 cv
cp
506.1 41.3843 mo
507.682 41.8389 509.143 42.6479 510.406 43.7866 cv
510.24 44.5278 510.088 45.2993 510.002 45.9692 cv
509.866 47.0181 509.807 47.7417 509.799 48.6196 cv
508.359 46.8794 506.711 45.5835 504.787 45.0776 cv
506.1 41.3843 li
cp
511.287 44.6704 mo
512.859 46.4243 514.035 48.7681 514.623 51.6411 cv
514.135 51.2114 513.65 50.9595 512.925 50.7251 cv
512.25 50.5063 511.744 50.4263 511.15 50.4663 cv
510.695 49.7964 li
510.923 49.1089 511.049 48.5298 511.175 47.6733 cv
511.348 46.4927 511.383 45.7114 511.287 44.6704 cv
cp
514.713 52.1079 mo
515.031 53.8931 515.127 55.8716 514.957 58.0308 cv
514.152 56.0942 513.264 54.1147 512.253 52.2983 cv
514.713 52.1079 li
cp
496.486 48.1431 mo
496.324 48.3481 496.168 48.5591 496.02 48.7759 cv
494.516 46.9165 li
493.021 46.2759 li
493.239 45.7251 493.74 44.729 494.074 44.3501 cv
493.459 44.0806 492.697 42.4766 492.412 41.6479 cv
493.209 41.7773 493.679 41.792 494.482 41.7119 cv
495.021 41.6587 495.326 41.6016 495.848 41.4556 cv
494.418 36.4106 li
495.705 36.7959 496.418 37.1211 497.553 37.8403 cv
498.497 38.439 499.34 38.6147 499.784 39.6411 cv
499.9 39.9111 499.961 40.1035 499.998 40.3496 cv
498.35 41.1069 497.019 42.3262 496.326 43.9868 cv
496.229 44.7046 496.205 45.1167 496.219 45.8403 cv
496.237 46.7544 496.299 47.3091 496.486 48.1431 cv
cp
494.896 50.7925 mo
493.77 53.2876 493.322 56.1431 493.446 58.4761 cv
491.907 57.6704 490.674 56.6655 489.756 55.4731 cv
490.184 55.356 490.536 55.2388 491.043 55.0532 cv
491.76 54.7915 492.156 54.6226 492.842 54.2856 cv
492.737 53.2271 492.551 52.6118 492.047 51.6743 cv
491.719 51.0649 491.249 50.8823 491.015 50.231 cv
490.862 49.8071 490.817 49.5415 490.822 49.0903 cv
491.423 48.9985 491.795 49.0239 492.375 49.1997 cv
492.881 49.3521 493.123 49.5542 493.572 49.8306 cv
494.125 50.1694 494.454 50.4067 494.896 50.7925 cv
cp
489.117 54.5308 mo
488.285 53.1226 487.833 51.4946 487.771 49.6665 cv
488.604 50.1577 489.119 50.6079 489.81 51.4165 cv
490.465 52.1841 490.777 52.688 491.175 53.6157 cv
490.862 53.8413 490.672 53.9526 490.322 54.1157 cv
489.876 54.3228 489.502 54.4556 489.117 54.5308 cv
cp
487.813 48.0142 mo
487.91 46.8325 488.143 45.9966 488.682 44.7876 cv
488.682 43.4858 488.996 42.084 489.484 40.7441 cv
491.529 44.2251 li
490.662 46.2114 li
489.956 46.5962 489.566 46.8306 488.893 47.27 cv
488.455 47.5552 488.172 47.7505 487.813 48.0142 cv
cp
489.76 40.0391 mo
490.587 38.0518 491.758 36.2715 492.788 35.2578 cv
492.936 36.0425 493.057 36.6201 493.296 37.5195 cv
493.583 38.5952 493.789 39.1943 494.227 40.2183 cv
493.566 40.0908 493.18 40.062 492.508 40.0903 cv
491.907 40.1152 491.582 40.3511 490.982 40.3145 cv
490.486 40.2847 490.145 40.2114 489.76 40.0391 cv
cp
494.238 34.0435 mo
495.889 32.8677 497.857 32.0737 499.928 31.7329 cv
499.713 33.1167 499.58 34.0186 499.367 35.5127 cv
499.11 37.3594 li
498.162 37.2632 li
497.615 36.9146 497.314 36.7051 496.797 36.3145 cv
495.715 35.499 495.08 34.9404 494.238 34.0435 cv
cp
501.523 31.562 mo
503.119 31.4824 504.742 31.6729 506.299 32.1646 cv
505.998 31.7661 505.617 31.3667 505.177 31.0054 cv
505.199 29.4556 li
505.327 28.9263 505.391 28.6255 505.488 28.0903 cv
505.572 27.6353 505.62 27.3379 505.673 26.9429 cv
505.873 26.9736 li
506.355 27.0498 506.822 27.1421 507.271 27.25 cv
507.587 27.9678 508.154 29.2095 508.477 29.584 cv
508.738 29.8901 508.895 30.0566 509.182 30.3398 cv
509.182 30.3398 508.521 31.521 508.41 32.0532 cv
508.183 33.145 508.301 34.1724 508.732 34.9814 cv
506.632 33.4854 li
506.449 34.0801 506.26 34.6753 506.322 34.9814 cv
506.569 36.1831 506.689 36.8921 506.598 38.1152 cv
506.553 38.7046 506.496 39.0947 506.376 39.5845 cv
504.311 39.2515 502.197 39.4556 500.408 40.1733 cv
500.313 39.5249 500.318 39.0415 500.412 38.3076 cv
500.521 37.4541 500.899 37.0386 501.021 36.1865 cv
501.112 35.5474 500.986 35.1699 501.086 34.5322 cv
501.158 34.0654 501.342 32.4917 501.523 31.562 cv
cp
504.051 30.2461 mo
503.566 29.9849 503.047 29.7842 502.512 29.6758 cv
502.119 29.5957 501.736 29.5356 501.363 29.4932 cv
501.455 29.0688 501.478 28.6855 501.457 28.1543 cv
501.438 27.6592 501.391 27.3071 501.28 26.917 cv
501.883 26.832 502.501 26.7842 503.129 26.7749 cv
504.219 27.8657 li
504.396 28.564 504.396 29.0137 504.219 29.7119 cv
504.167 29.9204 504.115 30.0884 504.051 30.2461 cv
cp
500.264 29.418 mo
497.668 29.3589 495.573 30.1753 493.73 31.2222 cv
495.154 29.1396 497.443 27.7476 500.113 27.1328 cv
500.26 27.5029 500.32 27.8179 500.348 28.2827 cv
500.375 28.7329 500.355 29.0532 500.264 29.418 cv
cp
510.869 28.6367 mo
512.893 29.7964 514.407 31.4927 515.43 33.7842 cv
515.313 34.1147 515.127 34.4219 514.854 34.7568 cv
514.661 34.9941 514.533 35.1172 514.291 35.3022 cv
512.219 33.4878 li
512.334 32.8335 512.219 32.3618 511.816 31.8335 cv
511.5 31.4175 511.212 31.2212 510.709 31.0776 cv
510.647 30.498 510.647 30.1631 510.709 29.584 cv
510.75 29.2061 510.794 28.9307 510.869 28.6367 cv
cp
517.018 41.8574 mo
517.03 42.2563 517.037 42.6641 517.037 43.0801 cv
517.037 45.1089 517.078 46.8755 517.123 48.5933 cv
515.004 47.8081 li
514.748 47.0981 514.48 46.4487 514.201 45.8569 cv
514.293 45.3013 514.399 44.8784 514.598 44.2505 cv
514.893 43.314 515.115 42.7954 515.592 41.9365 cv
517.018 41.8574 li
cp
517.162 50.0825 mo
517.223 52.4058 517.27 54.7563 517.215 57.6763 cv
516.795 54.6147 516.283 52.0806 515.693 49.978 cv
517.162 50.0825 li
cp
513.35 44.2681 mo
512.457 42.8125 511.479 41.8115 510.437 41.1079 cv
511.227 40.2754 511.747 39.7886 512.668 39.0137 cv
513.383 38.4121 513.802 38.0898 514.565 37.5518 cv
514.428 38.9312 514.317 39.7075 514.066 41.0708 cv
513.83 42.3452 513.658 43.1201 513.35 44.2681 cv
cp
509.742 40.6865 mo
509.193 40.3887 508.631 40.1602 508.055 39.9795 cv
507.861 39.3203 507.762 38.8262 507.656 38.0513 cv
507.549 37.2671 507.521 36.8174 507.527 36.0259 cv
507.98 36.2515 508.228 36.4019 508.637 36.6997 cv
508.945 36.9253 509.113 37.0645 509.393 37.3271 cv
510.027 37.0532 510.453 36.9829 511.143 37.0386 cv
511.68 37.082 511.992 37.168 512.477 37.4067 cv
511.705 38.0034 511.306 38.4028 510.709 39.1738 cv
510.273 39.7358 510.031 40.1104 509.742 40.6865 cv
cp
488.752 36.1289 mo
488.789 32.0195 489.615 29.2529 491.825 26.1392 cv
492.443 26.3398 li
492.564 26.9722 492.689 27.3281 492.989 27.8979 cv
493.264 28.418 493.475 28.7173 493.854 29.1128 cv
491.586 31.0801 489.842 33.5923 488.752 36.1289 cv
cp
492.676 25.0078 mo
493.722 23.687 494.797 22.5537 495.936 21.6079 cv
496.121 22.1987 496.259 22.7026 496.365 23.2065 cv
498.354 25.1348 li
498.979 26.085 li
497.434 26.6294 496.012 27.4263 494.735 28.397 cv
494.365 27.8384 493.748 26.9204 493.673 26.583 cv
493.6 26.249 493.131 25.4165 492.695 25.0171 cv
492.676 25.0078 li
cp
497.324 20.5684 mo
499.703 18.9819 502.375 18.1563 505.553 18.1563 cv
506.638 18.1563 507.639 18.2739 508.556 18.4902 cv
508.572 19.1099 li
508.416 20.1309 508.244 20.708 507.816 21.6479 cv
507.507 22.3271 507.291 22.6973 506.854 23.3022 cv
506.491 22.9902 503.006 20.3857 502.533 20.3789 cv
502.204 21.3667 500.836 24.8047 500.174 25.7212 cv
499.924 25.7876 li
499.666 24.8276 499.348 24.2515 498.662 23.481 cv
498.094 22.8433 497.688 22.5313 496.925 22.1475 cv
497.182 21.3916 li
497.324 20.5684 li
cp
510.594 19.187 mo
512.625 20.1221 514.119 21.6162 515.117 23.3501 cv
514.996 23.5371 514.868 23.7119 514.693 23.936 cv
514.442 24.2583 514.289 24.4331 514.002 24.7241 cv
513.68 24.5112 513.512 24.3608 513.264 24.064 cv
512.688 23.3735 511.605 20.9507 511.175 20.2563 cv
510.924 19.8521 510.746 19.5293 510.594 19.187 cv
cp
515.839 24.8525 mo
516.744 27.1567 516.893 29.6953 516.361 31.8447 cv
513.962 28.4751 511.225 26.5142 507.671 25.7104 cv
509.117 20.4106 li
510.32 21.3501 510.928 22.0181 511.752 23.3022 cv
512.303 24.1606 513.22 26.1182 513.904 27.8354 cv
514.021 27.4624 514.187 27.0933 514.418 26.6606 cv
514.849 25.8589 515.217 25.3809 515.839 24.8525 cv
cp
506.166 25.4453 mo
505.449 25.3521 504.7 25.2993 503.916 25.2847 cv
502.947 25.2671 502.01 25.3481 501.105 25.5156 cv
502.584 22.9688 li
503.354 21.9878 li
504.061 22.5527 504.43 22.9219 504.994 23.6284 cv
505.529 24.2983 505.834 24.7617 506.166 25.4453 cv
cp
511.49 58.3345 mo
511.001 57.7739 510.428 57.312 509.807 56.939 cv
509.39 55.519 508.759 53.9185 508.531 53.4751 cv
508.174 52.7739 507.78 52.3921 507.282 51.9321 cv
506.656 52.2661 506.238 52.4751 505.698 53.0161 cv
505.338 53.3755 504.457 54.1138 504.219 54.5649 cv
503.933 54.0063 503.743 53.7017 503.367 53.1987 cv
502.603 52.1763 502.053 51.6558 500.989 50.9497 cv
500.668 51.2388 500.521 51.479 500.412 51.8979 cv
500.33 52.2124 500.322 52.4106 500.38 52.731 cv
499.588 52.6704 499.129 52.5415 498.418 52.186 cv
497.749 51.8501 497.32 51.5415 496.898 51.0591 cv
497.262 50.605 497.68 50.1978 498.156 49.854 cv
505.534 44.52 511.668 51.561 511.49 58.3345 cv
cp
502.855 56.0513 mo
502.724 56.0962 502.598 56.147 502.477 56.1997 cv
501.338 56.7075 500.385 57.3862 499.627 58.1919 cv
495.189 58.7583 li
494.887 56.8413 495.063 54.7319 495.807 52.937 cv
497.377 53.0981 498.355 53.3804 499.848 54.0825 cv
501.131 54.687 501.872 55.1665 502.855 56.0513 cv
cp
498.525 59.6831 mo
497.876 60.8286 497.533 62.1255 497.518 63.4897 cv
496.617 62.7349 495.941 61.5737 495.526 60.2271 cv
498.525 59.6831 li
cp
486.299 38.7603 mo
485.494 37.269 484.891 35.8154 484.539 34.3765 cv
484.869 34.2407 485.16 34.1621 485.585 34.083 cv
486.184 33.9722 486.607 33.9434 487.115 33.9971 cv
486.771 35.4253 486.525 36.9575 486.299 38.7603 cv
cp
484.318 33.2778 mo
483.932 30.7817 484.342 28.312 485.802 25.7466 cv
485.928 25.5249 486.063 25.3037 486.207 25.084 cv
486.422 25.6187 486.65 26.0078 487.047 26.5488 cv
487.406 27.04 488.598 27.751 489.32 28.2432 cv
488.539 29.7217 487.973 31.0713 487.538 32.4648 cv
484.318 33.2778 li
cp
487.107 23.8491 mo
488.227 22.4614 489.631 21.1675 491.104 20.0884 cv
491.148 20.3228 491.211 20.5576 491.303 20.8462 cv
491.445 21.2925 492.072 22.4336 492.468 23.1318 cv
491.68 24.2461 490.966 25.3848 490.266 26.5645 cv
489.664 25.9878 489.249 25.5986 488.572 24.9746 cv
488.326 24.748 487.534 24.1846 487.107 23.8491 cv
cp
492.961 18.8628 mo
494.825 17.7656 496.659 17.0786 498.051 17.0361 cv
496.322 18.5024 494.938 19.9551 493.745 21.437 cv
493.715 21.0815 493.669 20.7769 493.585 20.3467 cv
493.529 20.0659 493.221 19.418 492.961 18.8628 cv
cp
523.135 61.3208 mo
522.633 60.3784 522.152 59.7866 522.264 58.7251 cv
522.33 58.0854 522.463 57.3579 522.666 56.5825 cv
522.844 56.7603 523.016 56.8931 523.273 57.0591 cv
523.686 57.3267 524 57.4731 524.404 57.5718 cv
523.764 58.9731 523.418 60.3696 523.135 61.3208 cv
cp
522.9 55.7563 mo
523.355 54.2876 524.039 52.6997 524.967 51.2222 cv
526.814 48.2729 529.076 45.8423 532.098 44.7329 cv
532.363 45.7759 533.342 48.353 533.342 48.353 cv
533.301 48.8159 533.268 50.2271 533.283 51.0669 cv
530.305 50.8657 528.158 52.6558 526.014 55.0444 cv
525.646 55.4556 525.326 55.8979 525.047 56.354 cv
524.482 56.4448 524.01 56.3599 523.428 56.0806 cv
523.207 55.9731 523.068 55.8911 522.9 55.7563 cv
cp
533.375 44.354 mo
534.301 44.144 535.295 44.0513 536.361 44.0942 cv
538.266 44.1704 540.293 45.0269 541.896 46.2935 cv
541.984 46.8501 542.092 47.2505 541.859 48.021 cv
541.588 48.9116 541.43 49.5728 540.9 50.5034 cv
540.523 49.2808 539.938 47.4077 539.639 47.394 cv
539.197 47.3735 536.969 48.1978 536.129 48.3345 cv
536.197 48.7368 536.279 49.1548 536.385 49.6567 cv
536.881 49.5054 538.508 48.979 539.051 48.7935 cv
539.33 49.5464 540.076 51.9595 540.119 52.9116 cv
540.699 52.6001 540.723 52.5845 541.379 52.5376 cv
541.758 52.5103 542.447 52.5825 542.822 52.6489 cv
542.6 53.1362 542.549 53.729 542.307 54.2085 cv
541.875 55.064 541.492 55.5474 540.762 56.1685 cv
540.514 56.3794 540.332 56.5044 540.08 56.6245 cv
539.988 56.2358 li
539.217 53.2505 537.262 51.8433 534.463 51.2417 cv
534.563 49.8853 534.521 49.0483 534.293 47.6597 cv
534.076 46.3237 533.857 45.522 533.375 44.354 cv
cp
546.486 55.9302 mo
546.453 56.3716 546.393 56.8228 546.299 57.2847 cv
545.852 59.5054 544.658 61.7993 543.205 63.8901 cv
543.018 62.9985 542.645 61.5845 541.932 60.2798 cv
541.465 59.4233 540.855 59.0015 540.357 58.7251 cv
540.336 58.3052 540.297 57.896 540.238 57.4985 cv
541.313 56.6548 542.17 56.2759 543.584 55.9917 cv
544.705 55.7661 545.434 55.7466 546.486 55.9302 cv
cp
541.705 65.8745 mo
540.09 67.8569 538.367 69.5278 537.072 70.5825 cv
538.6 68.2622 539.246 66.7349 539.846 64.022 cv
540.111 62.8228 540.277 61.6782 540.346 60.5972 cv
540.951 61.0542 541.297 61.5669 541.563 62.3706 cv
541.834 63.1841 541.588 63.7114 541.629 64.5669 cv
541.654 65.0825 541.676 65.4692 541.705 65.8745 cv
cp
518.85 54.3696 mo
518.674 52.8687 518.52 51.4302 518.408 50.0142 cv
520.355 49.811 li
519.746 51.6997 519.268 53.3345 518.85 54.3696 cv
cp
518.363 49.3843 mo
518.266 47.9536 518.215 46.5405 518.236 45.105 cv
518.926 45.3325 519.34 45.5854 519.898 46.105 cv
520.293 46.4731 520.492 46.7212 520.762 47.1899 cv
520.484 47.6411 520.293 47.8813 519.92 48.2573 cv
519.385 48.7964 518.984 49.0913 518.363 49.3843 cv
cp
518.477 41.2021 mo
518.518 40.8247 518.566 40.4434 518.619 40.0581 cv
519.039 37.0024 522.139 31.9326 525.402 29.4473 cv
525.861 29.54 526.234 29.6553 526.764 29.8564 cv
527.557 30.1577 527.992 30.3833 528.695 30.8574 cv
528.729 30.1572 528.725 29.7588 528.672 29.0591 cv
528.629 28.4614 528.584 28.0708 528.49 27.5645 cv
529.338 27.1348 530.189 26.7734 531.055 26.4854 cv
531.451 26.6694 531.787 26.875 532.23 27.1899 cv
532.885 27.6553 533.227 27.9727 533.74 28.5894 cv
534.844 25.7178 li
535.25 25.6919 li
535.352 26.9648 535.318 27.7754 535.117 29.1035 cv
534.977 30.0454 534.854 30.5747 534.564 31.4824 cv
530.83 28.7715 li
530.117 32.5229 li
529.164 32.2939 528.619 32.1865 527.65 32.0361 cv
526.658 31.8818 526.094 31.8184 525.094 31.748 cv
525.105 32.4243 525.125 32.8062 525.182 33.48 cv
525.238 34.1489 525.283 34.5259 525.387 35.1899 cv
524.516 35.6924 523.986 35.9268 523.029 36.2354 cv
522.201 36.5024 521.713 36.6108 520.85 36.7222 cv
520.672 37.1206 521.188 37.3247 521.785 37.7236 cv
522.205 38.0034 522.289 38.3696 522.564 38.8135 cv
522.539 39.0659 522.611 39.3296 522.383 39.438 cv
521.541 39.8364 521.139 40.0083 520.342 40.3682 cv
518.477 41.2021 li
cp
535.842 25.6738 mo
537.578 25.6514 539.416 25.9087 541.41 26.4761 cv
541.984 26.6514 li
542.764 27.3447 li
541.904 27.8735 541.445 28.2285 540.717 28.9263 cv
539.967 29.645 539.584 30.104 539.008 30.9683 cv
538.27 29.8818 537.871 29.2554 537.205 28.1245 cv
536.639 27.1655 536.295 26.5518 535.842 25.6738 cv
cp
543.936 27.4595 mo
545.963 28.498 547.486 29.9814 548.672 31.8354 cv
548.465 32.2476 548.227 32.645 547.965 33.0151 cv
547.391 33.8262 546.975 34.2422 546.162 34.8135 cv
546.197 34.082 545.844 33.4243 545.637 32.7222 cv
545.383 31.8618 545.201 31.7495 544.85 30.9238 cv
544.297 29.6226 544.066 28.7656 543.936 27.4595 cv
cp
549.484 33.2695 mo
549.865 34.022 550.205 34.8223 550.512 35.6675 cv
551.824 39.2798 552.076 41.7109 549.838 45.4985 cv
549.467 43.2041 548.813 41.4341 547.688 39.8818 cv
547.705 39.124 547.793 38.418 547.965 37.48 cv
548.201 36.1899 548.908 34.5674 549.484 33.2695 cv
cp
545.164 37.2969 mo
544.646 36.894 li
543.844 36.2905 543.039 35.7915 542.227 35.3921 cv
542.182 34.7661 542.068 34.27 541.83 33.5684 cv
541.58 32.8389 541.385 32.437 540.961 31.7925 cv
540.748 32.5601 540.617 32.9902 540.363 33.7456 cv
540.076 34.5684 li
537.234 33.7803 534.277 34.1138 531.064 35.3643 cv
528.488 36.3662 526.518 37.9702 525.047 39.7803 cv
524.539 39.4834 524.238 39.2412 523.805 38.791 cv
523.238 38.2041 522.967 37.8032 522.631 37.0591 cv
523.5 36.7334 524.02 36.6025 524.938 36.4785 cv
525.629 36.3857 526.025 36.3662 526.721 36.3901 cv
526.668 35.8105 526.645 35.4829 526.609 34.9019 cv
526.572 34.3047 526.557 33.9673 526.537 33.3691 cv
527.389 33.3335 527.877 33.3633 528.717 33.502 cv
529.461 33.625 529.879 33.7339 530.588 33.9893 cv
530.809 33.4976 531.275 30.6753 531.316 30.3042 cv
531.713 30.6245 534.688 33.0337 535.25 33.1919 cv
535.246 32.5928 535.271 32.252 535.361 31.6597 cv
535.525 30.5942 535.707 29.9912 536.164 29.0151 cv
536.6 29.4746 536.826 29.7568 537.182 30.2817 cv
537.613 30.9175 538.279 32.5376 538.338 32.8823 cv
538.963 32.229 539.311 31.8564 539.92 31.1899 cv
540.516 30.5376 540.85 30.1665 541.43 29.502 cv
542.096 29.9868 543.223 31.4023 543.604 32.1318 cv
544.09 33.0649 545.021 36.7339 545.164 37.2969 cv
cp
524.863 40.0093 mo
524.125 40.9531 523.518 41.9478 523.029 42.938 cv
522.494 44.02 522.02 45.1431 521.596 46.2544 cv
519.207 44.3462 li
519.871 43.1011 li
521.363 42.459 li
520.563 41.2144 li
521.262 40.7686 521.691 40.5581 522.471 40.2793 cv
523.137 40.042 523.529 39.7412 524.23 39.8364 cv
524.488 39.8721 524.66 39.917 524.863 40.0093 cv
cp
538.992 42.4404 mo
536.84 41.8589 534.734 41.9463 532.758 42.5581 cv
532.199 41.8389 530.787 41.1919 530.787 41.1919 cv
530.246 40.9063 528.549 40.2314 527.607 39.9272 cv
529.119 38.4355 530.816 37.3169 532.625 36.6455 cv
533.088 36.873 533.434 37.1191 533.896 37.5244 cv
534.516 38.0693 534.822 38.4487 535.229 39.1675 cv
535.537 38.5103 535.699 38.1333 535.965 37.458 cv
536.203 36.8516 536.352 36.4399 536.521 35.9204 cv
536.953 35.917 537.389 35.9385 537.824 35.9863 cv
538.391 37.1675 539.08 38.8726 539.08 38.8726 cv
540.383 42.9707 li
539.939 42.751 539.477 42.5713 538.992 42.4404 cv
cp
530.648 43.4282 mo
528.32 44.6372 526.23 46.5718 524.529 48.9546 cv
522.834 47.4546 li
523.801 44.9517 525.092 42.7676 526.617 40.9922 cv
530.648 43.4282 li
cp
524.125 49.5415 mo
522.77 51.5688 521.689 53.8892 520.967 56.3423 cv
521.129 53.5444 521.639 50.9302 522.432 48.5688 cv
524.125 49.5415 li
cp
539.271 36.2373 mo
539.705 36.3408 540.139 36.4702 540.574 36.6265 cv
542.635 37.3657 544.346 38.7744 545.533 40.5063 cv
545.305 40.8857 545.068 41.1851 544.701 41.583 cv
543.785 42.582 543.01 43.1563 541.771 43.8286 cv
541.576 43.6846 541.379 43.5474 541.176 43.4185 cv
541.156 42.4678 541.139 41.5552 540.924 40.604 cv
540.518 38.8042 540.109 37.7041 539.271 36.2373 cv
cp
546.377 41.9702 mo
547.59 44.5278 547.748 47.5122 546.406 50.0493 cv
545.668 48.3149 544.313 46.0024 542.398 44.3364 cv
546.377 41.9702 li
cp
485.906 55.3657 mo
487.098 56.2729 487.82 56.731 489.149 57.4233 cv
490.352 58.0503 491.063 58.354 492.348 58.7896 cv
491.108 59.2368 490.34 59.3745 489.021 59.3853 cv
488.399 59.3892 488.046 59.3638 487.432 59.27 cv
487.432 59.27 485.938 57.5513 485.906 55.3657 cv
cp
518.477 32.0938 mo
518.146 30.9497 517.941 29.6787 517.896 28.3813 cv
519.34 28.7715 li
519.314 28.2852 519.295 28.0112 519.25 27.5269 cv
519.172 26.6558 519.107 26.1655 518.963 25.3027 cv
520.059 25.585 520.68 25.7314 521.785 25.9668 cv
522.463 26.1113 522.889 26.1973 523.496 26.3096 cv
521.576 27.7495 519.924 29.666 518.477 32.0938 cv
cp
518.313 24.3447 mo
518.783 22.5342 519.668 20.8848 521.072 19.7026 cv
522.609 18.4072 524.451 17.2793 526.494 16.4468 cv
526.504 17.3433 526.598 17.9541 526.852 18.9019 cv
527.014 19.5049 527.191 19.8184 527.385 20.4121 cv
527.654 21.2451 527.793 21.7207 528.01 22.5698 cv
526.66 22.0913 525.875 21.874 524.475 21.5908 cv
523.52 21.3979 522.975 21.3145 522.006 21.2144 cv
521.955 21.6187 521.955 21.855 522.006 22.2598 cv
522.113 23.104 522.791 23.4297 522.83 24.2793 cv
522.852 24.7607 522.813 25.0469 522.654 25.502 cv
518.313 24.3447 li
cp
527.725 15.9897 mo
530.568 15.0352 533.734 14.6602 536.971 15.1743 cv
536.271 15.4858 535.768 15.8613 535.141 16.501 cv
534.516 17.1387 534.273 17.606 533.852 18.3926 cv
533.508 19.0322 533.344 19.4136 533.115 20.1025 cv
531.76 19.1011 li
530.713 18.3291 530.084 17.9419 529.072 17.126 cv
528.525 16.686 528.178 16.3936 527.725 15.9897 cv
cp
538.15 15.4014 mo
538.994 15.5918 539.838 15.8442 540.682 16.1646 cv
541.832 16.6016 542.912 17.1978 543.885 17.9146 cv
543.051 18.686 542.467 19.1655 541.475 19.9028 cv
541.031 20.2329 540.777 20.4131 540.318 20.7222 cv
539.393 19.5391 538.979 18.7412 538.543 17.3027 cv
538.32 16.5649 538.215 16.0776 538.15 15.4014 cv
cp
544.76 18.6152 mo
547.813 21.2817 549.492 25.1929 548.326 28.8584 cv
546.838 27.272 545.346 26.0322 543.764 25.1055 cv
543.305 24.3193 543.135 23.6665 543.104 22.6733 cv
543.051 20.9624 543.566 19.6885 544.76 18.6152 cv
cp
540.852 23.7832 mo
539.439 23.3145 537.934 23.0439 536.287 22.9517 cv
536.299 22.3813 536.297 22.0078 536.283 21.3916 cv
536.258 20.4102 536.225 19.8564 536.129 18.8794 cv
536.889 19.0522 537.316 19.229 537.977 19.6455 cv
538.838 20.1899 539.25 20.6523 539.826 21.4946 cv
540.383 22.3096 540.639 22.876 540.852 23.7832 cv
cp
533.025 22.9854 mo
531.584 23.0894 530.238 23.311 528.977 23.6548 cv
528.986 23.2212 528.979 22.8457 528.953 22.3125 cv
528.885 20.9629 528.783 20.1978 528.488 18.8794 cv
529.398 19.4219 529.891 19.7769 530.691 20.4702 cv
531.721 21.3608 532.32 21.998 533.025 22.9854 cv
cp
527.605 24.0903 mo
526.275 24.5742 525.047 25.2114 523.91 26.0093 cv
523.463 24.4326 523.258 22.7876 523.619 22.6216 cv
524.537 22.4951 525.121 22.5718 525.977 22.9307 cv
526.705 23.2363 527.143 23.5425 527.605 24.0903 cv
cp
521.402 10.9785 mo
522.404 10.25 523.563 9.78564 524.838 9.52246 cv
525.324 9.88379 525.85 10.5479 526.131 10.8276 cv
526.797 11.4897 527.223 12.041 527.207 12.979 cv
527.201 13.3237 527.154 13.6118 527.055 13.875 cv
526.182 14.2642 li
525.775 13.7085 525.365 13.3491 524.695 12.9277 cv
524.215 12.6255 522.215 11.4546 521.402 10.9785 cv
cp
526.521 9.2915 mo
527.105 9.24707 527.709 9.23486 528.326 9.24902 cv
531.447 9.32324 533.455 10.1416 535.738 12.271 cv
533.709 12.2476 532.088 12.3726 530.512 12.7275 cv
528.283 12.1611 li
526.521 9.2915 li
cp
523.938 13.9067 mo
524.371 14.1914 524.586 14.4746 524.742 14.9658 cv
522.078 16.3384 520.453 17.6685 518.334 20.1289 cv
518.234 18.27 517.912 16.2373 518.842 14.1641 cv
519.264 13.9858 519.676 13.9155 520.23 13.9067 cv
520.906 13.8965 522.25 13.7354 522.588 13.5977 cv
523.088 13.3945 523.486 13.6108 523.938 13.9067 cv
cp
490.26 16.9355 mo
491.062 15.5015 492.102 14.1113 493.353 12.9229 cv
494.023 13.2695 494.493 13.5962 495.155 14.1577 cv
495.659 14.585 495.966 14.8857 496.336 15.3286 cv
494.326 15.7661 492.499 16.5244 490.396 17.7349 cv
490.388 17.5977 490.369 17.46 490.338 17.2886 cv
490.26 16.9355 li
cp
494.324 12.0757 mo
496.24 10.5498 498.561 9.50732 501.204 9.396 cv
500.986 10.5313 500.48 12.2529 500.248 12.791 cv
500.385 12.9312 501.041 14.0879 501.219 14.8335 cv
500.156 14.8491 499.188 14.9048 498.275 15.0103 cv
497.264 14.251 495.245 12.7568 494.324 12.0757 cv
cp
502.755 9.4248 mo
505.454 9.59131 507.371 10.208 508.806 11.2222 cv
508.971 12.5981 li
508.971 12.5981 508.26 14.4121 507.725 15.5269 cv
506.912 15.3008 506.089 15.1362 505.221 15.0239 cv
505.021 14.5215 504.801 14.0156 504.502 13.7007 cv
503.822 12.9849 503.345 12.6382 502.453 12.2124 cv
502.608 10.7764 li
502.755 9.4248 li
cp
510.672 13.0884 mo
511.582 14.3467 512.228 15.9009 512.823 17.7109 cv
511.413 16.9326 510.152 16.3403 508.91 15.9014 cv
510.672 13.0884 li
cp
501.824 65.5415 mo
500.265 64.2739 499.835 62.311 500.724 60.5083 cv
502.047 60.8677 li
503.357 61.8735 li
502.384 62.8364 501.943 64.0005 501.824 65.5415 cv
cp
501.688 59.3374 mo
503.41 57.9917 506.381 58.0688 507.724 59.8413 cv
506.33 59.9009 504.923 60.6782 504.137 61.228 cv
503.302 59.5356 li
501.688 59.3374 li
cp
531.582 59.772 mo
531.598 60.2241 531.695 60.5942 531.846 60.9126 cv
531.646 61.4829 531.551 61.9712 531.475 62.689 cv
531.332 64.0239 531.408 64.8306 531.797 66.1157 cv
532.557 64.4878 li
532.627 61.9536 li
533.334 62.6538 534.203 63.2642 534.57 64.5591 cv
534.893 65.6997 534.752 67.1431 534.176 68.6313 cv
531.975 68.4878 530.463 67.7485 529.818 65.8931 cv
529.281 64.3442 529.639 60.9976 531.582 59.772 cv
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 14.0.0%%For: (Christian Zander) ()%%Title: (UT_WBMW_Rot_RGB.eps)%%CreationDate: 21.09.10 13:10%%Canvassize: 16383%AI9_DataStream%Gb!R&l$D@3OskW`J9Sd22P*2*@$aA;T'*ZN.N;l6;oX>*f'9YmS>SBnE.6VmrF.]0;GsBF,_Vl;m_6BLY%9r!*$QV;%V6unea,/"%C5o^)k'nq[V=]qP.;<'hdo%ZZfr^fH48fWLS>iM,Zr1qAY1qI5fW=^/X,ZO]]32+V3e_1Zg$UDh$icG1l(deg4=R2sWqC]0n+9Yo%>kpp%2YZja;QX7W2;=bbDVEB-#a:OoX^8./EnpP>Y-s\GWaR)RIA@pf3m\W6MLRGO?DCEe]i7e$cg&^1-TphT"7qZS^8Q4e0Qib=%%!*s>h&V=CKB;/.?'cg=6I%JG"'1sK,stSg^TqRj)RJV-ZD"1?<`LT^[ArP6d*2VS[1#V^Fo4V5%3+1`/R-i.[%,FuT9_R0.P.Uu%;/Q6"A+R@7I^\P'DO%H)QpshH0:=Tn/,\eA"Ir;h-!;sCL8)cR,up:PWaR;i6T9%cC"d8iZ>t]">3m8irT[atlJKd8nk-%3D0FbR%hG.i$L@EH2pS.@75bYZ4Cc`Ak4[8DcX6lrWXijPL\S&5YNg_WO\c\[59(as6<MKN8r*S%5ZJ9o0G(Fn,oj5,YCqr5,c6Luo_t$#l%,S#eCE71aE/t:HLDacR)[Ur]W9?g&>U84'E!HV4?,AlJ@%2qZ6@G8.GW(\=HB%Rpnj:5V8s1t"l!\KqLCN$W#ZE..g9>uV&+,ZmF%N*LP[[22RiVNSC?5I@AZ-2bOFr]cl8+JRVm2B:KPq%f!85E_6m\q'=[)_Zp--ghOBB4e1O'*1G$2rE7Dmr*LRYP24:3V<4=\-]9G%4/(!M0g2c_:[:/g[*rpd>'l7\Ah(FgdX83p0AF#,Ds<JK5LiAM/tG-X=5NsWX]=3seHYqnSmV,)h.j)tCX'il#&A!Ue*J6j9L%A5%%Xu#lI>+H@?Y@aA#=UN9okJ"$B<P8%rp-odd]::7mD`M`HF$UGQQ%UBRrZ+uGQ9_qNH.*TE4:>%fCWCE>A]]k]!]<$TB/*Wi3;nk%]N>AS-Kr5"I0XXiD7ju'l#/K:lA3_lj/m5+fJdS0\F5=_P"e$Oea@S:e!J<kh&G@J<W-"$>]8.2SSC;AK_$+qKeNB`)X*DlBUgmr%gA6Rdl?/ack\.b.r`bBcXeSD>!\s@4A;ijc?E_&MbH:MB-#AqNkP8nq)EJd`Ii,3_kOZ5eYB<#hYmHN@Ek>PVe>jDc^cm1donI^:%XYjF8J;Ioah;S9nTn9q\G5p(r?3Rur]'d;!k_0DJ?i:R]XN3hsQK$T`cnF&<#tih;5BTdgnct0:h[TFE?;>)#0=nsMb3bO&F6WUB%q6QMr9][pBTFt5[2H'As-06EI58@^(oH3FL[q0gC**t<.gGDc70m-L$nINt`9Sl^^=Ts'WRZ&NH#5)Ba?Neb.91e#YVHhe+V/QBb%+8bQJ*ru81f$[(Qqd37t"e`?f.2qe(PpakF?:h!b^tmta[!"\M?hltZSH:0no:*T_:S1Rj\eLW;:no5>J,?EKT;Ha78Ia25!'qO]%#91ai$%J]_.-lV!oIG9)TT<'e('l.UDL$#?QS],1*7d/V+(=g#P$36g)J+ag@Rgp?q0sA<F;+^EFRDiReLQR>DE3u-be(W@?L_+!%K$%B0r=AdRHZXK@H=H*UQ#u^a53iZ&]EI$%?$l!^WutCYZ0>l4?2hUf`>JFf>#jF141A(h^c"eG&,HK[MZ7euBiWj8lqF2GpfG#^%=TK"O!PO,Kk%jfp\__D^,.nT:Xo[=1203BXnbr;+MOd5C;,)S.HF*0>I7]#.\)lVaG?rNPZCU([CBNPrc2X.H0mJ+UlS38VLmX96%0p-/J[ISCPRY:/8mcshJK>.7bihMN.s327;bH$/Bh>I3FEjG^+3a;m6&em-dH#U]bP2h&f\U_6g2k%nh+&6P5p$_q#deM^I$p+&b%jaT<EQI>U#C:PCl[>D?bhp$5QbC.0Hr^jDcJ,\9InQaBB<qCP&V>Hip78CaMn#DQ=d<i:pp7?r$HS,9BlUp?LRa%3'4ZC!G$li;T%]?J0aA82#2r&52b`:5IK]lp5E0s?)=j9PMQn".C/[9J(\7;11rfH\[OlG`9U,bZia0gZ:S=*80Rbrn-oDKh_Bjn;?YJs!1BS::1O%O^)AQglpj,gJ.O>!S1eff1j#b:d[q*>,R3c53T=FQCkJm\gNAS#"R4hHhtC6:?pQJb'90"4BCSu8OZRZkXd9YQ"i0jgU:l(X-.BB%-bXC*<Y[h47Hh;:/iPhn12Laf+.,@]-/GR!X.!uC*6eS06s/6[[bg"S@7R-c.uVSNgM,<MHEC%=GIm2(LW`Mi!KF_As6.IHgM0eO%eb3A#FRu\N]7o+J:AbKbHE@@W7bcoe@+K7HiK-"ZoVpU8--ROGrDMsIT54+'pE+>9%Pj]ZkE)I3@J[4`GjCXPWp.uEb9b[)rDB]O%X]O9-oOdR"rh'4gdqcUi+8W!7X2*,&O&K/1-#`?2WG\.d*.gMu6YO#:F-^CKV"<$7jW"=Y>l&6$?\81+Bf3MRh>&UG4r?h3qLWR&%HRF5_&(]6IH5,.aN9t_fgk,?GC7i1cR8^L58Q+Njo*_4LC43SH"_8W3/*/f9V*iSHKU(/TU60dkZ).6j&hPUReX<)(>,jMQG@(^=%`a@iQKsssD*t9<o[0\!LIoS")3$ci3HFZmmH)[n,Umr\adZ;Yd;QjDNa1/:\40WaMl:qu#XO:q"<+#K!PKk7/]=u=kM#9`++-1NG%60-qi:`q-=2BNW5EN)kZ9-k&E*(,VCnY*Ap4D=u^Un*Dk9uIi*AX&CnAr,.R&`mNVXS#?#r)1GmJO+%j`<4oDa'mXoLWE7Lg[$4I%e%qB6Tg;FlT3`e^")Am9M#Oh1%d1G8fqaEWegq#6rjB)pK,<uH1OEmkSd,h#b9Z[aOj(:<m2Y_&q,otebtI`;goENW:q(RkG/8?R%fjSSe<%Ch(cPAgWHr"+XX0lTm5T$HNW)_U.IV'SdL$LZqfKb_;I%hR:dg8AS2'OdD9K@Q>J""^_\b1/KDs'=CmC8"\?ZOEb>:t*i%:)h4S.SGo+3l$lYDI3M#r=q,0C=K7bre[Kgeu$mZ`1[n!F?tGhb$ZW7^3tIk3Z.N/cj"$6X7&HbWO/.skUF8)]"+0=DbEFOFF):$%Wmn883k9S0YA-5_/9Q!Z2*@Nde*Z37eMe&_J&SP%PH-MZ?&B34[&M4s>ftkd?5.))GqZo4Vr`:[Zk\JH7^Wn?K4:n]B]XVn2%0`:%#1^HOM*lo-X3r!7TG+YRC@KXj:>$"s&:]Af05WsFY>Im0&u]r`d;X4gJ+>tNMkGLKX2NM9,->cESSm9FdA0iCgPP'HY;u"GEg+/b%HGRKsD^:oRlQpQ69HJItaB"NBWF7h<S@I0gZBed_"mDg$hm1K1JgH*m#Ho`NgC+cac.CQB[6(>?H_=L`:/SO6<'.Ls7_.Cr%5t#a%I<PNHEBR4;k%cQ/eU$W*S`a2NZQ+%:YpjJ;%]CdQdL_c`W5MuKG%.>+/NqY[),mE'op\f6VV+G(WB=Pid-qc0dX/>!08De:>*5C/%p(\a8@?1#$CU!;Og;O>&&mj)mg-NhU&<h9ZK_U!CGm?70>O-SLOAj#]4DY@[)V&<3EYUe2(*&H?j#)RZ;_p9/4.p'%D\QCp)Pk^@%FsdL)>V1Kt,]JPBNBJVNTP`G]2\'RS1(#833@8Wdr3K/FfUI#8[_f*ZZkd9pWmUUmf]uMQADY1q1$=q'>HRU7ZOqE:8]gcr*n#lm%$W(62?,(PL\k\W!cjm?,ZF.PQ^*R2oW6?sPjn"MOZst_t!Le`2`.n[BVLUX\Dl473Eof+?]&bE6s*Vbh6/Jj!I<ROSDJo3.50.\r%%_53&h7GWIZb,"h>bsEF#H&`dU+kO1D,=rG\aJf!cV93ZPte_r>&YJg^9)oQY>oJM.f6H!6s4>%%YGV5-TO@W4UP(dX%SMN#2&Y.%]0mh^V@9?f>E#/n-$qepFMV"KO'2qPDBjmnYZVp(TQ[5jdq^<Meo`nu\$4[IKXF6C#F4MYlX'1Hb'rq"PH$tV`S$-aN_5F/U;WOd%^#,mBHR/$JmA2OA!][=2@d2;5QjZ9TgDp&APZu@W??>@,;8O"g[jNYK.Q7<EYT+c8,27K_rY7X(Kh[./1)6T.%mOp^CN6KZhiJ#e%qp0S"md,uRd!63@D;TSaW/OIgH\rXsE@bVX5&F?Sc0',6'knuIQCW3pT:pI??jnH$W]9""RmQQa2&jf_Hb9)VjmtX623R41m`r,J%*,P!MC#F=k^mSuA2:'YJL6:rMcZ(&EF65[K#;"BFOZ]]VY(X`e,tN2_W,a*U&5<5G&-qQkgO\<&Wc,jTcI!E-<k:YjOG-njF`4_#%IlH+(Q`f`piL`^^Q&T8^&bGC"&.+D%W5CeJ#OU:,6pq[!>JjlqCQJ]4q<%JQRj%@A6dLVrF-ptNTpN&3L3+/Y+T5bL0G"$iPUBn`%-gi9VndhV#@^Q<$Q)HI;M"B(/T2EN=?n[XNFkM^n]m*uiGeotaG@ugVldHjk,lLV.jccY`TKpD?!X/T42q-+'g*bH9egd?j2q%1,%\=9Fr'L@SUV9AO,)FdgY2Es_qcD@_FmD#\2@*%R?kSsfj<7BT2f8F?fmQF:NIQFV2r81V0=_ihGUmj"GL;SLmdes]4.Bj'6g?$Z,%o\]03^N/S@>^ESN,VL"Y]%i%._mrNlroa<\]]1*`#Q?s3lKph9hg2a9C:c8pQr)sQIoe-Be::8if6FHIPT,jed`j(JJ1uAI?#'o=%#5L/P3(+(`loB-Fr52ZQP[DENkd"Lk49F:9AjB&5PC:5DDlV,c+.f,['7-!3`lm;,?k#)h(d$W!9"-q/:>CDA.6+b7Kd!8IC/nUF%Mo:-hj#`Bc]jGo^A4Tu%@p&m>JMT_T<^XC\4X2n&2S/(m>7rV)e4>+c0Ah,Kc])tIScJ)Sbl<`NFQmA/`H,BSQ(RkA$kT%"'K7P/%Nft?6&P?N\r=J("_N=t]T?J?t8SbXQ02D^#WO[11fW5'ab%\\u"5RU<p*D@Xp"([&n#V6U9i^pjMFJ=(BX;S_'__5O]i[]k@'9rR%qNJIoIf5e'nd@tZ$g[7e(&q1=+(rcspYa9mM]Ssul^-G0iiBcaYrd*B=t[N]GAH&6ARY8eGb:@%G?6/Xo!@MYbf%BPa,c(fj.H%`%id2+U4h]u)(4+.?'8oAi`JGo*8<NJDG?GhjT.%pSBcX$k"Ht?bB^7$AC[.4^>/j@uoB212Vc)!V;5G*.<8)c%(/gQDHYrG$F0Tl#%^N!Y*eu[[L2n;iXVfoc0IeY?,J!TLT9<4P_'mY8WCcJ2gdq9&BV>50Ln'Hko/mD.I4g_*f@ss=H472`6k7Ru%glq<_"^;2'=iW"7%YEe"iNu@1n7]);DGdm'I;We;WD=n[qFs^g7iNt8WO'KD/m:b)&argDh;hqjNMZ,m`g:rXhcGBhB0n8N4HbXWqKDqH+5"oMh_t$*Q%g;-N2I*`rKflfm2[)3,3PomA)AU0jXR`b,.40si89+cgAn(I9uh0/Rdg>/l1P3.fl#G!EZ(ob`dGs6El[T9ALGuKY=e<nCK?>OLK%%Jh@;9`;W`K>LfF@<\"qB(qm<\"O(Vpes)@5u2-+"6``d](HjX'PR#^gV9Y15fpd*rF6gjY('MopY+n0@0$S_RXM"(qaW)U:q_<5%g#[j,8nPu,gV7AVf+EY$.Rmq!:dYKTD#R>-#2KHA2=L"&iG8BHRI/4e1[VD4gV"sp1RDC^rtRGj<3j!bpn0<uIoiO$Y1kJcK5,VF%UscI&o?`atQ9$OaO8SZ>fV#4&['SCHN``>:2-YL`3/Lc%7)%JkSPJ4<o6ogc/'Y8e)\Y^qW7adSJnmM+\*fbPn!:816&gf?O)$Z;%p;9DB\'glfdc(/5*]@[]e!]"ilBiYlB*Jea*;!pY?&K\Ej5[DK)):@RS92#@mEhLs@fZ]S/3Ouc<#<0?K3g[CY=&kHr33fJ'fII\%IdOil?-hA2Ta75PSEaCm4hk*mK3fYBc,`2SG4I_;)Dm]c=mLW\h,60U#$mk5rdFCF)*7!+qX]*eTYQb2fZ2%WmS*h9+#N66alQe&%TZ8EuIr:0/k!KCPe]jZ4TI=1DfD9d(0QS0jBM!M4qt^mgkfLhLqgPkM#Rh'8d'28SQAc(P>ItP-a3l+MZom$tnK44mG44R"_a,+8%%aE,Fb1uIBk9HM>Q^QBIE32q-kL7_L+81(Id`b6Pa#X[0bcYN$rIa7dS[\PH*-@#J$DTQhi\3=]0P-JVd#CdB.su$aCs_kAp0n$8%':Yh^=Z5KImde(&]lR6_/%_kZ0FA5Xmq7>Unre8Xo*5IOon%h)C[6&eTZ^t.s%7L=[PBX'BM`jMlL9l>`DP8kVsZYCoDL*J.eOt[%fUeMDm@N^]TLp;MDJq]tXqieXO79&O(@^CsX2B_kd-&+5`"-SN@A+Y1FEUA2G>>'QT#(u%(+1kAdm\X&`aO%_)hqLaQLT5BfhChJ%[p2cGp9`4*:O_]rJZ%Ammrl=/]_9e_IsZ*G@cQN]q^g`@GNE4NJ#X1]oK`8<arE#bke2f8`oHU/>&Q=Yl+u]MZ?a+tqU@S*.D(aB%=U`.!Teu0(j\l+WA*0e=^V(EQoLJVdnDe+*nC5A.iR[qOFM"srnb2D1A&5[&#_.0-=o,HcVp9u\4['+-r29.r]b'`3p<TYjaX[s!%5JNX[+&sihl.rOAj1N%Ch@7<RYPEO+])1B6r47(I@E?pgXg1!uBU5AH<kUXKFXKtbiGZJ'^YWW'lqN3uc.ni&>\>FEf>F2ggT-BJ%WJnE.QHeF\>lSkVC[^>#lP#oa0qn='j(E#af5*26C%#ar4.l='nO-1M0F#j)kN4^@k0*\i[FX,oQ=o`qLe4`%]@27cHV(hFVZkC'%1W)mBdB].,5?O$q(5q?7'8tJW_6/05\X^atch6e2;m\as'2&RkTF9S)R-_5ge`I+\k$it_j!3`JXMufYUUNBAG0!:%rS\2IQ*7;R%c[gg0\II[rhTn.8PKN7Wl&oQC9K,BP]JcT1qqqEa`m42Jq1gBm`F60bLZh#O9>?f;#F.nc`_"+A`Y;NH%<^cp&*k2,mWZmJ3tlr4%TK>7&4)[q1[0pDFCNo'ekWQG.maV1@rZr&S>tg1?4khq4#(;o-RGrk9-nFtk@m4]/_+8FFn3OIo]BDO.95g!^<;M@rgEC$&YU720%G`E]L*'#E^j#b\0jB>,"M&[6&OfKo&0(M;rG2ZfohFq<Yj[INRBR'Bsfne\F9;6SW;q8\:O(^P!Z9",@?+]k+OV,),Y1_j$:]'I/%UC1unAf%nESRY.fn5fY`^HFoBMcoMen!omMNfOsHJ(>p^I7*uWZn&Q'F7DA`c2`3]]e;A:/t['u7$jBYXmF5Bct`d%DrolW`=2`%%jUEmcE-"%r*gk9%;4c\A;o2!Rl[lIV[C,C\n.0J-Y&?C^/>;Uuba7)&=g$r"J14.gH6u#Z+>NX"%;09#h?o,JCX;:KJ3X/(4'/?L%Es<plDk=tDo+F3c:1-tN.HP>DbDZ!'_^G'-:bS><TJ>).o:(NK_+:JRc:+3bA:<e7_-u!m;AjJ.oM>:k(q,'Es4$`-bG.B#[s6u\%$eds=A,Rp2friQ>,:iThm9DJU/OL[3VR,T%@S^PJO?5suoK)klS!:3<?$R8#.B=naVe:4/_L*'So:1t6`r'm**q-'fA-H)]h-qVM%HF=n&/TCc/omYJUapd'bhqR_qYKi0[Kc5ueSV%eM.18;(gCG[ff_H(s?c7H^7AjoCm^CMp4pYZQdAM";EbXh2b/*%59Cke2L?aPn%_5Nr6B..L=;RQFI`E+A6Qu>uG1UO0$2L;jbnr&>*$]<jrgCM8nO2H4_cq!7soe\Vff@@iW>2+>t,.)UojR48SFZK=T8kP_$7'e:<%nj6#_L"q*.cGI2F;s3bgY!";[i41@6*e#CpGO_Sk.(NUR)Fa#Siq=Sna4VuR&Pa+fl=AOjU8I#/;#JAmK&ji[ToJX(OW6q3q=j$g%C1(@9aie$'1K2#PXe5<9p`^N`Z6<CRE(bS`UpU`6("a.Dql1[[CQl&q*Rr,)B1ihgBopX(UW&Q?5?AT<;CXK`rdIt_iO,TQZO`7L%SqolPXtN"Y9(leSXQ8tET[LZ$mo*(^g2P>ddN+9Gko;&IfUIlNq0b=a8>StnIr.t\W@fKXdb2f[GrpI]WD(ac#2(#:oCBl=WO""A%++B>WWuD/\r1%puN;5Kfckpgd>7R>U>ISfLI`$:EO371cg+f3Mq>#"oh6d9R6VqI6q:OG>UjATSoI8GO]#&@3&g-(3^?mDbH<UVA%(s4CugV8s.oaJm#@u1_WS`FB)i5X.rqlmDJqO,im&@%P/%VH,Gk9[r&`L1t%M(hXQF=MpQ5a$s,Fj"^^AC.T*-fWk$TLmC^MQ!Z3%7r:5TS:rd_(Ul&QjCt$6jQE7Q4'V%]2aE$p@uj''GD9KI&I/H_YfXs8V(tD4lC/3tUG:`KrRi,'"+^'h$u><%Y&AaalmNq:WJ!eq%G.Fc;aIhG?j@*FJnuM@7O,'[l5i)h8"t!^:I@X4nq4Bh7<M$ir5bG$l4':hr4lVT9O(0IZZLe`jeIl$)dqUg\^la]"qn3,5pL*I<%IdhkXGt?qB$(rYAa3Q)1J+)ujW7/rR-l?J/-ZI2qF8apkjPeo?cp]jlHNQ9X\.IB_'?f9PDg^tGe]u30.MLd)8@kJm?323SC4MXG%S[Q;?Ukjjq$]X`0*l\Etjf\^O7/:WrPUu;uT;TN/8n2VAjB&/gJuZ1"q5I$hA_Pgijg1q)im-)pfR0E';M-f7+7<;;IPIetD6]c;%iUYY=cHALM#(D3MQd7#B.>q8Vf,Lip?Y.^i$VJB:qE[C1I>\-5%UbNO]_`aZigke&ISgoTb9D,RiT-)ub;+Li0C%]*$i^&5=Ole-%r4._MFacpe-9Q<r!hJdQJMm0j7?dSKYd8_?o>5/lhVX3]8Ybk;!qEOThMAO2]+uX^KG`V)If+r]&@:=MEU%2t'1ff!"F]tF:EHC*%+m#;'mtZ#INt;dI7"+SkP/nH!TLk!EECC]mNZ8TihfcZj>bcm7d4r?`-0"VR+Y!Zg1R/9QcTR:H+2ZF.L?E5I*YLFOA)M$kO'o=U%\HX/(=`i$2Q'DY#8D'=c\u&F,'B*D@e?aW>`mMM?p9056BOSU_l=Y4!Fu>lD/+rKN)*6N6Wnj^<O\[ITZZY9^YSAV8K(am._fZYh%[reK&$O6+SHm#C=C#VL3S?(E184,F`8052qN6-Aepu0jVF>aPkV6_8cB(&p@B0QM0oBYb0QHG/fTO>pY68B$,Yb.R42q2YO/T*ct%Va+'3TpfA=jF(E#d3g;>,nGt^:hN.ArShAHU>rlT9>d5roQq[B5(&JD*6mJ1$Yt7moD$sGBaC7U0cqWOU!L#pc:7N<'OZ]re"]R@%S)IXVTi15h'`Hn?M^&U"P%$@YqL)I!WQ`/,&kTuc=m0mno&PogMDPa_6;.\mjKd,MV(_T)>Nn\gqV*],aCV384N5c','<pRfC)7O%e;$XWQ15n'1_p:/PR00PQR>.5M%4%t9c(Ch#C.%nH*&/uND.ckADArg,.^KncJtXsE"pY`f(lh4i:;NLl%2h@5GX7$'-+3+@*41Z%V7T:''^8DR'MQiD(aCUVF"Q,&^C02P8"h]Si;uZ"lh2R[2G0G/<e.?eJtb]dQ_C-4fNC-f&J)f^&q=q$AAGsD8BJU<gXsdq</a-r%+-V'['S..%%Sc!t9Ie=>*-8VPM<t"f\AH%E_F)<V^Whp)T/J&4hu?qhA_c7_P-sp!<^E(pN2MC_^4NMk@d':=FR^)fb^(;CL+^2l%0!8AsQl<R2$9E[Ei:h$Ni[a4jRISeR`E1CiWWg.C6Pj)qQcb8bL+^2lNj:ad:dZ&VNiJ_k:dZ%+5pq!;7]E)>YFot/Z,&;>re0@r%$F<d#[N1h>+'f2[nMSg\U--,e1[RJbgT/ZR"SGZEei.&MmHMiFN6pXW?GP%S0Y-8l0tu,ikY/=VnC1fVe":>4T<K/K+b:<G+6/:D%CiSP/OTmnWE\@1aEeDY1@\a6\3J44D?26Iq%2LarrfT;6NXf2KQ]0PO/IKPPQeO<$!S%a\+RJGb-%l-P*`$U4jc5'2'+MFX=Ol6N%\f"W:k0J]#c8"P*QVfocDR!DjfHt8X%4l]"<[rot>688Cijtju3m\;OY.SKR-MN;^bb'Ij2XAY?5@ROuf]43@NsU)4H1EjW`Bc2(%;nd/ep2+IlZH.-d&lY]g051aQ@,&C0(<[KcZ(UE!YiB\rhbE[I'37Bj]nk3o'j]H6<Wtt'$B]I=pYC(:@[K3jpeM\OcEhlNM9IXh%F0<%%._7HRXh2:h0r5^e3m7[:PD[Y:pU2^%rn5bQEo;_Oj(lS_CLCn53kg/&1"!qtX5S1^]4d.YZ?YFT\h[iacMURO7#X8;YZcdu%=EGs%kX@NPmCO5,4+>Ft?_UJCXV9(%^1fjFm1([TFH1[Ch_M'80$#W=3oCDoZL[N`B)`9!h;.bg"@c'7M6Y[qg5Ri\,/+Y_Cu%h2%N7%lq@>.l:U@lZQ3W^[<WSBFVW'<$MD=^/^\.(Y!K@(8O@LS?H,Vk&A.L\X6SE@*rs2brCCF@6r8EEq93To!=pBFX:ZAP@.=s(6%%V_O.bU<ceZ25Sq,\IbnW>nIg["5hPI?qQi_D@95^Mo8OQS+O51QeBW\##$KqSq9fZ57+h7G)8at:h<nmPQLO!=O&gh7j_h?l>TWP%Y/2fZ7qPS@H@hm$Qmi3Rh6AU$G6/g'FkU^BYj%<qACfjpajIHEp(M[]]GTN+Zf,tT'T\4QXo\?+G4_VbG[u&B8+JFBiB8q>eUmMH%G8#YK^$;XhrEap/0HQVf5<g?(:o8ZXiZ,anObf0aAP$_1q?kK6cR&kZN@.Sh>6j2e8R0#nj"gn&(`LU+G;()9%P97`F4N",PE_cC%c4-Bk(Q^;PK1)[H"3\^dW=)SRJqN@RL<F-:btpPoR]dN7=3"lWCo-XZ";*,dMuH848BJtOojHj[fg+7P^p<JJ=\R2=#(GHN*;+8%%+(g%-I,oU`msKV$pj0I>/Eh**_i9nSR^aDV5_eQklJ[OHO*h!6e\d)i&Mu7-n@S@4_/(MYr&<JY\<-0>@V92RLJ.-%J2,Qk$2YpD%oSpC&0#SN`#j\-2jgtQ)5eU8KSq%I:6j>h0*3EElabfB-P5*ne^Daeu*gojA9ZVe``+9-#NppLB!TSHmfm*?1oeU?B4mSs%D@Y!D%+3`-8@NApoHtVX/`u`-[:`bq,`>@P/%\\+D:O&_f==U%?\uF'lHFL6Hk`Z[ra!-T'p;>]Fb"2]h38f,la7-5hQEL<f5B4^tRIs2N%N,T3E?JlBTpoPLd:NS]^r+fJuC"Cq)rt@2@^4mtXeb?I@>iA#bLP;s`WcXas/QAP&N2%TiiG4AeWR0>n.T.A&`__dI:[6u=81dUY%/]ROJX<JDU)2W8=ojWcl.Pbs$U#sh.'rf;>""ft[iH]in5[lpG3c'rkISj`<]@_<9Qa6cP,+2f].><]@@q.*E6[`cY7ZW%]h^F2:%g6_>q_N!Wc9O%o`S6bsH;RjM$L`Y=N-)GRS?A5YN_F=:@'&$t@5Ei='_"X%&$D75&'#T,05,aOuNU;@5=E*E6O5mu<R)"93SbYK<%5(X:9h!ol)Gdu[`^DaeIb9mYU`2#"nQ!^/E:)kQGEH>M[#q841NeW>p`rgG'DN,#MB34c$$SouYqcC-!ZZLW#Omd0.DRY,!5-A3-%5NGe@Ya++\.8En;08f''(RM2IVZd2%g,XkQZ\?ip6g7%-?(3B#SWMX?Jj9&lUtG'Z?*)#^JfT^o]#APcf6=-eqoVtA[^KGN^PaRb%]8`mQ_jgJ_QjPpd<]abe@gXm>rY8H"2P@piV+(uQf4mecMO/(m7Fbklq((e5`GVTb+q3`i!Mc]m]g7:iDKnHZ4fZ@oRu=8MRk0hG%Ob69&K-.!'KAq<,)==s/'NOMn(g$&^D+"oGF#N]T&))4L?fn/-</qmh49iL>#M5)j![$1R^+/r&Fdd`__#;Hec)s"?RSVF./P(G9%m(<I*8l,'%RgFCG=Di;k\`e](he>AFPZp_c+Tf%_QZGAFjYj'R!a>7WIuL=n+MfL0C!UPPWu@a<qA'#Zn\1NokXcKnjHIUHH$Ip+%fPZi[]14LGRjoZ=,WDM8Y4&,uhl_]MVD?SMmtgl4qI2+?)j&Z1VG#tof,&Gq>JaY$JQ!J3f0Ef@-V1*+I7ru)pW"RE0?lf?b7@6i%9m-Qn+A_IqeTB^A_[KU@(M3nk0AO(;l,%3"_S6U;8i9nA:GCkBN*&dj<_GA<jl6n\m)VltDcbBkck<F^*`Fq%=B>U>&2J>b?'nK]%9Hk!G9c"SC&S1!jWp.B8klR!00iZVUq-!XQKc<N>?'qgd>Hd(eVMk8qeJP@O_J8?5\YJ2`V@+'k[/4@8V@/kknB8hH=4;lj?Rdjr%HCCLq/o:PSZ_9jgVX*\ci17aBW2>L(/]V!g2\a9G>trr.'n/emgspN(`Ro.[FC>qcC@'Jm@3&0]oiS9Z_E(5I]p^Q)>1/`>5B8Ve%==mh*H6'\f0!'HE*uPqd2-j<9>u87o?;25j%,Yo)A#Z=u:rtSLC:^WQ\sWBi7Q1>!Zc+g?J:[U:h?Knq#n+Zu!dG6dRj2(p;dsX\%[#8q]<u3ck=RG*PpXR5t(Wl/'n7GlHOa:+:eqriA:b7cl5dAK?'I'TL_^Eu!V*qC-dHtsAd8S\^=E__kJpR9hGR@*>LuU0DGcE)R%]tR)k^I8hLHiDgpMhI0KlPRs<+N:'.\f7AU/c;&!s*(W/WT:s(Eu3)0p(PB"P?r;H;ot<+O=np>_;k-NSVuo*>gRp10K*Zc97gsI%P'@]8LVN7)d\@Y#d9Vo=V*`rpGAcg&0R:Hr?6OIiC1/T.bsQpBWc^#(3fE[mZUDd9K2\"BC!51lCO'(gM/k>$5/#b!n3X\ef+e^k%cN>PeIgh$Q"*8rjM(/q/P;n_+V'0<,Yp>GP7(WALPapfh/`MokogG^MOb,4`gJCc;*\:C9IH*YJ?oHNRpp-SG`gI9YOY@_h5[s?L%B@=[VT^m)?jA6-T')=QW<+`Xh^*iK!<YG']l3X7m!k^Up;L!.m(NhXGYVtVJp0_=2pPEA<jLi^<`_5RW?NnBn$JhC4]P*iX4&Zc'%L't:;&s[sHo)Vf;\F2:EM*Pop/snp6Yi$g%""`u`*9sSu<;2cLo#>j*+j.s4<GYu#,7>BD3W#A.6l-:AY'aKB+'"j[oRE_4>L@3N%B=N95LjQ6"5#M76<<_h_*:b;F^]B9FA/I)=Mn7Mf?Qm>Rf>,OnKZA&-)t%s!Ab[9ih`?L?2r&i]hWeNe\;SbSl&NAq<'D'6`cP/9%JE)jgVS'1`,t6X02tX+:5OI9.Q^$R*ae<X_)fX^#@_WFhn-sS5^M8d#.UspoEmch>Xk2Wf[H5NN!O]/2jFt#'alcKe5lr:\=8=h1%_V0dKYj1pj^N7Bj):k8lp5K@AB+0L%fSc6_'Q8m=mO.kCE+3RAn4h!F18^P7lJ"[$FNYa@I@=@I3JP!fqmD*(hkE=dj&6$m'JVbZ%"1FM&M@D+HlDk1`B!r*E&o"l5Ngu%SSBBSSDX&K99TSRkmJ_OG&dpjd(,:)Y$MQ>/_!#nt@ie5sA/2)SUh*5V'Z37T.A.O;.#$FV%=cuT9]Sf_t.IU`u)V;+GpW,!FKRU8!IA&g0,&Dd4PVcje0G_<rnXC#!lmgLFq&LKQ07RJ>E$=pm_9oH5I.!*;92tRHR%rKVIUO^&%oc.&nb"o4*00LqANTZUq<=A3f\t!1THC*s[>q/eN=h;3rrnMC0D!i4.qh;.WV,5ge+(-#M7EZE.RC[loNcupk&)1*bINMT$Qc`]U%g3q16GA#*s+t<?Qi>,HD-W*<WqYP[&a$`keao6mokh<esAEbB^3N,oggc>f^1mMMDY_c@h_*O^QY.7cBKgGZ;@dVJ36:^NN">@@8%DVkt+,&7-)Z]V(umG=$H>(d+t,6\$Kq%W7e$^BTRDV+K`oKKGKmo/cP@"Yk:c-+;O6"^\.mk7Oj<l5,amsVO&cYas>/8ZKdmmIS!%mJ8Fg$k@SQK*i6:MN4Pi!W'tg_HcN`rU=t\OmSZDCNo-#_aHY&F/Q+1,:3q\&>di=\><NFn*[)U5Oh41[#7SH>[Up*$f#2LdnH2p%(+5U?MuL5<P/'Et?'=iFF@rV9,%a_?V8>V82Ba.];ejj20f$#Vmt4?m8NNCOVP#6f]!.Z,mYeuZ<lGc'"i!1qrMm4j)4F;ACa+1?%#)Ml_\NRo?;DnbSa\S?Kk9Vk2P@nTl5<5k\0\T;bjEZU(e(S4$l-G@^Z`@?;06hoS.,:.,?HJIk?2`VT)SV1#_:!Pf`q%ZiD;>(E%<?qJ!*^c.sQM*#DJ*cq'(r"`1HQEs.*qHqoht/H)F%<^[nI\s+!DHZM2UH3TcD%YPP5*'!8L)PR1KZM=Sihs=F&EM>XRsMD,:@F8%-ZfQZ,'2mK1a1!6FZs=V7=XYRb[j9]Mn<#E^'rsn+P7S0eV0Y[&o!3;m)01Mi<m].mbg0*&f6`0%Y!Skn*\O[<eHVqT/Y>l;LeYg%ltSEK3sQ)!EH+U!GtK<G!rD_@BIRTP4'0h+J0XHRYKgU#om1=g`,M7TaSh5^b9r[D^Uc>#Z[nJC%YM$;p\Q4CUbY](WT1pa(>2ht%\T#<,aNr%RWW876!!Y6j^JQ,>_";``WY*e#^p;ug21W46hld(imU&p&TTGlDN@Ma=)NMPAfJfi2"/HQD@J8m#7d\PN2sN,VICBR1%[j<adJ:0:UOm!YD7QnRWr^IW1oT]9fP!H[Cc)5J[!UXUb9DO=ROmUnio(d4IqQIJp0?gINr_*%khoI^99DOs74?FTH7:+,,Oi63r%_#)-JHsp?knR'ETHU%)R0',`PJ)ps&o(fp*32o:4+_"=s=,BP%,B!/na1%c3?GEaEEfKJ@:nuk4k?hDsYj!+[[\<Hl`I!;*C95-l%Y?uf0"1S,TpY/N\Hi;s;6BRT/OSAT?m#Z:h?duQYL:u1l&LEKcY?uZhLu>f^l!D+-Q!@h/f8ipP7CdJ&q(gsCIdp(s^VB>dp\Mkd%lM%D"5XOo3MdK;*L?e:&qLrfcr)_.XEN`_s``^6hT`*M7>(./gHmEBR,MhZ%0Bah,1PU8Tic"K/ndAEZp\Mju\e/)l6f72GQ8QX"%oc*]j^+n-M-bn7d^),N%1#2(2+&EP)\js?`0>;B`Ua#J9p\KRK<8:^V!k0t5qd.&:1cY#+5;uC&gZ9m0]mfLq//=7Phn@Vp1f!)1%&Bm`brEd86KPQ'+lM'c?o@7dPh<NVdSZ?\clPGUIpI;Sgn+DT%CKF'Kj1*\o4utgEI=*8e`P[0Ihro1niOAXm?d013Y?u[53',f;%\9n2620i6o55MsAn[J@SV^cO[IRYeCSpUFqj3>CkK(%R^(OrLC#l!iuOe`S5+5b-]e+%>K)p<YW")[9*?Z5/Cf5I%Wp];FI[!VcJ%MCj4bqKWfC,MqbLO]UbKIc%+s)d^dGUp2*3onuai*koGH+3V?Hj/@;FI'6n_]%9gJp%*K$GW5Knme%MOk:5P!^[DuVHaikImRJ%f%8jh2m`SKeqo9HYUme)Lr@u_JS-cNfFY?u[O;kHkMS+lbJQ,dTk0UBB6BfV[L</u@0hf*c#GOP4r0s85prC4mM'^t^QVhe;=-h!^T%rSePZ09S<S]mfJTZ!8K6G->9NXaVGifXL;AMc54p%Ps,lrK?G"UYY8!hoXfYI^.G26epuD0,t0qE@/EO04$UtRM(?)F+*',:lC_s%P7.=,++`lQWRLQ2T#lDs[7aB@aQ"84Gjd:i%.Gugn_>5"RIM<pm&0(<,0&tT#XW)(D@)OR3kL"^6s($ZOhICQ9e>C=O)jNZ4mb-g%m'PM>B6.P]XaQLBat1l;2b3_ADCfndp[ZR8H$6Z3g%4P(dm#3-p:>;YS#,`SjP=`aH2?N4WgNTq>TD$ihciaQN,`k4ok8fe*569;%4<;0Y<%i(bpgNp_qEf'?]O&7Ce`p3tq4lg>j3Cp'nZf;PpZG<OF7OUfYk$LOppndhB.gKrmC#&=1"iWdo,29=I:_j0@HDgO?9$*1%I8,24in;X7MXC-6o'+*jYFVEpAa?/+YYrk,Ulr+!-C$3%9%)!ao2s^,3IYnUC[4X\hYZ#CB6Nh?)&GKq<*HGQD(htoa7m(i'3+ZP%D-rcnmEXJc'V<I2C+)Gip4_d)f/haIcdLraBm"L)_QSK#pB]&^I@Z-<X"J0(moRu2-au#Q`pq!ln\IQE>1lMp:V#`cREY'_['`fh%b+)f)m*@k$m&b$rb`T0g'o0Xa4_ud>LGOF1//CjKajT%o7(`.#-lECPcU"q.[/K0e+<I/Q9\nl97<QK;[r1`4ETn_-@GRGJ!T>jM%D>Rr2lZsf5SM+mK)O6Ki><adW?ea<SY?0-fQ/-=YcCPO%G$Ba/;J#03@@J9QMQ3cFggorYlp>\Hdjo!Rp\*\8hoe5^R6n$GQZ7'b%gQdgQ>KYiP/1HXl08i`Br3_25IMt!dQLJ`&R&eIBFo?&18):bhI;5(,+XsU1F7^,"[aBc#b7!s+^=m]."b7'IB,5fp0%++loT((i%V8p.D"6oLQ`nSMUiC"XII3;:,;//4=&*Ch9L!6mt!&KCa7p#8>pF%CQG[#Uh*_=/#V<P[;pVHA>X]4.;S1K#k"_sRMYi\$^Eu"/k%P0hNMCKWu+h@U(jZ%N9RTCT.)Lu`][YeH`ZB=tt)(0Hd`QAf283*R$Vb;9c'(@R#=bHXMOUS-O@M*;k3=*@C'VpfMEkIjQ$MNkk+%/`_sF5#ccQ\O]M]3Fg`0b@Ss>7@K^S,c,sPfj;&KIW);Yf@(p8!m>*_Pq:..ldatlcso8@^Jnfu*[RLM3Bu'iZ#I,!2V,%<j%]-s%99u-G\XsZOWJj3ZGPB8BBCi@6H#Rir`5tZ?lb.\U9>=Wj)l=<n=&BXD@FVCnJ*tF;m#.,Bh>++#V9iR7ai3-8D`[7-p0@EUrj&qs%cc`F$q6iRp(u<dAb"cR3QO0lg([6<mlf0C[=fF#d)XQXZO2KH.>+s<^9;pG2kP=\rJpP1WH'p[#Z(u*t-bHh`:qPO7AIis#AlL1j%cSO>%9kee49tC/Rg:_6KYp1g/2KP^h^-96XlKgBcYIQkVV8DPL]^]Jp/"DQ`f?_Z2WGp5eDRl`q9V660(4UM#jcSr(m;&bo\U<)1%^\#*kG9_IGZ/#1=a3^m:]6^_cCHdM:%HE1*$_$TQ=)=5<XC,JA-pP="'6?Bu23b8q';2KD-Pe2BPDSOu[5>.mo6#kn_hm10c-=2d%qk)VBAn(<,p\)PRVRl(,`ZY3$=\?3IYMNgsZbW1kM'($TL\.>&1]aHY5OZC03RtE5^7.RFGjLa)Pp;2DV;59Jq#&!I7\XO@GE,EE%q?#n/r,^J#lqs2,R/#e4[R+koWah9#]cVUsg2/dhgnqKujTSP6eEN7cI@hV$1ESoB4[*7dgA;*s>WJeFCZ_.rFhd#59bTMVg?J`6%R5cGO%)<Kq/I0(Ybj/Qmr(eE(0?VklX*$o:X;sorrd966^&qO!BNngJm*OJnEj'b,I9<QMYfX=P3QlS)Q9/1:gC*JZkM+>Yo#t-_%UTTd;Eb_BAFFCX0fm#,6!JUMPm#TEYqdO]V$R3`\T.9!HgZIX06+bgukDU2#[ZqGi8Q6:UnoK+,hF=XAfC4*tB>DH\S#I3)0=G4-%X_5'$dgetGr]"<*,;iL/Qd;,!-PI1YCiJHYnWX?'d<e(U!]%-/9M_2SWU(#(!5U!_muRdGG>VMUi^N]S^Yf^NmS:_RoO]Q)Kt;KS%]=@@^n*=f9))7?sB9g$R/JH*N(*qM$KVR=ObW4&@f/u?qr5[k"VBP75gXipH85Cm&bVqak'l$n6RaV,Rc$YqD,h/scpma8,5q:p,%r#(_2qSFf\DFCaNiI-+32kJ\o7us`Y*TKO8n\LdrlNLF8?e>P9a7S&><!IHN2p%uY;ai;_7_AQ>F]AC3d;B+2>L8,9&Fs+g"g>#P%qqd#dn%_BJM]UQacel4^B7<XdDfX#AGB22aX$G^31iQfhp.RE+gJ](>I6!uEo;4gENM+2WCd_YM0RjKqErZ)tQt7'bZOW5/1Z*?3%:'Z;(r;'$-(Y]I9o-;K\mr.jl-"7Y[F'o`@K0*K796_7W[s(K?/;)/V(Lt03IKcZW7!]7ZAtq'W/,1-J/76.kg+lF?^WciIp`00X%$t#h12L4Z+,<9JIGk(,0eaU%X"pFsdNn5n6$oC.C$blNn((g04j]?YO?bl7/e_q[D%D=@koY$`:gkP5md/(3=j?3N\^:re.DpLH&%<:;43pji+ffCp96m^_Lqc9Kf`?mp/D\Sr\hoW;lb^T)SZ]]Np7!ljC$1Rn-bCnAn1'KON_nrDSh?0ok4_2P\81ogA']]/,eV8l*U%q3e72g3!"LM\[.:Denjoop90^Hq]\A1_&O=fp/@L/l+\dbaWbSqGWr/Zn*1md'DRWq^riqSD>LSq4ZqmnTqUuFY!TB:ZD55Zs2tP%Y/94#SG3FVHf>R?JpY)5l96[KnOGe1BeRdSJ2[/1krq(h]a)<CmpYUbc>sh^lri=0Kgjs_0_3Lq%cuk90UrBRX+</iIsUVB>Xhc(%"N2tp5>O4_hiAIR"B^N)m<PcKI&LqF'L;D`7?0!@AO*#S4E?fX(uT0JIU:.g%bmNOl+Q@bPCWY3+&hrV!=$Vr(34W?dIP4GH%M#7%IP-2+pL@h2XYG0&qQ[1$ku5oODU66X@lIc<e*q1@@A=Ct09mEO8(Ro34jNG!B=>3Hg6f!K(AD-9-QHU1]9U4hGNed!&WF`?qW!fU%E0`A"l"-!iSkmG^Z05k0cW>CIm%82Bq>"uJ%fQN>h9l&icbG`&HOhrrr,Z"PIjn<WXf^(37&;^pTDL(Zp/,W$phck9rHpWsjk?0H%qk_P`q:#;1?2O.Knb\3.)eMBR*hR81"mK2+d*L`AC[Q4[Zh](0RR"lt!N+f:fCn!"kIm+^4QN"WCog:+q74K"ejoGHJQi"`U%ZOJ%(\dW@HDQJ;lmu?n>)&N5f@st?Si>d=@E,3jI<L,9j8%m2qo8<p<N5K]esUL(C](QJ/,I_"kYp*^X)liZ0oPr<F)!^)geksDi_HNF%b]'1[]pP]\TW_CY,7@(JEZA4@gLXuh!Q.3GBfF4o\SC:0Fh(eX(a?[<:Zdr%des5dPLW*g,*;+A*hf@0OMc=oXlIa[3H4GWcqF3(%,^SB?/s4H(LtNfa0=3:q'QD^2fk$M*/CQ@>ZN#BaV^]fILC;3!%[J+#mVOggh#Gb)-%;t\'023R;;\BL2G.p<"$S>"1upqg7p!u=%hp04C.]Q!`8hN&O/AAc8Q_.G[kgVTHB_P-*`N@&DX$1_phL6jf(GBDAN#=j>[tiu/Y63H_WK^2:H[icb1r%<8[?`Rb=\i8-,,Ono%]m@)7d]U:6)X55j8h.Td-d,SNQY*4&X^5'.UK_P8HCr_W2nba,DdF.Op+3mZXYaCbC&1q^ra^&;j\UhE#Ds**T7OM(b/dWRe_^,S%SN:+0(LO#N28OYco4h%V>t+bq.-9Z0pb=LIr6q6>I':A]Vq9_B6>u[/@e&Zj33a_L.HF`ioP^d7Q>-Fq5(EQ6H7Ces)c_1jG^]*L%LMNs:Ru=E/rJ^okZY&V(\B1#)5IKhEp;9[_5.4"BET/AEOdnd#117p62#jW+6V#8qT3LG0J][@U/6Rml'D%Q[`l+TL.SMD=D%n?5%+(#M2G-4o#Wt(.kV:sb0aSas/bNC-&:ObP^n([3oS`<At\pYi,[,`2BrLnj.4a/@O=.I%2FDC>&Oq'27SOGT0Mr*DDjQQ*q]GL12%rVE1i?amK!;l!t.7DODc"@W;2j6hO/(e'P\Zg3B^mN_7d.DL2D2n0eq3.Aa643OGTcA<d`Bqr[%$H[X'm%"b*WP8Ib=!45]%eC0g%gGtCXP:\cBH07dC@4fVD:^'F^47_QVDom(?@0Di9Q.*Vj'Df&9[pYPoSkJ8IOPufJr-?JsL%E`#WgY\%SXX[@b^6^\$_lp.GER#:%+duc;rgnHg]Gm]2Xh$B$#p`)HM]P49=YO]E#Pd`4o3qTo1>hQj8eOn\e`q0`o4hn!WUOdHZo0Qr)`LGXfXd^T%@#)La-GDJk;ZO+%np1rCp\Ac*:^!.loR*6?3l(GVEK9utT"JZ]!LHPp@/NuJdFEA0*^]e*Z15`!Df;*<8V[&"lh;'b+JRb$4+Gg_5\)Kj[e.,d(\/Hm%c].&H27*((5CMks/6\O&h>&^#P0@)Zj8#9"\?hTHQ*cFcgUmE"B4L=FJP0g[[A\2U5)Q]8+Nh)cYr"92d-i^'SL\R#D0+b'=/h_4%(fSVe(Yb4o+%r)iqn3/7NDOqTg;ME4.GLAbgcYC\Ye@HOZEd0f7Ak72E7d3s#^Q8&bSTIiWVa>Z><M6e)-73,WbDu:)[FQuLD3&/%<PD4GJDF7E;jlXp95hFQ:L/?"oRG>5ehMS2/Lk(qF8=-rdlF55*t'^MqqY]C:2TQD`\Vg"UdCgHVrsEl_9pkWD2sR'*_;K'4_r"0%3,aF.XsM*`0P6>FO?(`70KSlj0uBk>#Bo?l_h+5f46&LaaHD$7(j0=\7Np6$ZsM[LUldX!4g9CVG>&Y&+)l!1,Zc],=@2oNc@H+>%aBd]n!`r#[^Y_*,1,>[tfT`_cc1BPrG4B_>rWGaU;bN`Jqn1'h8jCT2,[%]oD(f50k-oi,5OPuFk/!Qt)gci5I`F-h.YaN]5'Rd#%?MO[%)[!a\PD.7QcWb`:ip]r/F(,rD[I$3q$\dj<D8A$![I7(tB+Sm"Ec$6Foh.7,rMf:*"?MaC;MKB=<@@HeTSqRZdnR$(>#r_R%+Hb"BD'Xl'LQs0.B&t(ncf-.3g`jA%-VmPac5],9Q9;/mkZu1'Z0T<?j6oS)_[F&AAg?*6j;L0rGTP4=0Mu[7pdJ]UCU8H7@_c*m%?$s-6+N1M15C4IlSj*0RILB:(ka!4TV-@nPCnSD-^)k5J`P4ic0d'-]$.BXK&^GYWaSXca!O$I,O"[IW1S;gK\.MKTPim[KE][B'%GR(3Ap3HN4+f^HS;<P1IgR"jA`6Md?_(qqkqD_kr(V*D0+n6%?).+2\MQc,N'ZL2b\/5t:=S70D)d7QO(W/*.6(15&]#Ua<"thc9%<;99@%-;jcrLi(aQ_,(ke504A"5atD`<'T=#(8gdM`qFGYdlGIJS(/=).#3Z."PupoGL?5:6n.$9);5rF!3#aAq]doKfDc#"I`39%B2Y.n#rJEQc_M1$d#=,Oj%Jp!9qW@MI>7GA;$+ujkqf<W#rJEQc_N<f'50j,T0_d#4Fq+&HfuL$_p6*tVdi]AIPAC/4Ln8C@_lo%%rIk9(*0NaVoIX\F$/Q4`S^:p`98%dq>O^+3B3_>sH(d7WPND.t)a;qWU0A6a\,o.=icX!M6SX)#Kb1FhbP.]Q9u*#84Kmt-=//`V%(MDW&KfYS7R>]li@<Aa39c,nj?AkO1Cb8f^:4/-f;dTB=<Wuf_=Y5le'(EGVhFnTe@klDrGHS6;PLF!29l?;iY,4-YR\0Je0DC_I%V5Y"`"qBL]eVE_H=_=/!JR*Yoh,T$=2BRhRoCp]fje%=P1Y;P3CT3Ru#+_0CgPm#sOdX@&!-1s(p0-*6J)%'<eJa5)J#_n#SAtS#%oKW8WBr>O]8h7K5!"$Jsc`-8KXjO8ZhqGc`b?XnJOiffK2r!.tXjX=/)s-cXl"("R*Z\SS(":??J,>LQ(8`B@_Ahuh%c+(E0\+4.%Phq)n^\p6:\A]d!e"g\0/O`?4*^%jHCStKSe>eLM\ack<mB,)53+MEr8,hNJc)G&/gFpJ&f[kTA7-AnG'unsD_p=O2P_7p@a\GJh%gX$?DrbG,\UqhIkdo84"YG%AINX]OPKYQIV7Fhpk88$7MAOB8^XK#0ECK9!LBO/(h.ENg2gOJ/%55apU5_#]>oMPJaQ]uq">hkpK%'\U]5Z=0Yt<&8.h3^*RTk=f%0(e?U7MPB5adprGG;[e2D0EY6J055H%dPNO]8L^[(dreRnR$Q3?*=+CY07[.b__;7ENdhnOo9ob;%Ek3U`d(,aS/IeRf83+ip`8HS*;q3n(65*FC8JYNE3?<iCJ>ULDS?0SL<G8,EqmOIM;fet=kl`eRQoRJI=tW&s_m91OfoQ[+4U+jP%S7H?u\d5U7/"OAPg*Qi.a4Leo8MpdJC8RCOUi;d&%)X2]2ILj8Q[jBf7S(+/6Ro':fW&CQ[;gJL:@B&-9]7e(8P2a_Cme!`=1%TC%^n=n1BDl&3T%5/+ci@%NU]K:RVEkbd7GMTL:0%C>KbV@>`?:No)$Y4p!s.>u1r(Ae1g,FL9+54m&qd,@Fm_LE.>0\`$EYkPAEl[:%_^5F1>u@-$(eDcJVL`T7[M5"c=&o?I!lW//2NaO1""Yq+s#p]b,TGU)C^sjJBt=<(lN`6F!Vmi^D,W.q@K@VaQ=*X-QnQ`MdU3kK%$-8E/!YF%LD1H:[6ad.h-)Fdc::G(m_s.5S"WOJa@B+&'FN%:+msk\2N$V4b20IORgYrlH9fR+[6tHN3.RN&qg)L/m0S(!V_\QIU%Y]f1m66/BLKdbS>E.QkEOWG'G>.Oa:Pal8fN-ln'VC=b=9/UBF&*E45653!l#bn7%HV_%gI4g2dB-9qF>$8/NkQq_=c'&U5.'bWt%)+Q!![M?5-e\F<J#%\]0\;LtZ"X^U";5mr1E2XLG2$r0OUp.0M"385P;IrG_-Oa=fJ5H<#nWS2G^^T"Hi6cZJAcc`NPc"\@%eJ-a%Jk3snQV=&'9rD].0XukU@KMTg9Ul7t#-<.Xa@J'p=fMY\:I\pr&67*lH4BSg!.$ntVSTPL_G1/qT4&s4B:R(r+Dh0C8AO>?<Z4fK%`HjIc5ai3m_]/6>#D6<Hi!a$i^gL])BE064D(%;ti-W8u,g@$,flG@\Q3@g'GW.p)9@5^%hQpL"a'6Br+dUH$ZCMZIa3u;AH]g#*%$6cuk$f_O)Dgaed@0%OU'a"(?+p%`;iR;u2#fihP%#d/t[kfoJ:u1Bjh*2kP7^d/BQN8;X!VH^!KRcL5/Wbl<(d+PP&=;lKLeF>)%&:nj-U'="!n8-o.AlQb0ELrOp<C!EiE&",f.U^O;`!j^i?o4l3AI.@g<(G(R9Q>:W$5rcd%_*`H&7FE-JrE!_XbnftYr+.D7"?Ll%3674:#Z-Ac\2$O(GVVa=\VsF>OShpT?'I!%5L]AZ?+@q_!FO3=:V7fJ'h]:[M[Ja3AVr60!N@>;MGLfSd"<qGV$k(LiYgUBTIa3&%,YAjZ#YcU:j\8#Al;]E+=OKSPTO,F!_$('1@(eboJhTtO3N_50CT>@YL(I:GI,Y<<\o!m@]I7a!*T$1>(E^R-0*9AN?A)u;RpEj]%&B7e]GX7]+$DlCt"TE%K>eD1IEJJ$J#!n\l#U0Hr#--pZLuE%+,)4Gn>FH[DJ7Y+V.Ynqk(Pr(u+pM%KgX1FS&`^\1&`^^?PKk=(%2aFLp1Ai=#@'V,9,">V#qW0FR:o!4oM(B!6.q2$j,=DEj%YDaf5`tWUONS7;VNPsG[Sfe%'JUfM'ep]jMAUm-UfDXj?Ub,ionsYh%N'p(Q>G3/p6kLXG%@X;(`5jR+o3*RU>:AqHXW]_p_KZE$@(%6($6YW[M;rR]?_7U6=9+.cg&gsZie_stT.gN!'d$1$(mrs-[kip.%BQrJ8U!]Wk+pK/>*E#W<B_5\.,.Y3MJJ4:RnHdHp#U6-AR%T69i;gM+`Ma9FP^qS<$8A\*iHW4RiXf31Ld_Fp6s+E@FC:AY]MK+_%"VM7q$^>@Y=N!tm$#!B?!/aWrKci&d]k0nI>liEZ,n$+\g+3^A[EqeR"op&lfHihFGlT=*6h@d-KIF&X75OiQc*VWV4V&l4\/9`M%W^Z'+*$/b..,0HkH_C,$.OmDa.gm'l;dfV2d<3VD"TlOTh:G3W>b-!?[YDr5L(=MNcA7Oj!\BeG/50<%\B>Oo$jkRMlqETd$6YqJ%j.[4Li0l`&,LhHZ9@t%+9>`U=mb')[<$5ME:'"$UcNup3<FP5ldsrJN_C/2*(>2Pe4c8e1*mqM0QS^50CRjj6QqRD[`&T"I0bF/t%5sgs9ke_?"MfFe'0%k9Q9]t=X9N=fV+)f(<ZRB)pJ.P:.ClqTa*TaCghWfj3=cO$P0I?h_0ODJC/rQJBW4"646;D0"/!grU502uR%o3G,A]Tl.c?:U[fbHfT\3ul%0E<\[&SFNqG3/"J1KJ=H38%,CRfE@!Xr`j7@bS,J$/+bBkJnC)1`mSCiArf'rG.9Ea@K8)$Q]hH3%1=Cu>=Bl?W8]l[1AEQ9=fBqb)Fl^+pk[arM&JQ=-o]^<s8<a_eGUjocA-.l=LB;m=.Tn$qcsYH0n8Zod_SNJH`#(D46)[?T;F.Jt%+jMA'4Vq^\6>XQ4MIE6iJ6kDVecJ0=$t-n0SeiF>;p_HS"ZlKfct/kcN3aK*$jJK7IalI_$?OPpq'NWnTi28Y5DR#e,aC2N%gK$N%MutOLG&$?eYmCPnmf<Mg<KfdhmV%%d66cS3:JFcd,>1O,(EfSKc7=\)i+j\9apc]/'kC2HDR%Fh)Gn%;&3u>oD3b7:VONH31RGn#%VH/G/UuAH[G<qCRh$L+aQn$;Y7[g>3"keX:,XR%8D+S_R@k^t)j]h(#j<DNRq'(cS(k;V('l4\TVBOS2'k)6tOc(P^joC7jZ6kr2%"kj'D\Y+(#%M](Z'X>R#%0Ok&=n%%%Q36kJa"M?7'V^_2)>;@;iLFqE"tQqq5Or2I@]Ftk!Y#E48*^q(#1e^NK<>n49i*NS6[$ON%;)Np'JQrX!*oet2cs&ehTYl%B\VE]YL*/b.eYO/MaETDk#Ld-temq:/L6]X$T[-lo'Fk`,m'Y7mLL,Pd.-L`.odNEs-CUoUdK$)A%kd>q^9ZEk=_G3"E^e@GA90!Dd2?mq#_l<jE,ig2#=V(oqLZ!OCBg]q0fS]($M4@o#(kd:q!.j+]4@*g3T+CcSnQ[8+OsPi2KsV@#%E>Hd<@kchP[LV%\&>DT$&#d>f2X&Bg0gL#\nSIC<>'Oe%<e+Rcfs\p[",rKbp;!pJ`>3QM:BBVK702C%GT$2W9N[q4J2#ms$5XH`%!Sc5a!_#QhW$]]^e,di#`f-iPaG=TeBgqS#+c:.5F9WV[B.K_%J.QbPGk08fEMTT7F*%WQ?'[pM!?n?%f,8P!->p<>$6;X*fFd%3%=(DfWjV^g8`te8&as>1&""[S3kAW7W/7cT`P:^;bL=!JIU$Pj6=i,.Am;uTfjCOE=6W$Rd=p)GB1?oF:@o*d@7^J4_fp^Pc#Q$oT%70l`#CBW(:L!e7gJRKn>k;MV?FGA/="O2?+M7K/[R"bg3Sb>?['j(k;D5mZ16GmLEDNre09aYUZOtD7c6;9XKJX-P(fH>4b;77YO%NZ#8,Gll4jU&rqERB$A<%?8Ak1!$3=@?a&#!&e[>'ha4QE$TIE+RgFMZE5'T/$t`bhPTRgBphpsnt%)PQXnf4J1274;CM+T>G:7M%%8MFuRM:MXO%1'o(I9/U%$_:#bNQ;8#V^"O+I7u)i^2;Iai,U6U*IrefoiEK&e'W9-7)<o$,`EV8h>XpWj5B!VX(a"OEX6F1?lS6%(s![#<G$VOFb1VV1*e]*I1Saj_XJ]/La;nU0HH-[KZN@8!IuK^lo!&+/T;m"2,_&6XZVE@+i67XR=O`h3/\Ue"g-"*aM<*.3=#Yb%WA2'%l)!KU3V'Y2pbOJUVFD8e?34GlXOmaXV2_$7&#Q%?WDG*NG(_ou(Z)J#@'<-;*b!nrFW?mt\R[4V5iVjl/^;s.&f3N!))Z!>%Q#O)E3`/.%MSYa3eOhpdSHBSnL5A;A1Dd=s!Gu)NKJnceJXItd<Xth?Ga;fq&C@Y'<VB9Lk^Q,lF[$/CZ3:SZ]e"O<0#Tc?Wb.'h%d&AW(AiVHhFSn#G2o?@$gYroHK@(ZQKQ%o)Q(_8\O[FbID<N$tZV:Gm>/bRO&JJ@Bc<D??oPK`M5Ucn\@1*e4KHH!QCt&85&rt>W%1n;'8M,/e,$EBl(C<`^,L4p3JN#%C-8#H7=aMXE&!!-eZCM,c[nJGc!Ku"]'*(hEj;62e!d?tT>)baZef-D/$/qgq"9ZV#2/qeH0%*YJko8?09Y-ZJ@\p,V;Tk<qGh1i;YA_Y8RQ%F*m5",^SW'>k\mBQJY=.8%$"XS=K'.M%Fr\V:29&dm8F,",m%00$KR-Bjk^[5-+f%U8r[=5)<_=pg@Wi;GUiB]Da=6:g?S2EcH5Z\!!.Fk'=LVjpk][+!iC&5X!=*eI3-&W#T"%1N\ZkME&`)6n]?X.NL1/!-#SU*5]Bo%r>I1I%H,SpAfad[L&kH(@oZJ0%<h:fOD/E^82@NNJ.!1qJ9(r+KLnT^CBLGl/?DW9Xh\IaA6iiO@AHX2EM]\<)=QPu@r&Yc<4Z0:%Qu4AP7],.A1!oWN&>4.$H-Lsr;S_Ll/37Nc!]'"P!`<AAPGnmC=[="_(?08*n`Lb&Ek5::JE]hubA!b5+`6'JWi)`?;(KgJ=uq8=%(bAfd*Gk9DM%FlV,0[jX,D;Ga,181As!:hA@2!$"D89q`TLdGK>u6X]'CC.<>$R&)l"il[IF.8qlEaGU7OZ&PF>R'MROj/T0MjQ`%EOmVE*-VeqRUU.86D+_0[C]rXh^Pj=LEXT8dD*S'fTn',()h-P8kC`l5Tpe>7/I]0!%O'7)CDbEq.Ic0%<P+6"Fu,7i7S5Z9Tn&"%J='n&)6aWC'[)keL-"(PL27VNWbc'8JKnu%r#f>ICY'\!]R+riB7b3DNXl;i&H]V#nH.&jcqsr736k'5#=+R),Ydr!/62<5,6Q"`%d=(JWnh,ij9n^$`,JkEQ#m-!ST:D*so&7[oLK8tu:p-G;$<A]l_F]j:>s]JVS.37K-mW7P*AcFanW8;GA'2B44B0d/++Mni>ZNFb%js%b*mim_g?3i8Z++He7:ULWR55?22<cGRqL_:gI+Ar)M"(8Q+8&:$k#jVTLJK?Ke7$j:Hc!b!+k\0m(:PrS#a!O,T$6#E[99Vn\%L05td`rp.Q_uj.p@7[NkC`mg@]!e<7P!cN^"AkNm%ZV3s6Xl3C=bVQ32ArV4k&ea[("j"L5eM?:lDe^(;Za9Hn1^f$X'MI$#8CI4%i2AnsA-AX",`$PHCaJ\;*K#IG+E#\o_q_1G8flFo_A4W'>)XT11_<K_FKlSM"&4^tX5m<gI4ba>'4Pe&(0[Dt8D,M":Pa93^ZFJV%bU0HB[fRRF<J63U!5:Jp`)$F6fP3,K$p$:X0ggd,-;1@hi&\Y-[DEQop6=lNleGRX+m>mjf+.N9_18S<3_9]+QTdG;d#^_I'*3+:%#O$]KqcJH&M6>/lJn_6[Q=r2=blG\$'(#Z(1'*boj[*>ZL;^tR"KN2pKikuHOW>AV)c0IaAKq=/8k07E%6QVMa&_"2*YQ\-M$Xgl%K=>kaE!RWA>9n?!g5c3V-$=`_E@16:qB-RD(]i\q&9Q3>>n/T7VLmhQ;aJlCR8Y.1R1;"f+N0Eo+6<N^79t0hOOo@6oI`Bgm>3O*%(^s$b`d8tA10$T84['%QOZ,uN:T0oNgfM\)5&HhoVbiSm1f;:ZA[D;+'i]@Bo\hj9.^X9XC;<@S=Y)%+bbc'!+a[-V07p>\ekAX<%n/aV"A/:EV<5^^e#?f9K70u:E1El'b7k7"c`)`nE-a(\t1]e&I=b_Ngq3m!Krear^_E;d6:Db[VD[/WPT*3UkWQBi;7'S?+'s`su%$Z09i%-$Y6ZDCBXY+q[1dYpKVAH=1sF_HF.2qRs=ZJs]lYUc2*+("Dk"CcZ73!W:)dK7@X-i(/dMaJs;/$-?Cn/1gA>?!uP#%nh)%DI>_a%!Dl1VaXGsQ7,'[MB%4F/qYl-%`;"qNId*8h6R?JCZ05Mg^=.AYqW`H2*t(Re*GDRB3HJ^-+$8lb(HBA:g@$g4n3e&=,3IP%A8b/F'\3\URpsUuWu.\+4BlaG*^j*cLH/#Y/4VI@X2.VlRj@4#=`[0lCZM5F>;D!'-$q=aa_jUrg;10on3iQ_%@-)]EL:CWEen5g%b/e2:hnk@]J:Z,upo.dt%5W[4/Rscp,5^q`5lGo,"'hU"7^n1&."8I\r5eLLSH.+b<V*[T*W.\;=oc'iVZ:2[.0/"Gj49d@;_U?R%:iSfj?7UkO0D\Ql<5`lcD@jZAeYcJA)Y:oS4XmHJ7iY;k#I^dkXjAk<$->IsLq>b]`c-Gk8ZJ^2_g%=kAcgq<$L:#l"]h.-WPZ)7%-iu6YVcQNas%&0P`:Re9B500qRn.3</&(?mKZSu,2Xu7."QoghVhkf@4qeIf"o192)rm,eMcY`)8SDk=WY"XhQJogX@%0EGqXT4L%!P4cZcXM87L.Y/p`eQuLWp5Z8H(2o[J^1,A6;EIMil:aQbdF+WXn1n"S:MmHgZ*W5M=FV!)1$9^O'%*LSO_+7/!'&1Sn&70aZ]k4%@CBm,NBeOgR]dqH_NuXe(_Qg8-"%]ico'qR$J<9r;G@e/M>Y5r"l0\4P%+7XJoE<I-&-DNnplR*5KpuEdC1D5MoYWUP2[%>l9'k6%c0F>i-s&-__6TH<2o+VYAdd1bVGl<BJM@Q`N=*!\Yq%2%fp(`[:u''R:p32rK=[m]E3:eb3hQ]aeNlk=`_[^TB#%_N/<$K9iY3U^%fn,nO5uMn"RDL9b/?r.aW2)+BTK-Fh[uG:h2G[HG!&0FF>O3BJ&lS_o*9&<X@+\N1"@"1.m1%*9km.FaY1o8XYqR#p=LJauGeZ?N%Ag@";7ggZ4;aH*&I1lXARmdIB*tKU4Q6Nh7!5LEYcC6QdA;P1?5UVHo\NJ_72\uQS<q9CFa+]\r6s$of.6"t\/1d_6k@1-o;AQp*%,/@?D#bk=o1JS]kNkAR,G8A2l`GACEcahR7`;2'ErgQUI,%#=577C+76\Vm@$b^[0gM2[a@BC8iDg7A`_LuUO$%1L#lQ)i&&Z1So%O6d17+*]gUa"/O+&=k&S`^7J*q,'^l>+8!=N.mB+/$5#<,]b'!GL!^sdbS@R='FUoPb"HV)%-G;:n_8oONMGHBhg_/;e;k_"&CcZ%==j#60Bn]LM03elG;ogIA2.Uk>)U6L>--+_c;W'M69hEMEMEpXCJ'oN1I-AO_Sr$*@S34CnjX(H5]hW?-q&SiHf]em<onmGobj`V%BTMCVI\/+2*PejhLjg.N?d(n(8Jk.X0u]q#FIfCsi.qEoL"Sh@,QeKs8MH3f&#uMb;;qRo9d5DENRj)l$(+"3-tQ=rm,?m$(OI:s%.;OqV5^T0!Mo?9)c8NKO,XlA!'qbkXUhJI5*="`Y/42aF'.s*W!1KB<V2]3-jtQo$P=%$b#:1Ff(Ft_r-#"dFd=&n-4M!%OOd($C%!C@OEZpAW]GkRBee/u1qHNanh@AtjZI<DF4p4j,"Z6%c_5"7*Q!t%s9DWRWJ5q)o'>DUBL*5HSAYl<7*E)GhM>_S4@R-[)AQ74/+%(@W>';GPdHKd84'l^jK^W>V-Q9@3Lsep%cW6iWZ0I&6*,fG.(]7lt!15:C_M;n,^W!Z]Hh"He"j_%%79EnE=>n$_8\E*,4lZo%lY%@035M6u:8kX@bZZK$eC%&2s;j98j6daA00kk(K`oMPSi.O-1'!'7N%/&KnGkFO=9tJ.r_u6dpfM*8-JXZ&EZg7FO6i<D6NC%<70m%0?s%<P=C(O)-&K'!J(jfduOW0^^-8QW?/J:h[VYl!,b#G+?8MP`Tm.Z&6?oI'?cr*RtXE78X#u4lHY%tf3*dk'q"oWIQ2h_,Ndeh%!;rVnOG>B;A.&dYR0904AMeCD,[NFA$R:tAE24"'$-YL$E3(q@9lPPkY,]Da^CGph1`+"\/*FBWH%D4MS+.,kBOYS1>=RT6ABPfF%dsX,:Q>)2P,Vhu:?Si"aJ`I>`C&sS/:uJ<_b]jj&?K?opQl2tc"jW^9XL[%/2lBMo(8G=UR?\ba"&m9Khq]gakFe4W'bQZgFMf!-%E*O\=RoU5C.#I6``FuNpk:2<=On^s`P_Op;E[::l.tPJiIJlO7i'FJC'ao7_bKt[[1tiM"00.&\\WA*Fp,RH]AD%_i^lpkjOmq6<%&U=A*]Ro^4arhDCamm>+B<X].&2L8_YcKVo9>qV\4ht#`Ts<5aLM3X$.9$hp@9AR\dL;>;R:!d"Ni0\?F9:=7,dG_26Gp(XB<6uc%N,SqbOJ9"nQ6cAXM1Sa%DT7UQ^9E3]#-h02BI0FG`cMIfeQ2nb&'ON`+S[!)902T6ek0raIaf#XO=TNdd@AZO&9n`a/V`:KE`sp9%jc1?iKMr"5nOX<\H8Kah3K(3t#9Nr7mc=:J/5[L;)j4tM:`J4*S=#M">65@AFXt9^.TM#N9T7%Il2h>!(nUrOL/fD,hdE/HTi_dh%@<nmZ;^IhdCL'g0ZiIpWFP.?N\l8*$&`,lR!-!Re?lf_nDabH=6MoQV`,b]jLh8VI]WF/72`8bbS7+lB6C`'89WV[WUq#NTWa\k_%!IBV3\'PenLq!P5FHgZAAIqn'k<_QFo2bWh+(mQ*kj^rh)Dm3T*14UWKRl;.QJnk#pc0H'fr!q`+f@%B0s?in3OKs)C0Lfp<)rSk%N)Wq[OOlsC8dBT"QK'g\@pte)Dg[7r=?Z,9,m*ki6l88k5U=UZGo2\u@tojY"B=@h'K9"6>%'D;ENucCOkh2s@I)8Dj;&`^rd(1A%njl#8J"D]p]WV`h`5EfO_0HTY/B&,8@0S?aQf8g>$n=&A1LQhB_Q7#7F7G;<\IaKDK2Pd5Om3k^q@U`u;"]$@aKcLaAURDs!(&Nb%jE0PbI4;I#Muk=^/#65\VnNJ\@F.tSW19<>a;pTX^.1X%o9rRR/j_hu0qYG);@(#`7Dg:o1&6t%>*Gt<O:]bq72E"o\k'QVF(Efk%;8B;.;rJj$0W%a8VC&s2KjC-On3BKr6TC?f0LfW@2b3e<N&hF*_pUL6#Zk\%b,utVKpBk!>B)kYK&Ie?FirO]p6/YDY:FjSa=t4n%;)P7T$kn!808DkcOXNCh`YR;FgeXK++ISVOK_SOR0*_8VE123\Z[h!QA7WWTn1uGBQVS3(0J8;jE6U_q!.O#4U\3g`VR1(S:a'bc%9!Ng$#RLKJ0'Ghr$jdKH0%4o$<5;nO#h<O<!W&UX/0Sa[k&tCp,P"+DJ^;glTq+,dYHu"G/&#$,paIZAb/AFd1E6!K^2SD>*8So_%4c$UiTp`MBljP^P70MRn(JL,[-32GI6dC'tq5>-/.M6%%$h>mA\)ZfFHL"cb@_gE_4C-2/;_VG6;h1h['4$h(NoW_KRD9\Wfr7r6%0`oBZk(_W-UWO*C&6g\*_$ZM@7(a*J7>/cK'uDs%;Y#":'CdC\eQ,V)J3FWsK?CWtJ]k!D)[KEu*(J:^#p"oK&s,'UAIR%53CmT3%%Wqe!3N#AtTTVtj)H:,+aD5X!h>o<a9QL%^$"=YnVJ`[q5]18ZR080\"OV(GWf\">ks62';\c#uH'C>r*;YU*+;uE37V(gM=Mh%2%hJ_6X*S2cf:U)J(&!9s3'*k3='I.;D&afg7L[/'dJ/H1m!Y82&oM:?-#d%@0,,W^sYmNgbe`fD&\g]YaGUr\G#A*1F4e[9OqhN(M%R]*)-2H$&9KK!fZnJ3L((^BI`:st5V-(,aXWXkFU"&fpRBo^F32?b>9PS>BZSW%h2W)934+*CA4fG#OJ=tL%@Nbg]tjq1,f[18'^%EJbAo0%k6+9:Zgf<Q$Hb6g>jl1$E[;HtJb&Xj_Tp4I+2EIJ/]?XOnoEn0l\GaQaIl::/9)IcPH!\'Y;_fHL,_M?h'Q$`U3FIOG><%JH]U7Rf[1tOX-`C&=TPt151MT&-_*))#<,%&C]k%LA*eI5H#Ra@SD;3BZ3bg?p0a)I/NC;jkmYiP_pF4:0X+"65:u5-#PQ$*4)5A%C-W]5=q?s-O9A!%,=Y4lBjqbL&Jpcl70')i%WQ/%Ro7,*HOO`Bq8:Mc(6)0bfEG]"KVJ,,Oi(i>,tdZJM$7Z/(\HEpNk=37"k?sa%(Ipe6[&"^.)iu3YT<8">>n6m/lc%I)R-\8b]iBf(MHE4LM*Af=[8GSC5[DT<WfnpWGK3$iLoRn1$8('g-/Coo!1'P%aaf:.QW=6F%6Ve]=%q*/N6rsNRNlsgY.$IV0+:O3U&/3%Oqs!=!a,`(2`'[670K4,%'@sUZeABEhMOTe>@o6j)WO"PebuDYikoml:GHM:=d[@[F%:.[JLQ6;V56aB*N-&'']bVL#<U"Wm8&1U`m+SaV<;Tf31`-fS%_/e]MkpFD"3'_!(On=qE_MFZU)ihOi!1)d9!\1]8<`A=lEL2a*%>SuOud"'A/K>nOnnQV?c.iV;X^^jJ?=,"^7[3DiY,kA+J!")E)Yc/#1URRfc0=rA!q(%JaUQ.3DK*l+`/&Km:^UE!A=-FoA%XWeR%L\aA',2D4;CIUk0W$</k:mMRC'K!RXnaV,Vcp\iu/O==D>aHHC=_BGP6(d!'AOa[^?e/OFn,C/(cJ;QdO2(lQY#l(qAbXl^gVh'f%JRShOpKm@2%<KYN>\VN[^l^cYnP[L%'Hha%Y5)#9\V*nM3AAC$!5D.)pO,Y!m.d*H-(V/mCgT=3gj[SC_BaL7aAU2Vp0$3!S-UAS%*)cp9_X5a<b3%1ZQE4r>XE,MCM7oA-#SGf.7"rQ[;S89']@_'e[YTc!8G;iWPT_ke))no*rk7KMXX^jk[oC&PK=N:&hds__+T+bN%$25H'oaTOnBq2C\q&p$UqSo#9\QZKJOU&e1WBL-V;Mbn*kI3t4VuWBj#[2k2$14X@)4g]U'&A)A+j.u4$52nX,E0cfZm<uDMVRPg%X4t3dU@%doN^/RXP.)^/Ld^)O5(tc-6a&\7-[!dl?MEc6^cQ$RmRGQ7kC#PXPkaQN1(HT?i9WWtl&jJEc.?'l$]IsO<lIo82(NWe%>iR\ah;!s)I[T'AcS^6',EeM@Q*S^6=A<!2$gs+$=akh5/sM.-#UDJ-Qq)8dra\>!H"h_[eON=A3=(5t;bP-UYI>Z_<6Bt%19l^.%4c=,66GQ6TN&5q!ICDh2pnME<opa>%>M#[J#SD-6PY;EWXPdD64X*ft"Ag\+&'OmI*GO:ASL"OE0*s`\9iu9T5ePm%fAGHa^j]q7%LNUEDi5:!;i\^#R-%J*QNDRGZD>YA^r?[P_C4V2*a\/k,'W5h6B.7F7[\U'Nk:,GnJ4GOXQC?4'QgsC.K\pIsk1'f26FTG'$YL"K%^8R9W&Ghl"'r-9QPCO1Rk3IEq.[0(:[/r!BQ2/u%;\IusAMFNWKEDmp#&6AKNFb%RH*ng&,#gMJ&b^#VDO:W)ofi`X(3!m>5u'-.%o^jqU"UXuI\3QLc_j-A#UaF#"J+-l%p>E8"VPrE$dlteF"8`#E5b?$<K^-Ek/'hcBfjE%98)DU#p3*AoH\Z(`ou,@67n2*fe6_aZ%k"LstDKhI+L$H`[!V3V4k%l?j3]%08I1&:F9fGk)@tfXXLA1G/lkXIW,&+\Lcnb)LcOIKEs$Yq7_[(U/?!.hrBn8L#+IRA(P0&ki%o>a-i1<X^a?eQeQ><kR]a]mi4r@R(I6R9X#h%T7;pboriL`^iMHcB9;Y3SEjUbKT5?=:tl)pr*'X2MT>&%eD+GeWg\!^p+8Zl=M!%"3\1B9+i=matt/uMmdYd>$6<^@s"+ZqB"J@I15PS!odWnkrkpjR,9&\UdgB0N!7)B:F=$mNJ.8Zl92hHJ%:,$nk"LFCa%SA5>R[`%hj4$ebV6!E0<,b?118_I$B_FUFnoX2'$t?5>g\tdaDn4],RnSQAIjWRl&WX`6RUQ7Nb6DRj\dbg,#@-$aE]+RTJ#k=$mZ[[WP0,W%])0]KIC0/B-1ioVD,"c$9VhSm^*"\%B%'E&kP\`J+=Z`XSaArW4^ORd6.g?t)><GbeC-R0b)cj"H],6i+=CURUnobu87]?T`&cWF%20)?30*a8<=!fSN'PrVA5sWAI<B@1FRWsXG2X'>5\+#jHh(BA15`tu(9;J2+8"]1CG?Gt<L]f,0DuDApYZtmJWt^N26T5?;/=kZp%bmFsnNB(trGM*Bl3<C%*CWp!>W:as5aHNrTe;mYP5$C(@gC0f-]b%kGQjJs+`^5+gU%Lo3*3`*e4[_q54bW'#Np6#I#`38H8;,?C%geS9i/gX?oM)!e&L'blp*%$mn+<bSC1H)(d_P&J+(5N8bb-1m5[=fVDCcE]_V@+D>dJJ3ZH*L?QKEMNkV!k30M2LLKU=\T"oi%Y'%+c?p5hh4B6Lkp_>aSKh2nC+CZ\lU[\JH)8?/R^;=^Oqj]afu,<hsu%&JG9dH^?@;1cnY$\c+0"]@kp>n*Se%f/)^Oh,Ua\M=u:.@%D[_F/R:5>+`rqro[n+24.ceu0R/J0P)qqP%Ou&7Y/R%Z=@X,'$3NdD=Jt0KpDifq9s7gd('d-@D,7T*E2aW[tY9+B/jJ!=RBGIQb%r)$Po7Dofik8">'o_5gG'lPL;!.'ll;n72d&oV3!J+$E-CWfGocb?Kh`3V=-b,U-D&7EFU`:sJ5@7C6O$^",rn>W4`T@N?"A4Gij%@;t0K!cU\nb#Ottn3Wj^9'85D?R+-TP%9mB[@GNc4BqV<jmb[erI!o]8=H%A/Ipnf$ZVk9I/6Yb+fVY860BpX=D:JPdg$L_mjqId%95O(\Y$*S@lr)nk6g_ZhZ1##\kkj/7e]QdT*u*JM)SG3@q(q9h>A),7_%Mp4*$X_/d^b^g*#0eB/p8h=-&Cl:>DgqH7QDOhiu<*>%;;,Fr68KcHaWX7$J`#$'8^ke_]N_r%61f4+g1#b!7*g4uNdd6.#LU/Jm_2B8V4Xk:q%$Z@[N*\)Ak*m85*RMH63sap(!c^5q^LQ%%J]f.RDBFYZ)LdE.P0H8',]rj?.J\o$9CsA-(NPZRXb36!=_F9T84;bnrsJO6Dm52E**7>2="nnTV7;oC1>`,*K"=AC"uNtO8SOOT%PH;,-4jLZFK,'S;+2Lo"PD$J:deB^k_XCU&hT2%Nad^J#&)j2ADkt;-!mWA8df+1tK9Wf#75(nu$,B)NKqePM2t\t8@VlT;$Q(=L%?Kps?<m<`-)PG4fF\>9@?k2\c84P1,NKm.f':'UM\NK=n*,h6e&"kTmX;i62PN:M#KJS1-_mG$(SZA)$hCp:RQhCon,,&-NOX5Nl%TB*OPOGlm'94X32\K#cS+:+i5%;YWu+>bT1AI7N21F"/eo$RV*%e^Gr6ZEFDHAKY@#D%c!E'IbPJQL"f][/++_+?Ie\5a'bH,]6Z%G+Y*jge^F95Zp-LVuhL[4$ZXsGUD8X=sDCqK`m<u?CH&E!jrN+=W-Jg,l2[L`f0RmCs@Jc:+IZOi%5,DDV\,n6:Fo<_^3J3Q%=H&%AD0rMP=S0ID@($m##;YZBN5t`&1>8X@t0X&d^U!Y[W$Y$/KZ/f;c*&1=$'G]Y_Vjc?85($a$-C/mGjRX#TG+AU*9DBJC&GO6oo;"%@O0,a8G1kI6F_5YQ5h)f+r2a^+]>#6&d>2)B^(VZClmR=LZ]IQAV`g.j'Sc&:ebXQihoMnL\,Ul?4`5iK%+>(pW4gnQ=tJr#Tj'g%BYO+Tf.LQU(hnIk=Lh'h>d@"LZjRNmHXTAkjB2g%IT]Wuk\(4$O^-p\^i\F@"/hu6aX=,JA=9j+<=g&jO33IhT!&8s@(tp,?%Opm%c4>/Vi]CL6%EDdkCWp[:EP7/$N[0[\=c(URbnD_%1#C@c:1cqK!#]?"V1#tX`Gp\PMaMmkKo;(`+4/H):>$B<!2K(*U>FdOF9;MR%d`nlW7SYqUD?E3Fh#MCqpt$8:&?PO$Nbq%S.Ki7X"2N@;i/VXS=A&#7*O>aI1?lC*YmgtcCA0CKm]mfS(\7isBLOj&'<:j6EGV?/%*4_FfFX]/k$T5.De/m38>0mpK?A6om"G6Dd"Ud;:UpBDH8@Bsg]D)oY$3\"P<%!O+XYk'#\)*G=lNhpsGK%Z<]2aG-o[IO*4<3W:%4Qekh.r5CIC9H``Pl<LGmmA+n1@!Pm\>8KVq'h0hgThZM>RY\6J_H/kK8C8+)18JZZW=O,eVpm2?I).I&jo(5(m,<dFAmApS)u"B%3Chk1jq2-6L8RXp%LgP1%We-B=DU$e,K^&:H;9'TXsaN1%dp=[IrGe%YhHa6P[j13*T\ESD-^8UTQb"b@Djfim5sb]U*5\+Sk6Ok%7Q/Lr-IO&>5n4M[2b!pOOQ2Qca<CQLb77qb3P\U@V=A_bK;qtbl-"&V3o`6<!@m<i0JD>J3JK4pYAc6b=6fM3d]*6^fld3.nsh#P%r$Z2siS>*XNq!hr7#cA#ZQ<cKK)E@A?afhJo2OV`Fe#^tVKdhm1-HCSHG($75%NqCRUp"'\%DJ_$7GXBa:Wto#aaq!^W;i!?K7O>%`f-P$*K^<'S[12+S*r58[u#b_bd!N*$?JHX`pG"pnJA@&+"[%L%a9X9I!Yha'S_HhML:dY,]q8=2BgOKKYn$-_g7b&KEM`oQ?"&9%,.O7ZT-fXrAW?ito\;2;f:`>0aE<P%\u`a]In>6-HHU-Ro0LUKM6iGM0D0JIZLl!aPYFVWnfYs*c!hLNHA/Y-mNVQ-E%AGHbP<F5%Z)RPAUEg&da4[N=N5Kr5HqX2-SMH0+SojWgFq@?s(dA3<lFe0Pd0@_&G<Y-l'[k52@N:Q0OYMi.S/nT1d*gA$i?M\d)+r2.!qLkl%<d?iFd9:ZcZoo(XE4[GlTjr/!aMBl;mpK24Nm0lP'/2a-qib&s%UUj2lQ\:mTc!#pC^u)2L[[>c4!L6_*U2?XHaG$`a7gUEHV*4I%4_6aHp/LI$'>9K7jZ$W!RbR5\_V>CZ>/05$]9`9?0)!/%We1TPNIuh!eFYs&M[e&+XAcDWP!c+o!!kIfW62SIFrL8Dp<%B>mWN.<%5D,moKZ4Eb;bSUP!CB]&]X(:6/[*]E#6s[&7I,2'CMcZ:K&!(8EV^%JY_^K7@VTQRq%Uh)[jYRA,j@5Eh#eP/!0HM&^ts=lYE*7S%ht5)9LK^21CQUu>T<A8bS?9dO*tn[A_qe[8*1@>AVL)KRU6tnG:s0iu8XoN\8a&Yn^F\tS<.ss]LB9t+]q3gB7m/'C9F//o)-`tF%1:?Y18BUJ56f<V;jg@JFi&SgQ<b1M'Wj<qsi%-Jd]^?&I,*?\d:_6'MA<-O$I?K.a$&#o24AL_k(MFSOhQTG:[fFb$6g-KQpm%>Q%Q,uTUWTE6OW,"[!9KEo_K*/fFY$%?<k#-_>j:i?W"00*Z1XI*%e#g+>g&n+\b2sZ[+iniiBj,MY`.b<DF\U&!n\VP1dXAPJl08"-%XO;oD`;9OQW`MAg"bX_(Gdh3j]VeF>08]nfF5O;84P0KK#h]#b[4-ZkN/JLWmH]5%9OMqeN02e6AnXBQG20a7;oq^Ugq<O&=?#[l%MOSgJNgoe/U%Gs"?0O?8c2hB_fUo).YmdnlkX&skp18FKK#YV"FQqcq:A5T>fO`o1lht(s!i<0a0dNOVYpELYQgtH+X&dGt:II/;%kRLH+Ii<dHKbG/AR7fb=DL>9"@Q3<Bb[OPWTlR*s</'][5m8e7m?+GAI7U0@0's5/Vp@_VS$."]@.\8tEj?_uBbr2'(E5\eU*tEU%mf%Wqoa3dQU7s^.T7::@GhX34D)_Lm7EBlSo>R7\!ULo-AO<-Y>$L6(X4Yp+&k?1h)kR<%R,VbdL>lE[RSoW^KlG'[+;s@LbE'U"%T-T1f;Eg274aFEi+N:QPpuW]9;)(Lu:8JNUTK1:\=BUGYE)s0*%acXcbh[NP6g28;L!<RS9QX.KW:+%eK9A//Gif_9ioY3\B19Yj%O)n@;-T#!i-Q;Zfa1,KN$R>cE2>:mPK:!LF]Na8+K?2A;Aj3dXGofRM3G-afeA/;Xh(_!7O5*Q4i!GjnS4T>';Hn[o1FRfD1+-UE%nQ*_-(H@OLiDM1PN$+f7]Hg#W]Nj.MCfS#?+%Z[9a\0M+IK(p1/[O<TjVl`%qCs:i_QtNMTHs?tD?[C@4Wfn_\Iao7k#rO$<.hAk%3rK_G%8O`MJJejb/lZp`j_+anR=:dslLkHNGFY<dr-f7]Yp9Ya5sW:"*@Q*J<;_h+0=Z4BgYF@V`7pHLW,T`g:!a&3q;q[qHtT?;%@[SLO7(3<pRn8mW:)Q^p^*Gg++>M[&')h7O7HrW#U$=*"$3KJ^I[^t8T?AC!U%0gE!,1k?]%;d<,3p'9S->Bi1+(O>1iD(Mdm^%@%A4X13'$M>cU\".?j9&^,3@64BU/^8cqM,U\0!UuXb1_K*rFcA#jk`di\#S:t=]X(EhbRDGm@-L0&%-7To/+W^Ar3*)17$`'Q".Fu%"*Z!JAj3*Rj8%Uu.@gfg'$tREj=sW-Cb-XOK(qLob/MdKR5D!-b<Q=f^V;&<Rlhrr32+Z:0:Ao0$ml<rpi=1_fHuMh'ifeNd=Ll#%PpJk%R4ek.nG6FQksrj'ln\1-#aoIpLCM;7Q<Y&Q*;Y04P0:/U0"KhGP0bD>Ca'B"8dcp8[?DLYJ)AQ^8`]OX+0\opB=U`3@6GBO%Ej]?%_SqqR`:^KMo.h=?6=3_X"1\Y#^?qJQ>ka\frr,>_DN=cD>$tJuOJA'WlD5?C9>\@'f+Q-3ON)X(dn7f1M5.un^3B=e&oUON%L[8%t^_"(bphcSnlN_3mEi)mT>=#;[)E:8!E5$AC<TnlU6&=E4&dkm;HSlP'H9D0J:$@lpK.bd@IB5ED$TU^[<-]WH(XCF*0TW6>%ije1p$K4=tH=pA7XjbGZ]OuAri`;%-:k:-p*gTBr^;!r<'DiB',Y>&$PTdeI1o#JMKW%5VNGaKT>f:K;1]h:I"XmIDnZ:JYM=a_h%m+"j<oQlt7$i"1e;:dX<!&'S'Aq@pDN3(lUjb*7C,1n3lLRUO2i%)*R!ZVZPQpVQ(p_&FQJ[W@?_iJ`qpIOZ@UN]V>:<D!(LZgL]%ee1PiU$HDO"$VqZpXS5$jE^OuFpd\0(F:,G0e3:'&^be)*J7!>,c?6:[[L_g_<%U4:NG^Nha#.O)cV]&-64XTge-*J.V5c2QFZ(\%d/%Rr^QOT`RmiPQ+fR.Q9T*=c%N#d53kf:3cu"n\/W\I\CU_Agm1P(MHZq9:0:hf[k[LMN5dNba%$_TN$rJ>EctI?10e\6HoalK-%Rd(@:m8R@UnKZus=.<[V5U`t:^q/k]U/lLD?"5::GVtJDXiReEG:Q0&J<$d"O(J075*X;&N8:7#jJ@q^g-ZtAnMe!sQO\r;:VQ;R%@YdBu^L_FgSI4_f>@Qj#"5ne.:f]l2^c]-/]`Lr-NY^GNILgu:,Ak[?2"*:!@TE`^&D7lcX\5nKel+u=ob:4C*<?#fEpBa$479>B%W&(-P6BLG1>T,-,J?6P[YQ@6]7`!GRL[MaUXob<Hb+Y<AM,%.I&nJW![]YM!dnE@>d60fp[\aC558fNkU'abpO2H;/DIYPH$^R*i%78$5.,3u3%M"E-sT3u-rEk6paMP?""3^eTGLi[:/UY*bs("?l0)N!uN5ohA0P02?O;'4ToT$U9<biGJ&H?ops*,`Sj:/;IEdp\j>%V0.fqU'$0c3_7lP?Yq?u@X8B_Q_#D$V#Yq+aOjZF(dQN?:Si.ah8_Q*W'*1Y!3;on^`)GMKgIiA9i/9q\K8B5;8V8fI'oqIM@X:J%lZ[-=R"DrIXbcCJZQ_HQU+6O5FKP)[-aB>&nFm][=Q3:HZ0Vms>YVj@Xb*,GCS4n='[T2m2/t9VX-W)-9Do!ZmV[enj@EV+V2,X3%SAh=O%b-[eo[)mT=H3AsStjEJ[.V^%gep5c@Zf5er#&,i&r"WAQBTij9JX<@9B07bA%.Qi)#>Q^Wc,5n9nFN[b%bc,!h'RlC]_n\%"H'$l'&gofXE;_7*A^hJc66>Zjrq'G#YC?)A,XgL`h?qGrp2Q5(&L"r!=fQ[%G+K3f28dK6k!dt0D4n(n,&D[C:t3F7iH*>6l50_%>M_bIeX(.[TJG#XXWZIk3(iiq\ZT7FMC%2CFKk47`?*dadmLFjb!TdC&l2t'@Ao)C=RW=C>,PV/c>$9`@VKP@d%7Cf^D';Ej:M6&%F`R*MB]G1VLItYsP=r:k?#g6<Q!ApC8Uf&)Th#7#>so/8MW>OUO^*K7,al96%QtFB*Q//;`\Bb2gsXUq!UcE-A#r2GC_(dSOYaO!%Hg$8!<.j;o(.J09ioc=[R+SN2Sc\5?Vhho%MV=/d-$1rURQU@LO.=o$KrYZMbR`kaU$qC1%:-1j.ttc\2>^PTpWV7R$5GV:m1rO>%h*Q$Gc.goI20.QVq\j2pEei@.Zpl1>AkOd)kZ+2O]3Lq`'9S30pg89OQ3=1mQV',R=h(aKpUmW_d!7s&,GTL?0ipDm^c'H;Q`0:<%55K#@(?s0dhTR9["@+5V1[OnZ`"*V"A*Ko!Komk*9Z1G9,8*KLcYhhIMLDk5iBIek"Am3'Z<JLII\0+7MtXdm<fkdmlY8Ai`7VZI%Ps_k&Psa\TKo&ss0NO<5Q#r81\[#97C4eL+lt)e>aHX0/@@\q$KZ[-b_#d<._EU(`n2Jb(lX3k"4V!c(LkB7Fp;-=]%#Nmk!k@r5%1&1V:OL0ii"XIU6bTI%rdc>_X9n'4eB\:?a,45_aGhr_P&-0.+ap<5Y1B]0j('6%_bB@:7=:gJ4.[,A23$a=&4ng%J(G]WEEH,Jo%r:XqVk4eGoFNO[!Ga7OF.3UP?WqiTK,hsb)lV1,CO]mNj25MqE(o%O"BsY4R8,#BdG:KdeaD$Z(;FF_CLc(pX2WO8:C/Fja#s@lJ%Q;h/Pk:%iVhUZJ*5i_'"TDNOj=,Ds<a]Jkd9;$>T*r>MX.URmJ7S+.">\[24pQee7cC>EkP0PpUGZtt?7[+mo6:V!0LoSVn/]du;%9UmGm_,m&IEDjV-LUUZ[g@=nb]1@CVeHGQ\X"LjkB*e'RRghsGFrZHg_7^UBlm]^jM=FQR!FEi^5\nH=160uD9oR6\n"Q$Co?4MC%-n!0Z.h1$uo&h0#hPDN$*iP*h#28([9uYOC/KIUIm]8bq,?I0qTHdV%INLHNHFA"^3eZgaH)O8qE4?EC>T`\1lpa`t4C!2fBY46R%@CQU5YhEED7!.E,olYWqD)g[Y=hoj&j-.HQqs1hD9]smPXJf+7q(OQ2s7/brf=]S5):%1r?6?C?a+nQk)A#9#N_tF/1$3h!iCcE6%T#=,2rc-.[(-:bERjGk:iT!<dhq=&m6E`#KH7YZGg=n,/,^U8\jR@.117?M(+#<\I;8!,dbdYm/[//j:6:h0(8F(f%k]_ndqf_uN%OI*-::Hs4uU'h%ZKM5\MrK+,l>*AR+GTVinmZCp=A3FEYJ9ruJH#9UJ>n5qc#aBtb>"^SYc&?j^;HoCB4Joh-=%q8KTJF7td?a.,%[Ul]h>>^NFA)SX3QjDtuJ[]/Dl>DBgFEtNB$\1ZiHWtk/1;ip$7]sr)H<>A$bkY/@8`'Er$qWMAFXeB*rLo!#`WHaPm0j<Nk+ZM/%aOVL0fr^e2Em.B<;XH?.X?i564b^1h]l-OS!i6t)PuC2;/rSi!,\m]=ag%b0ChmU;/<DMXZB-`i6kfms"f\m\K"I*U-m%%-FXHaW%!c2BM7mLE8#'W*P"WXJA*2*F)CA?0YqQ^>#Co,![$i4m9!r?r[KHdDO$*Xfe;S/s;T?rq4eoiRIa2"US7Ct9*CM?;.[J\WT=J!4=%@5]O\5-FEn-2*VsTL09_G02WA."6fK,C>MS^YVFr$miK8FR5b;@Li""Pf=mbY8E>)BPH5i&1F=f.fdU@]mG*oXFkJoV1$S-HJ=Sl%o%:7Ef=YW?c:]8=aD%XAJot$"FHQ>bYY5jiYDr>9^08=g%,9^)YRBWjFDRU%M[s!Sp!Mtjn)qK:a\Z#eN#md98UM?7gOmT?R"R(K%k+4#,hW;\46"7mXT(@*hT</_^Nn<PV-*bHbRC5nP+p_thU'FbF3D-aZZWi-H'MCJDWP*_G]![u/,MN`s8G3#E<RWd8B<)c,XM5+n%QQ7i2^RY&](epim^.*,]rP)PGq\/^o$p^iM#9P?-Z;$/>X<c?ch$X55"5=2j\CC,`P!ZHUgQLpjo0rI&TaAl!>Y8756&;-aLaAOD%!USKAkc$9)I(C6OQF*ImD:u7XaKP6kd<5MAfk%1pQebWe*SlrbO4Pft60q-Nfdr[s(J,1D;@mEp09Pi3kC'd+dbnLS*E<4bP*cS:%Qg:NRg,4O-CHC0,QQb0G!oWO+Z_"28FJ[r?]254gQT.B;QT0Yl9AjO_<74Tdi2r`I(NuQD)c0`2Gq'HbpaE,T'a`g="mlan@P/]`%CD'11,gXH\,UQ+\lCgd#ajMH#jNo0<lo59[/=,F]XQ@(B2>8#]5oRKr!Y"1Qm_)\hK'/=?2A?@(qI\?f_aop5I;M]U6Ho2s[mp./%eZLroUYqBTJT8hS'I#]7=\mGe1S`UpEB^M$[Te=HXrQUE"ECO=/=\7cI@O_Vq7;W^%m*+s^\5hnS)\>VSDUD=n&N'Drj%lLhp5!Q%3uuoV*^%GH-Y!BZ/n_4X=mIdg&@<rEMjQK"`#9YrfgUUWI\)5^\"q_aWrslee3;G]$HZUl9<q@1/TYn,pU?*OqiKm/%jWF4E45q>%WI]A]^Z3a9?A"(0A0HPt:K9'b//Lp3T8=W!>%8K!,Go3!(5*J3SQAKl"]*-$pbm@IPYBo8n)U9ZiN,(b)]?K+Z-8qsf7c%d$?:a%%MV>HtX`I85==S%2?*#A<R*rO8J#>u:a7^%+]f;%3nWLg74(VT+`#cidKT1n&O1W'5/$!:=="Hd><[.h)hhO%q9`<1]kt&OZk,<k_%YmMkm=%l^#pL-VRLB?hQ(KHF,=jR[%kKYQC-J'EfK1mT+hOktaC+IP70%G9aE;6E6q2=ZI#"^>Ce@o0=oW2+JXlDF)-`^RQ)^AA>%XdsUS=H\is7NLu6c<j+["]Y.NM%J8d2&WH6<k1rH<l$Bt6UN9L2U3cYA/Wt4o)#^*IZD['<@2AThD/6tk@7_-OW,>S^]6sWGfZ9L%?f)gN%V\,?Q$V4kEC`Kb5\G[aSN0T`o;9T[;A4(R^J53[TqNUgUQZBOn->'u57\Xr",dLb8j\9POH9eWkgQ$nS6HaN"A)JA,i`F'%'(buC(Jm4Io_M>U*k<,d_"d81I\Nj9js1\pItO-l0G8p]ggmoOGMi]o`.HZ@rBJ]BA/C^%<:X"$:_e)Veq'=D&seNCd^<X;cBH@X%o:2mCPdH$8Qj>rNh,X)$QeA^^ohD;)P/q$$k+]GL,9)b7M<[gh6bZ`tOFe,U&h+.=:]cbA7grtn;d)UZ!1jgL<q-0+HqomJ@c1VM%'8K!LEQgB*Idt'<iiV_G(Y2?kgeh3R2t@HK+#;_O>7rk4,W%4LFU-<hZ6"4!:>tL/[@,.Mq6nZo':[:YJT8MZhOmN1`1]3):K_^>%rmIg<c@o3$cL`^Z_-crmj3%JneUC%Qe]I?q69;&Wb5%jN/*'5^8h0H%=iq.d[e^$7KKrB)V+>0[GdX<kF@"RPG#UZ=dh+,1i(@6/%Fsd$B362:T=gYGcDsLaE\1jg6;7.k3>K6j)/Ra?/XlrE3XKc,9&7>rY(hTZ.&NA<D*pX@_-0L,u8[?2/m[8H#K@HA?0\H.]0d$WL%8_[0rM`;[@[c(I'_rS+E15V.Z42fCLZ2#-=+A^Tgi5^l34Um02(W-&eo@:"3C[--_d(B#kY`i4QrIrmTnh:MXZ5%P?Q5+QMD2%Lo%gc&YNAL<_W@68g+lrMBT6d$#c"]O"X/45@8obJ$4L);0@k)FkNl\r(81EjuH/I=4L9=>`3ou%H7_JPmS0_:Pr*g\`8,3>pV?nF0a%9=C8'ARX^W#F9*&@HT/S^Q-dg(VKiJmVV,C6Zc&(m!$r;=9'u.q98i0q:uNhq\nDog@+-$MYG<>B+^/hPe_Igogn`B@DCuCm.Y5W%kFbq([:<J*Yk&CQ[dt#<f_Kb1M\7We5'PU(4A:0FUo-"\J-$c:^VZhGS"/sA$H#pO]c38$Mh.*;AjEbs^4NkjO)/I3_3-?BIn:,C%J&r0nJ'5_$>*<HgThd84QPr8o>\D8'RgMAR5uR[3GIB&W@#WPrNH*,*oQ,YFXgZ,kGE2.FC>G74oM8$qqPR#A5'![X)'D0TY1H+?%J\&_LFfQrVCtS6Fr9!28KS:Bm1n,1E:!-n2OlN3qpT&7gh!NXl.XQJ)BE'"0Fbo\[TKqaS2Y$C=3Qg)t9SMrb+3<)2b3=OjKa%?,%@b+)\fT'VVMR-Om5_A>6f=]E5!\OgZh;52G8_-MgP&98uff&CsR>h&1Yg@r7B,>ga*sn%TW73:4*#n]!d`CrGjG]@X;7;Staf+6=%1OP@mJumqSa;8+k]ra3`OoB5h:`0#PS?K8:,9N)F%+<3E9:A=o)>Q75C"k9cT*uDb.CbZMGSj&e?]1o7mA$qONu7&6mMrtE,CDWg%ZBo*UgCBX(El\LlD6o?@UDiTEXKk@IH](l.6m64t_RW,l++8(E:5>CdcXCsdYk.D,@dpXn:Hf]Za)*o1UF4uZ/U`XuVKHTGs49=h%%"6u.$99\*T1_X&\i018XmN"S`eH\6huMmpoLXO&0$5m?8KL:2lnJ(@A/Y5J'Sa?%qp**\B*%Ip\qjeYU['5S5hmigf&sL6pQ!ml%rn]SBl0l;#QN!1d97P-nV16R&l/V#KWql(?KAnTW6'68/GM1@+Oe^?%2Y=aZ$nK*MjOr+u,cB^!b"U5s)'rEZ6@tZ?g(7uk5q9S6%St)rTE8qJOBER6(AZ6NplODaO9;:M+p`5r+p$25J+-O/F87Xm_<\Ht&7;Bs-?hh?hs!$QC(GS2["Y[U&GgnLjiLWbd(U6uBA"$*0%q=*?lO>a7`RoKd+;\F0ME@KZkC3%>W5=r`C,1aM4.Jjn$")=LA,]SX11*&52119Yj+hplri/F(ROqqu`A%36`OX!>fR$X2L`V@Pp%)L3BT8RUQDlR=fgoD8a+DqCl=X^I\(@R.Uj,jX1pR7H376U%^*qj,.Z23PaT*lIq<7JRkbn"M.L,lPD%F;!V*94iN-Yunh=Y^2IA%"W<sa65(m4KDck1^_'[q59u]+4ck%Yp<2DO30eU#=njOdaX:0#e*/F\S[.F-XN)uV*p(89Eq^h)R(1Qob0k&A4^D_bs7q@5`6)8@%/kbH>]9Un[80Wd/C]"dP)G?N7r/jsqh&o#;b=b`8DYYU<l5@(Ep.I*`gUTHbi2]j(PoUO\RZ9`:lAmI1<ZT$1GCR*5kM\B\"Y4W$%7J[LEZ\'I@+Y]i'pR?$^m!r:\S^\JW@a9WC*$;\\5KI]rdu`pN;2*>EQEPoT(T.C8;Z0,nePMDhNp777eUZJ;.?0g<!0n*pgqa!$%:N7Lhfhq<Pi4tnfh(Scn5U>T'bG7NeadI;GgJ4mVkA$9o2$MONQUCC83;cWh[&`O`>V+rF^N83d9%&!i]\<-i+i/PU?S!bGOL&kf%.Md=bm@4g*NV:&;)@s+hp:We\bD,7nGtHf=&W(f!DYa-cbL$XE:jtg6_k31DHCr#D>U:\u`ED&\E$Cl/SqrKLM8,RC\:DGu)(s)o%LnOL9Lk7+k\1u+b>5+_8$@F1<;7Pgd9Dgi36qB(I@.o^R2Z=],;`YR@'46gG6jW,fo#V)-c0mG#2$[B5Cn6EE-(?poiH3UI*Jm2t%0pJdb&]G_hjDH&rXSIt&AFs]Hr;C<j,EXiX>!'Uc.Zq$\6#:aG)6%U$bk-f]8)d0@!QJMaMVD(;,e_7WQ;r/4(W1Yfj73Jkj=+52%:>nqh/h2=W;W3ADmLDN6]0kX4\O@gUQ4D38qgBg*hS36r5'i:jEOa#6-DEoI,$!Qh#`3d:j%Mk[MOF<d,]_hCLhCiUU>AG,2o%p-%CUbdq5uomDU?Er7?OgD@$NS.Pr)ZuY(E58tXLM6:aF7BdL_/)\<BO#E'Lo(rI4,=b..^J5iX&,+R$J_UjZ/elJKM>WEoDrbn>0!E%CUE[]e+Vjhk63mo>DXOX^qQjUbL!eM;DY>@OBe2)\)gM;FN;\f$FD:l&g.Dq4.^P\c;^[D+C%ElF+*l-J]sljSUM(BZ8HoL#HQM9%9@t@"Mst`BjHhj(=G@+V/gktuV;,43p;K<!R:4UWdBa58l,#VP]p>QLra?)M-&uWO'4P+UkC.\;5M=Y;h=K1"3h^<#lT;sHoh<od%fVmHDd13Q,7sdBN)h[s4.u8]G]6D@rdDn1^dIF>CGfR`'U#O"RbT]>tX"]j_TDHAb7@B8YSF'Wm+9bB8a8V0N<0`qfaYI-Sjh'(e%DB"hS6du]*\d:NTcV??7)a#u8m;OT`&>`i6-mne'TQHC_,<l!i$.b2p6"M;9[VWncQ=RrD>)@[9Jd_JGc81!hgVme03i*04(TDIT%,4!oLb'VkTO4I!hZBf,*Yk)b92%6A:U%;p+]!$3RnslEpY;q9@!:[5ho&6nkmrbbL:;?Sn;5C:iI]cf(/Z[M%?GnGJduSZ[!IHKZ%3YW<X]sY_T?1)(RQ$])._,I_Uoao-1i+Z7V1,N*ZNV)ARn3/U="RfB!B?t3[#Xk3dR'.C@S0tsM3^D4UDkI7;_TqKOPRM-YX"5NC%-&1K::+b-/*?;A@LG-c,LP+A_d(U5*ImgJR3'JUia?aU+>aKT]#_tWSTM$Dl)G#Nc>o.aVcGDTEq),t"'o6>%""sM7KMlg4Uj:li%o5qLJ#N\"rQ-XAqZ)q&/OTCK*b1*B9D1S"TQM582HXK(:8`=p-Y/>%!#2i\rrH:?gOMp=Q1(=:1\K"4$,hG\7pSNtLNa&pa1#?fu%U#9GSOPl4I3TmmhmBY>0P\rRK8t:`b4b[FM\KtBE"J2+lbd/9hld0H%Sii%k+=6r]KmSPS7\P@?@4s75D&&NSJO>%@R<N,oWm:5-%9#]rWSM@6*=]]j9"u`/?TqM7G@^Vj[+6t;?JC[N\M>`-eJA)7G/_CFZq/<W]2XHZ#iO/1p@BmN53quMZMDh_c>6]2#3ST6]i`+hf%6W*^2]oP3,Z%A@a0Z&Tr=]E*'W.q(LblWs&"G8572o3jd83C2Qh3'X8<T?ZA`*]`j-d#q_9"Z.CdjTIer&J@$hXj,3pf=\Ykl-;<%fD)S53Ekp`(Ku>^JA=t@3%RoREBcK*P]C^N,FO3<;aCgbcuHRt7"H#RRTsQ#ds+'LP[K@<M5t&okiXnFg'Tk<o@P$@OOPPp,*Qm:%K0N;6Fn0Tt\%8CkkY!mQ?-G4mgCT'JVY\u'rZG$YKDTQn[T^=3d"2kIg69-JYZ%n]^/O7]QD2f&8fMqq]GM#@O"Ymgdo`^k(dfi0%W't0J_5XTrNfYb-1fb#Fa=kgZ8KTS224QOb3(&UB!]R@Sn!4*p#44b^ln*t(+@OI0%,gTkjbr4eQ?1&>3o_.27CN\MYMgSiV@0LC%F&s2K]G*6i8@L`-i*a-*Th0tWH?\AhWA&>e4pliTB'LCo6,fbi7L5hL#Asi6LSRU*lW>e3K3uj8.;#T4NTlPC5!C9q]7,W^^d1<d%H:Y!$6fL_(QJcs=MR'<a9bi>46UX6]"kAabq^*g#A]0]=o7t(P@"^6Y%e>_VC\=tZ)\!P=Z\uIJP9-8?n\ao>i,,s%bTV<kUlH$a%AF3=df<^\h/3GuKP<2iqb<j2%P#0%ub?OoP?&^%RlE0EJB!kMC_Iol8fDUCP@6s8-:81C;mW@Th5U(s#Xc+%b_R),l(_W+]?$ble%g;guP[%>KsV0Qh3Gc(mo*a1KQMYEIgNO%<Gb)Sgmrm$kkPL\5Q7!UTsUAt0G0SlTrhCf%er-lK4+OXlXT5]V[V]N\l&j39;=i:mD%hHsbc,1BH9Ysi)r4C?QZYn6ST2Sl:L%YtZAZe(bJO.t^\QJ$%$S)/-<Y`S3?(m;#aDqW_5&",*@/IB+LI4F>P#(fB);.t39R)ql2%8dMS'?cbPQKC2,L:TB<o/=dH;P[?W84hduE2-$\hWOOU<(#bL<@2D%RZ#ilbJu%0LU!tI%3QdW4<`+teP3-6D.G]86>8)(EJ7Iek%m,%Jm19ICeigMh4*j,#tRPZhtmY>o`QdqQ9m`BeYgF.lR$4cjcM&Sk'('(PY_&A"PZhtsJ6Z,i@Q+=X;s,n@gj/MmkT+OGH"i*_C%ON]f0h3WZ&fb3((;g7%H,KV>[.Nl7hUCqdO-2Lm`J)\kU<V(Vo,e*Z-pZ3:keFj&X2l4Mp/(OI,DtMtU,<G0_cVBg(+V/YF9gZSA%P,$MJ)>S9=K9'4HA4o+3)#*BtgT?o[(Pc3:P#;dEeBd1A?cr&Q140,j^VOp?]79LfI$cFA/?P?VroL\PXrO,]@n<5]HtA]Q6b4Q_%6b6i[+b`<17fl'Sge'gebH5Ui.Gi)IDIH'DE]L9=2Y>C/*[Sq(djnLa7=srO]AiAo$QGPN5F:O^_G>6KBWbt!ei<'T),gdmb7QRc%pZU"B(b<3=6&0,8Jdu3KJf[d]-VY'r,G,Cqp`\:-cMJFkV(?OTd$Oku]g0`d=4pKV*sh4Eko^h=5ZH.S%g3e+<e"5#TI!`iTHuVr%5YH:qJ[R+Gng.F^4*],lI-!eY/?OuN"+W$r#D**\O[U:nKP(]]f!ub1O+\hCO%@P1jkVHD'*EWj=pM`g+K&a=QO]Dr)BMHgoCU8"%#Ee!`Ssd"=<\&2#*pF%gD^Ej]%]kh?5S!@d)_pZVF;*l1n*4M64'Ol.SrO$rK(u]OV?)5.3n*dFWTj&\l$'/eYZnLU9[ff!qXC''%Jt2'b$8oN9VSHL=`=soE1-nm6S3Fn<g$<KH[L[&p(6J/7,ENTP=78"_Pb$g8*8.&;"EnY3-m"'J:i/i.!D?V`Cf*`X"7_L*MB_<j%N&8l$Gae;UOlEb!q70n/"fZIYC]^u)+W3,N!_-@r]ReReO[9i%-Ua*VCjofPbLO<0@37#S,[2F=<5@gSPO6kCY$:2-<^BL&d]O(J%Fg-4rE.UXVm-@pu$*nZL=CL^#TEb*^8-XkaOt3mNJOo;k/NG\QDJ.g%h,SoC$"=0NWGE,[\Q0FZK1I`21.kTYkV&:daqdE@\6-Fg%[ce,1aN>9h$Pd%\.Gg`o`u@EMR$<!U)ak$)-$Cb'Ug(,iUg"NU;ES2k]s:)3>T';#Z:.o"q&X0!<,T;/fH?"BfF83VHL)N%8<811%&Et?@+OWWc5bt;O+AtCOS2iLnPh7B^FArh,PqIsck2s+/FO;`t"8i#"s7Y2Ss*roEJ>k4j)L[IgS5I/hTjQe*KL?6Qn,UdI4[Ysm%WAB'aT!/sTT\k&n685%Me^R_U6begs"+D!91kUV"HZ7$dU0gop(`pda:]V2oWpM,L`7qT$3WsDAJGc&K(H>b,"WF*ZKbEhVZWol7%!6`0/Lo0cJ.[%%ET1#e&SI5$"KJ)2bL4fd9(f$0_"@5@G^>DK\Q\pQ+lLT`keOl4;Lfu#Ann`_iJ-`>Sk.F!W>8ebK3%uHe$Squ(%Z&;s:$JV_7XFNu8c'7J=oNfEg\H^cLk:11IG?sDj'WZ/uTd!+5kBF#qqt(o2BZ<1j`eiDLc*l1D@"T_eFJPt?h$7:7(<P]LoH/RV%><gnGC&8pUcc=m-B.ql3"EtG#75`N#62:$kib5$gG#QQDSUhpJQZ=C%W#r+*K9/*t!'f+r5$U4/gDYL%7>97ri8rQsEF='@W%djb%`XWJpncZ1Uj"gt#]UcNf/2^mn)8=Q!aPZU*T@H=t.F,eC:#Y&lPpKIaK#l[;>n0!d8T_Unm=GNsS$3sJ(])W"DD!!OPB@ELVcQn[%\P`[)n'n51r,rJmkU6n(Dn%ZR:hF=gW^LO&'EVJ>h0[0>5BE[BNs'7ciq)-b*-1M2qAu2j7uE<fo#=%?WB+9aR5h:GEOh/4UBQ_b%-]\ZVVMAYnAKu`%!C9u9Ffc-]'e[_s_AS$LjQ]_h5"t`KDYg'A$m3Krc;d7o.qnVIO`_J%"eGa0j7<e[=\1R\B%>,%P:mAm+gqf;%FXj&*WT5HQF^1df_R7]9?Zjo7\C%L)n*pKQdZZ<dmc[s9X5s,WWgKl[.1-2\I3+*Uj%rH="VZ%T=eR$d+Hc68o4ajX2(fDC>t(mM%g,+%5nef*$a9TcMMUgZi*TMga`Q;YncP/RXbuRqK@HeY^9%*@51#RWR_(caI,^_dpE^@PB*fFGL"GhL5kan;&oD,MOm!9R`3#WaH%>UKSo:KQij/j/9U1RDDie@!,1&.tY+Pro4U[$18G#6\ojf6m(G7FI`Eh2.BgWQb*L>O_)jO'j#XfrsGSSX\6m9go,am!3See1-58%,Z8SaNV7W",^7n/r6f6CF'oMuJq0)Z_=uh2,9Q9q%D`;h$`kY-,A!5\*WL]nm#I&6:6<M26]8d2+?J"T\Y6j_U@j+3\u,XlYSo)>%Lgf?:oZaIu_khNno7=_HF?A5PJ.j#SS'.dEGX"2^=3,%c2!XFV:/<ie^'s*N#IqD@jA\QBN:6/^+s9=i@FnUIS,5G!>%i2+AY@.U%9jh]YVK=IbKRk$bc<h3b-="UYE#]H#fpGcQA[(aJ?LHgS,'Hcf9MD$Xc5;b%kYI$P>2hjGlaLO2Kr52M0[M(pE[Ae;^eq;O;@V-t%!\%;MUWBqCZt9c8B/=j`PIhb=$j04W;rPBa"F(9&%Ki>oPLHXi,nm[r4>VUI3%:LN6Ju&O2=j#H8`G-9!r`R&9<0eBBi)[(-!VrA%QD9<>'t#.MpT<Ha6VVD).!&UY"c"57=3<!g)_\5Vi&J.?k+sI4W)U:QIN;]D!hf<b!N)mXfUqMu%TR>rS(_&P6B[>eiXuujTIYTe%K1fF[?j>a)bCR+[D(kuEG*&)^%m<XU/bl#u11btHmp#dDG&mZ<*uLcL$!;:h@^[naT39s/"!?rg<k2OcrB>[Q.1o%k_M[)!Y_2il%ZZ7Y\aPitqQ:LQJ@#6qW\7_&3,oqP?%F_#dL7ffl?BJIkPJ;2<rM=0c,k_>8`Z9/:J/=G/0uO4d5tr8Pk'+DN@4"n0-3GQ!hfk^Z%p^W\JCWedI"DM:(A4d@#/JBeOIiT45'o2p[m;qt36T&_8Eb'-DQ$^uK?BnP$Z-.:k[3V4G$2[*5JUq?']!@kJF_LPoG))DU="@ic%7LmI;''6fK$ij+c%53aX@\3!a<8^)P#5[S!h8&,JFe!N11VXR#qNt,D;(r[!=5nk=K(L(@/cHeR</I.mI82#6Jq5`(\alipHJ-<S%9"60lO/5=U3hDM)cLHj4]u*('`2_Dh(1^uCm#?k)f/VHgQ5XbKcUNtuho'7e'R#h4%1k0$5qR8)i'H!6pfVTi5FVcjP#TXg8jjjL%Qaompc/k/(P<246\?]-#*am\m?U%=JE&\QX'#.""E&`Q2`;/'Y(h[P)-6;'4lI>11^bt])Bl7m(ipNg,metmEW>9D2WW]mY<p.RM%Un:YuWPLKF`+D,7jud=?0#f=_]7e(34gN0n3To=`.E&VZ)]5dhgEX\f!Ifs4[/=7%'J.U)pVB[N)5K8/4aW/[cBjJ=-36HmUV/18%olVtKBO@X]*6]_jrS32$Ab`i^WCplE6j^KFL/S3SCl+^0>7IabOe<f#h?mt`\<gEq@WeWlFu.34LP`fITR5Z.O"Pi&`Hq[_*6.0*%a)el:qP6Of2b,`4'oNPgi`P'6_Y/"GGc@Ch]eg2Fk+nq&OZDd[+(R8m9;21b2'r_G(#?oOj&nnqK@HiA;cE*6I.;?(AQTJ0&'7g0%geZ(?Z=d%H;8G)!!gdJ.5ggCaT+bFWJ:0AQc*E-O0$;4pOnkR,'#YMe[:K?ClGJJ_Mj\N!_*(N7[$o<%@?#LTO#h'n8rpM,L.]lf%?DkG,P'oBQPdn0%&j(?WWp"koS].:j'(F=`@bK,]f_UPE3h%OuE)$d_&8HUJdd4@<8/fKE+8%j-9mAftO3@5g6,Lg$GDVmS3E=n)%.oV=^Nq`:7A@0t7nfNgqCFia/`5.d>qV1)J2,cfbJI\WI'E-):49DsX>A75BPA64C!sq'k++I_dr:#RV(_GCZr8LmW7'Z\kKG0]O%;gIQDFr?Ii.`(enb>tK8.@^XYXf-GB-JHb=+9i:L8Z]p>(5sMuQO8-dTDXtFld%CG)bhf>#K<",-e=UU_5?8ZK1==dTKo9#$\?"O%0K?"7VEcpoKafo6<\:qBDN6.6G"<rr43##P\`gVT2=2_S\j\*,DE=^EjNcBIV(Z6<IPiV5oU-h;N8(:n^N4jZAFOPe,[_@f#T/^/%Uk&T'QR#:=Xp2B`T:Pd`:'Fn!%2Eb1NHKpWRd$/'k]o]]V]'A3H7^bq?8J?7?71dI,[b83?AI%l3NH^IItpE+eW:o+"T;pLS'T*e%n9\ki2FME?ebCm$s-_#%(\^^"@`=J4_EcLei$?FWD<VFW"Ll2"pm'j2_#%29$ao4-KGjsP9IL6Orj=7*!#Mr*?2Q)F2a>$"J9qFq%)6]rI6XNHcXFihmjP[/Ar(5m`052($LCokH==@K*YQo8=HoF,V*NEN!e4Qj#)1''V!Ve?sO)udJC[lW,@q#*DQ,g]H?&5@%#e<F'%:g36De,;nHKP+jJnp`sci+@[RaPkS`UK7VD#PK0_@gMm]$<D.qijEl<e08/.IOD$3PoWV#nu1K/8<C`f\4Gc$e2\teb$g'CHs%%S%]U]Bl%ZI.[3XO5$l5qj^F#h4-d#'Wl!H^,>r<Y??*%.gj3`igR=r6.h2R?B\7f8=-$>J/6ImML-%goIU,j"YQCgXofTI#671epeC%C@BJens*TEKA!-k`pNKse/j?X2#meO,0fP1XH_IcbLZ[/HV0l:&Egk,Taf6`D)H!p2]tCrPoQOH&qB<"%r9@)^fa$]T:[lVGT&jG%I5[`b3)o"D2h8SmNMj9nc)P-M^ljf2<1A[0`LE_CQ3)rgrfR/(PaeJ_?*p`-RguQXXFhE@*):lXiag&FTM#TR;F#G\>G,5Ue&qBQ%h\F/Z3haYAf9/FYJu@'@7=u5;5)F$D]kieWUNu-k"d'lT7&AV*NqZUiSBVr("^8Te0;[@^!/2A0@n6aYJM(5c,f3k3Mh(kXC;Gk2%'rt,lk\S;%;PreeH+&U:FJV.D!<="g!eu;n(Be<jJ6&$AP+`NmW]r(^Mue6b/LKa.CdU2;rcm(dY^2tOs5;QX+qC]^VS25QJh257%Y=n00]2c'[dM:#9-a'o(V6>sjL;SQ-m$>Q[d\^E24)SkLVA5\ABie9h^b*M*,IKRQmW8W!m>H\__'?F%lR,$;df?fQ&5J2D;s_'J%ISd;2A$B/$;_t*r@A-8P:Nh`U5f8=a5ABLm=bluW*!X>0d/R+Yl#E]L;M2EuK7P@!U[6K3l*#XHjUp^W'DQohikLGU49/+$BM:8=%+[>3+:p_*UD=Va_0j(#RP=meofo!"KDYR(KHO60nb_!qFC<0Xj[OO6:M/FZ/A)Ci`F'TO6LU(ujelqc-JK'?dJ&*:Tl_6X&eSbk(%b6Gj\]+$:hd:28fpIH-tkDJ@D_"Ok3qe%0[rf-9`N!<`eaIQ[?CT#g2A3rp(IkaV\JTL=o-k.B\c1B:^'nupSY-2&5_tIbQ7[8cS%59r`4YgQE4bF[+_GqXp45Sm6JS_hD\,:CZ)S:,Zk=/.e_[=(**bH:,9\P"fnGO`;P6#\A]oNbM`ACO\8r.`H&<5mp_pbo\McEEM:%&!FuE>LqB`0JW<TK'In#RXl01;i>,<KXg`]#+XBV-,_)`%Hk0BWPc(kG4b<!Fs7GVi"LtfYpou_2#6cf'"(;H58tqG[@R_D#l6HY%e'L`bFB9oe6J=e@P.4r'Te=m2'$,]blP0#`Lr.LjK^>G%_d,OZ!*WsF0p,;W&MN,gipEGSGr+aRd*5Zp$<aMC.mAoC;BXaE+<taG%O43Gm-jsO:XQc4/aIGh^(EETs8>(("Xpu0u`RlkNL@[ZJ^Stlnp5/P<-"l0apC?FWBH\_Z*CK!/qd&PH;JZk*I,qeYA@(6!Z<X$E%:]_n3T%5>o$V9J&%K3N1$[Oe>?j9k$Q73&JP0&ZCgZ$14`%(gt!6?ul1rW[V_\J7=W*#!<qW-T`N%*nG:9b_BGO6bLhM8+k=sM&W%9?(Om;F]MU/9:7I2IuO(FKdY(M;h^c'0;<[+"JeCCad$eTHjJ<8pM%3Jrf%*f-ZZM%s:1(:[r^]%-6K]Me!:$TY(gJ_+I[:@9':.%+N(?;Z_g`n,dV9%//kGFckMc]4kWMl*c]KR9)*Ns1eu$*2WR@cO&HF5ILp4N(FjIIl%;Ta`-8crYZb!T(:)YB,q*YeDIo<m34t<D%(TmU2I]g)NU'2(V:S&V4"4_Rk')""V8[*b\IfO,&a9D!IZ\[ChVC1hVkf9)FI%"ureP,IF%^trd-2S0eh.rGpP*Vge(gtBNd&ScA%+u+iNqq&ZK$bSJ8NALO!@gBTI89^NnEN-Jpq+Fg<K%h[tD\_qGA_">sD:d*_E,XFUItot>m0(5;"X;sT"9BN@PBh^0-"89dqc!?e%*0sM:p';Kd_re\_987@E14@)<P*Ona2,#;tfel\sY'Iu:KK$-4S$d'f9l<%UW:*]2In6X4FmM:uXto3k.*sADR?^d*H#\I&_YF6,%._nrAObkMsk@t-e2S,KXNXpC[EmQJ%J<Ss:(?nFIEgQ%/jOoSmY1eK/G0C!S_<Y5;j4KWEW4l7b5sZWUIZ=eOpqg"g[kMfp3rGr1%c2+!JO)dnbH5Hu6C/<hm1&_\=WY*n+S]9H(pi?F@l0'?XQ0;GU/Y\:<?=J-bGHVVL>sqN=a;F3^qG\;oJ-.j8WJ4*SP0F;/1p<fn%KpmDC\lD@_+R/9u_\pFW"2fb%,/u9(>_N]-goj2L-=D.ZS^^*21sp#oCq$;M4FJVTf]H3SShU]9F\P<>A99;3Ld4:<.jQP[c,)7k%$?IW!^(;eu6VW]@GWT7eI%_N=gp]LY6L3Vt]oo,:Ygt1Ce[r`QN;12&q</aJeWb-1'9)etWZdMSON;q/[cDT7gL3?^ofO95I@">H%?-9GfN8fa!2ur3U<>C*6@?:S`%MB1:(Im#IaVhLD/Nj.+O:<Jn*C>+`T>i/T8?LU7>SgPlDHt=g&(JhO3;NunjT$/b8'7/L5[h`9%LS<R[^UY1=)XhGs['-NDpFG-c]ZpfO17#a:*p`B*KZ>FXeXQO8.ER6NRGc*C2fBU34+,1F?1f`,3:h15RFSIFn3iH:KtOQ1J)S%u%J:W\i3.Pf7.@>)irPj/e7;d$4&`MECQe_7%;:%YERU7b:,%&T%Yp0O>rqf=0OH[-Q6!<SC9@4]/)iCNljkr#]`X4#3Z%NQJZkc.C%CdS#u8\``,DK0sLHV`H2.R[e/2nR",U;A2A3mVphJgQ5GV(Z<kpOuXAX-utH'JG^.*bFce8:=hj].;")`c7mh"a>-iZ-p^7Kf9Ec%.1j[tV9kAkeqBLN12;JZ\*m\9+RL[^eH:OET)P@fOK%i'19>U%Jq`1PduJY-<A`=Ci]A+o*O[(ei3G/+3c2_*/gMS"m"2iB"-uF&%5RXj9^d9t@8>'(96&T\r/B'lr5A![!+[:8%GMWFi.Y]dU%X2iX,=0$^J=u@H#Os<QlQfu)rrI>g,9\.4,>C-M/HFJ9i_\19!uNJQ%N1iYLF_&-YFl5EO+-'l&H#69ij.DL^;&?$L$o]RnZH"X%Lnt+aa_J4_0q72PmD?#VqhBk\3+Slu'fo5l1,]:=J]\9k\'H5tNQgrg%30M!gd\GVOR2Pj9WRPc7bTpjn;^CS<P4U^7`Xu.lZ6g_>F;0;(bJ&F":1Le1!hSb7@*KEC:h6GG!MARRlDuU1XOn6VK@-\G<5)=A%NI,I"GA?j:6@p[^?Y:PO=`f&,%;9iaF_WZ[k,WB3l%DmBS$>Ae\fmJ!)a3/$&(qB<<,3I&0GqJ?j]AT;-Z\M$^sf[6*]&*1D\_m'%mm+DXRu;iQbO!gE1fN[pc&:5lm9RYX>+?V+K_;]/JqY`G,VB+)jSFFaF[7*#OYB)5W*1^<V,L)!84PJ"]MRg=)G[,r8KBj3jAYR:%L56NIn!H-W'.918,p''_>C4/pPT*\6Q/c\Sg5ccYFcZl-_m<Ht=f)ic(k:e="51dJWVX,")r-o7CZI<%Elk(IrFK')QnuOO'q7QV%Y@a\eAjJ]n12XjE8/F3KR(phuAdT40fi@6E\Aiej[UP=_,ResK_MUl+5eFU&l[6f!LNUDJ.AD5OV0(=O!q4_'lE15C=8/mN-`lp8%R;0^&@Y9D64\Bh3@b9][@l`f-Ct+H!Sc+r\>:X$KYc@?4U]a,&+2uQ1;Z<N"A:)O/T/F#SliQon*Hnsh!a^ng)GZ<1\18^b3,,DV%O+6!"M?E!CpW,ehMC]J!R2A]86`[=AbR:UJ3'e8bFD?Rf>qs8_$fJr7_S]-b0['lP.9MX0W9!3iQaM@@Z<"gW,tFZ$+o%hXT$'cO%,WG:rm6Y!@:tZ!]?LQA.^#HdL_X#3iMJaIW6]=En6q/_nWYcL&&j#m2ak1-)$J<sl6"T\o][^+918u+,!)#T[nu!rmWPC5-_:_2;%M?++:coi>D%leKG7ro@Pi7jFNf<;1M0YUnM^n+N@9T`RWr-.XB$ld=4rBV@RkYcU.YE+$$lEt]<5j3!^]GKdkCWhTVf>S]/$k]m9%?V!p:G+SC1Y35&q&\tL(gY+53]Rkp6(dlK$BP7OK1$688giBjb5Y6PU0#gJ)@oqmo^CH'_8?u_Ld-MfrKh3P/,;uGoiAs:8LXSAY%Z&R%&(8DI[=`b`ZdLcY)1;bB/jNN-'oFd<_mV3RPJhm*='IFWT\-@"T8sEf!KFrrl"ZC'qFJYQsOGiAT9oY\(2#6NG5>G=K4-2Zq%M)mkX6F!5Uj^8'h73N5p2K5>siDS24Aq1cl;N71td'k.>.M[H4$8j)^'+mF+9NB1#a+CafQ)>j4R#ljHPnMP?G"ti=hIlU\Pu:jY%<m]nii"a=\(Fg$-LF7a^,@>jtIQ&O_$LC0`[n;5XG+_<a9nIHI]W\]W0m9SjMC9uo*+)37@pJDi^sN8HBT-r9B#juOF/ZF1ggYr"%&]?IXqoPdUI1#8W;ZT$MQQHCtR;dLC$9574&R)gZ.u=f)_5>W`TS#Wr#c7UWqA?+:FBtE/>TBV)^jjk4Ln*F9BH#oC*'/uE&/<AY%]E[<4b5=$lHf2EDDW6j6E^NS6.`3?X@?d/Z2F:nDbcWbB!J@'72"/T/TbEBV&MemB`X2qpMlAYM@!'T58;d^!Km9YGd?&<_dJkag%(;0+T0saB&dF\ad@1!uL47TD69IAPfeU:ebdH+F(],&4H(8^m(EB8dT^Ifj5_C`l]jg$+e,(`'.-4i<bCP3>R,=VD]3eS3^"[b,J%7AcjmCBtm@`c@J@Sub\d<p.5>+n@^3Vf\p*5F&USCgHh:]$_U'+RN"VL&$e=DhBmCLg8'I8DFEJG.&%nER#)lfM,pN[h8-lB&*c/%1rShX6O,GR<ObLJF8B'*oVuRY+VA3I<)asH\$0PJW":>jfa81e5dB+,mOMgTQ$oZm/+\Spc*q_8JJZ+UX'"&A@?SALfd5CSbU[Iq%Fmg5RQ>dUk6VEdFr<FWQcKKLcrL`7r]*Jk1*S(4A^4r/skkG9[$kd/s6Gd2#T1kkOi>^1fO?P`Yl-Y/'5a"XGDI3N3\8Y>f[E:</%=epC8_P\W([SJAG\C0Kd]NWNu;(6:VcdLe!,6!'l-]U)d4oShU/cG8\F(1KOL/EjM:8Vd'f[=sFAcFd+q7<ZC4$&XEr_BQRo&*>s%@g;96P**i?%jn;/%CHU%Orb'ndB/p@U8=iN4)GCa<B?4?H79/qKTuNc\YmXj-m;]6dl&P;b1fS5Ydc63)jVXcJOXi<Y=HH:omYQ"%>e38)VYF#t*tLE7+::`;:"!a<)[q;#bN:&r]ZYgl($*`KktWHGoK/@PN"='oIU0t9onRO_5Sn?ZB7@2D(@J$=eHM;V,tXt<j`1A+%qO_QI,=t?Rld46<O2@M6*<r_ilp9`eR7QCk^JbC`bDM=]q]`QG1^aDB7P6"(1oq1ib+Rsg9ZdFE^bdLcUF30POa[J/$J*bX>cORA%5l<AAg@\28)`/MT1WHR&9*h/>Md$>t0fgH&KJ67rIA7>X!e>7R!jn(0pYihr`dG17"(*BuYR:m`H6NLH2'WTOBkdQS!rkk8A$oc:%XBB)aQGCt%L8NV.QuZkY<?s9^'T5ipg^V:Jo3NY:BnHZ$inRK=U,(=KXZAZHB#Di(>5rQ/8bNXX`sk!E9TkWd4VYP%P4o4e7tPu!%'%>,dlp`T_k8<NI3T)^A$?1-a[[@+U.dHk8S2u2CYZF\lm7pb<8ACR)24Pu(?>J-gaLJ2l;%S<sQ:2=qbim8KDOTU^dPer999;VC%-iYnO]h!/m"A,n8P?,epKRKma65$SnP&rea,<*Sr;kSi4MO1^ZjS)+f$!-tjTp1RX4%V@m.Hr3U2qH)_?HV2$16ko23Q#^P1H?_Q%\mTarmoHpRAP<7\]&K;#<>$?;+2#s(Utn-k`\^2=!q)CmBp(qb=&rgAoX]Yt(5sq2c#3TuSc)&#!A;5[FCfp<eK#rpc(LPg74<D$%&0,nZa?mEGnA;G0S/=k2Q]<Om1CskLr=>Ku@ZFV9eB"8$7hcY'(Yp.XIV;?prBZk:W`A.H6_J5uXufu=/B;4K.GcJjO[L)K7<cX'%`tq_\>U_Iu2t9c*R]dD]e2b;8a'VpT5AWp7OUi\tP0!gT2Q,K7]P.r7O[.&]P1351[RdEZ+rtjg'D&X[s$^uY.MJsuD"lkD];4jn%T<#OLB^>\kbk\qkW\jHWDJbn*.-ZSDR4Jqq+MF_KV('2dXBF/",>PdHD9V>D,'K?.qsD$4,n/-o(F#s0i.OA\,]8UkAbl`_OBJbX%=8B%p.FVtoHk&*?/9as1(*e!:lRLG&MW4e>ZQ'lWU7^*lW1mkj$5*91bk1J^L<n(5q?*"GLPRFU;.107)q"2Kj([09:a-V_W52]6%)r=<!RW98:,+!hB#hLN:/t>I3.0&kWdQOHf.%">p7GS(7H4`i(=@O85nmK7;buDf#)!_1:loddAEZ5!VCtMWWVA=kN0p,-hSZ"@g%]F=Ji-O?9fZq,UsJBsC,*N3TqafWoL.o#5UF1;s/.hA^$\C&Lb]`Co7DH/.W,(G4o$0+pM4>DJ#]VD#_V1QO(Ys<gr=+.SYopQXd%1G!tf8r@tiqKH!Y]$8+@!niZ=BS=Q'qG,g2cGZI'5RL0&mT(Go_>E8/S;Nil(0o"<LYN68K.V[]5eq_>;^8.+1=UhFd$I>UX\YMl%7>s"%($XGMePVmV7h(bs!1a(^QK8sJ/kOKj,Lrf<6d(tqIb.eTIMSI7XkSO5TP+$u4V0ebR%t"`&bP'j&.er`[83Z#-:9W#/>4[m%qZ;M9Q62KaOqTZ_+fE,Q+cH.s8gU(3p^FITRe-ae0*/W0Q[8-B'oc5_jWb7!XI09$#)nq-,C^X;##gtW1F1(c3m/as8>B`Y%n89j%rY/$+J5m(/MTn1[`HK^#s4W/Kmar6l$4KY-@jFsmBBJEt7GoqQY&NMD'%a)]r-$-]MkC,sS"6Dh]@86;6$OXqc(a[C0oISf?l(HC%:SkYnioi&RPRXN,.9e)u"'laA<b*B('s`5L8SXnrr2NDoE]lgtK/"Ka^7t*sPs;7F:,RA..nQ2(RP<<>o8(-$mY@'93PMe[&oEP<%EYs$uQ)RI0dj,)mZY;f9^Ru4t/J>i)g2g7EZ@#.["nl5XW[a+:^8HTILA:CD213i2!iDff;EdLI=CfVoL4@p1K+1_3Sg)q=d0Lm>%@&M([:;D*P)]`@AF:hB0rLF@?(&,a0M9IWTj0I9@fJ%nh:I47lm9aFU.Wp-p]%S3"`%=s"H&2F[l[7n;]Ah\3_d6Za5].@)5P3L^%7DQbCCco+c@YhMHe&4s\"_156s.Y[Oq]3D(>M]Z67fs36]"HsU!c%3[+.1;@W6P$j=MI8DZ"OX2kti!JUNI9LU;ca^oBXH]MlX`B%Og$0e5QNtR9/`K4*RdrfO@lnp1ikh%Dd['m.PhB;K"DlX9_(D/*>q13-YAJRT1ki0Y)7]?pOb\cOXIQa-Z`PS#-@[`>JVFGS3CU7%8(T=O"j=h\JPt,9c9h&[FOFLb;_B4BrGBL`+_!4o'+7#BAc^:N3AS`nl6VSk>N"9"pt:n&qT5A+DTmRDoJ=+^*QRt:/&C?rQpW%r%a&D)A6/s6Ti=T@<P3P\IiUktPji7US.<?EI.#27GO"&6p!dd@;S*Q4J!AZtK0RM&TN_QOu_E1\jBlFqK3hjR;4N&FSGE0O%0K#>K%8+q@++'GKa$2&_t*%ZXjg'j6K,bC[+CrV6;4=%(II"E2pCeii1J)jE_gZS_!:8[Sg@rL(K9rW_BWV5"c7Bp85#:6W&P*m0Y#8ApN%_8n$u/oOrs)&AT/rCfIu(^c8QWn;rd($QhW__iE.-_2Y5Qoj);7RLFB[,4fPdB.^kjSWL-jg*@&B+*.0R+67HJ2EiD?N:Hj.d*Mh%GHs5r8s^jOFbsp1/7&:9IK]jP/nE\_3:@&mc>'4RVNFU3:UIBs+#?:_cB3Y877R#)nUd#QH1=2b95l?f-cqIYG1G(P[kWtnQd@>-%\'25/.L+9TSV^'PS+MT#$ptPnK+?C.9#+=?R3QTFJ@YG:fh]+[jfZMiRM/.CW15uHA5aYj1[19SD<qe>:+h>V$[Vg5XWl0t>eHVT%K=A*1=@A#m9firl[u8oRB7PDM??ESqG+qY#ctbq.5!Df]c#erCbIPZQ=d4#1.qaMtOkBrO/6l:2WTpo*.n288(ef7$)?>ah9NAn&%.+4+Uh:1P47CQmB'X<,uK>P1J9JlhG'SXcojo$a*:n_eNR=]km`q!Uu8AQGqQ4.[l4CAlSXDn39CkAf'M$>gF-,X&>;/\sVdh\S1%/kZ]l"tu0BR@R\#9H(n6JsAN>JX(p!#[2D5F;an/KjA\'i`kR,A9VoO=mH]bk:TfrSWFW8-[C@uird[2q"Gq'6qFUZ7M`WA1JeBQ%WYts'MSVZ]Fl^Z]:lSmV(!0/u/dR:NV>qSS<8nBj&cE:eEp3WB37J7eQS5o3m>m@kNcAll9?i`]#rbOOe\Q0:l]R)C'P.J*aB]e5%GbMNj>Qi%Z8F6E%#)F5n0grVu1CR="f0P5C-Qb3tB&sp3fH:MB!AWXin[Cq!,''2Rf%.P<%jNHh7u#]Bc&!rspe6\ch,@(9Mp]Ni%#F4IP#Z_aKLI<[s#]'sPIQ<m#$Fa_:6g`-U8ifcf#_,5p>;g&l_Iuqcg7S:P`kI#0-E:T)#8%$/d9jp>%^A<Z#c14-DW-67-EA8(%N<HJ3@omP0rDf*pcOi`PHO%p_]rLsI4B"bIPEms)\kV*.IC%9&+C]']^fJ%``=+_h:o4RfbF;W29q)2bpC-%b7:E5PeKBuuN;1$9%I@@AI1;=<F&U-$r\X(3H8SF+ABScmiidD0P-Db5c\3koJ;KaL9M8PT<\rs]71nTRF?FQ4$I9hc5K9GRZVJmg9LXb-2eN*g[P5bNa%17>Qk3<5pV4thA(+BTLXjOrX-2k\]H]\Uu1E[c<L"pD$t5'<f^P.Fri<./%#>!@LT"s15lL=,DT#3;uuh(6ZA394_=pNUH)&uR-j%YqfsR"c5tGK.BgnHo278ZKLP5EQee6Ft"D(efo&Hhi?#D7)]>aN2D?576]ee'FR_\l/8Br;B>JXcSENsC%KJUD)Re$j?k_BMTgoO%e(:Jobq`^Jg'\]##rqj].T@)[E//0:Uj2M;6Lk<jQ60-`ig;+(;<d["W'uU"X[9d[?IX6*9o3Q:Q.JoggeZE[L=:L;NUj(<$'C@o%JPMr8(*\cd32K4+bD7c,LCrT1K6*.D]3AGHI;YHsArdNP8qg<u6I[;LdT6T$PXGLaPSBg/$]W5/J"6mjQu:BQiXrJi!#<8]`nj?e%*kc;W$cb"4n"9/]"VO3?bAc&51!2$R"?;lY2OD]a7Riln7&'3qbcrb/O#b)aJXFRurR-<?7_X[Q'R:G&#]S^N&cf[.E=Lc!(@]/S%l#s;q\k&8WGDrcNQHWo5GGcV[JtnN5QYimZ=\U)aDJ"9Z0/q1,Ce9NIe8DbXj\SXYO6hWHVHKgY4c256NSApeA/p_4+Ks%u$.$)h%6kA`i$LX8C*18G^("`lElM4-g*WfD2_3W%B"KP>0:t>iK=.A,2Z;gL9B]V3KP][,\qJ_V05T/fa<14]b;g&;,m('iK@fmK!M0*15%,;;S.L7V(!5GYj5fa=DMeWjCC'XT&`O9pm"o"0>GAAo7\^pR.rE6P@PK5+DLVJ?HR`h4k^3QBmY+Ch,">jh;9R"c^ci6r_^HKD.U%%"V0Ij+(*@;\F<gkur;8!amZ%&&jCfQ\1\uDOH&`nY"dn@2Jm(C',!;bVq?>0E=lN;@.rb(%)ZHR#^^<!oLA]FSHLl>J>S-V?kgI%@<\eVhSjatI@mM3O[[@_hPlSd/C5[lAQGFZZ=C,g)W>f`8B5c?gkYEScJS&9e#?Jm2@(sDQ6A^WFDN>\InbV7q!@E*7V4][QX(sa%O_+AK/n3ngU`0"lf%5FYIZ^St?C?dRoV**8(ZQ6</)cpO=m]7jB/s`LNGQ^P/-W;NMG4/]<b`2SasI3!O'G?!5/.Mj9-b<,XuB(s%eXbqISg2f[B:^rsZ^-P17)S-5$$eEtfUA<qK[T;_X[I#'YVb5sRq4Gi>X$@[T9M+hbRnmP[B4qAg.[nia86W2+q%aiZ*P'K`ERpR%qd2f=1;j;0_)GGlq?&b4"NPo6+Q[/B3Y#FRNE7/01H9uS7=Gg#)<2?&1`$l2@GDJ$m>YWa"ntV3Y^iadMGpX!r83O0OU("acn.,#%:Jk;C3!HM:9=/P.5^OcI\c2q]ki7EER*+!"%c3:M`O$SqU0D.RQU%T/7"A9`LC>X2?"-]KaZHmr.?d1O=qno.B%ohHfrSFTlT.g1%8NpVSCfS8\]hD0n9\u&!.3i(]#+%T_0/FDld(41O+T4Nq\B=/9&//[',:hR+X%B;4p4Bj@>n3\AEbIuO5Y<GdUeH\F$74J&;^=C*%2Kl[@f'fPGpIhom+`TB;9,SeH$WeA=8LN^L].!q6EbRGnjZ5C7nUO8+c`aM[AjlA6BF6-:<.di4M)LH%^iW`sNE6n+D@+V99*Kab%YKK^R>$)SfK8;pW5,3EsWka:pR%f;\Y[(8S9dR7S6:/W4!)7hU'm,P$!QujWGan6H6`)V10@Zo!4MWW-(+H_oA;5B&^A!goG=o%%%phA2n8R&o3QEPWIiH2U>L\];/kM4ih"3Dfo^&RN],]gKNVutgH]H089Ls3N6MfT^PETg=r+];Z\^"gamr"Pn@MhV6:Nl@AQImOc(%!ka"^h$L)</-sgk25GnrcAG!fPecM/Od%.0#[O^mIQq@aOk3$%7DNgAS^K3uAl"!;'-/BR'V<hf>F-t2KN_<^kWDe0%7JN2VE:R+%Z'I#/)C3G58k,&<PaIIG,_UpC*Q8G/`Zua:9d]!j-+"Us73,pNi+\/2I^$<3m@$ig/.KVdPG%/OPCoh)#QV0jMIYCPiYcqPR7u("%JT'H1W%Jq*b'?"'qSfW=+UaHpdp:JTpiJi>OPrlu0+i]c,C`n?)FEsq!*Z)=74:j\S!%u,^*a-7"QkrBl0di=3#-&Q=#J2>--R#i%Ke(+K(98oq%<K`e;:!'1gnRd-M^3$,fXaWEeI>F0N;!TpoV/^0.F[K]<,AO"$%d?63Y1)TXah?WOcDY`UJN8L&.?Xshkb'O:u#uc%5b$k!WcVr3GaTl-Rj$i/`#`)L.0on/N$8e:F79@*bl&5>1(e-PPeSRK'Y?Ye3Dc*]K+akh0'K%p4:#I,jUR`q*\\sN2R1/5!TDup%-#G&W*RG1#!fNBb&n\;Fcr!['>@3/+Hr8<!U/Id=QAPYY4NFf0La=*7>JHrmF!>'pWRff$Gaa?qMLQ)WE%Q_YeNhdA/p8r[CRq1F%.qHgrKMQi$hZ?3=?Q/j"YL_0\Cmc3Ck3S>M;)PXR+IootjuaY47`DJ_8/m&908ieAf;VG5=`/h'Lmfa3Ei_@>G"iEHbc*p;oiR$'%0TkW'&;e)2nPTD#7)`1$<hq$Q02M\:!V"Y</R9_)omaAY<[r)&-8N%X;%Q9,J4N*0E):8Xihn68D1rIRX>MMCA<FnOkslBHY#J=*%#tc@+A9`XKTdXt7Z/YYTr=QW&T?5?His(3n0dZ?Z(/'6?Wi.CG<fi-[0k2+.8J+#<>V[l!K8f'f&/AakL_YobC-[?\=:q=$j,2_L%Fhb_Jno,?$?ZfW\fr#?Zlr@Eb\Nrmk2-.JHP(^cNW,_NN[-IB2+AZ8%KC"d<IgHh2Xh%P^4tA5S(k2H.O-MAaW=L7^VjV]n7Hqp3%=Nq7>jVK,tQ$=5i'Tb=0+nA]BWLj'U"@VUsWYM0WQIuO[FkLe-g!N!HdZ!2!_Q2Z`>e(p:_F'r;3P7NUX@^^/QYhk0oU+Ft[L&,8%3i/TP0o!Ws>0Wb_gg>HV:^L*o#de5QNi9[Zd%$>^c'`BF.S:bV:JpXsVH5j\`.!!-F`aEkK"/`-Nfo>0N,m*5Ql?+b1(Sp6[**F>%o<$X:$+ZMp4rF8qh259QHm`f)@lmX6"HqL\TI:G.4HuP`,8J-ggc/bFJSLr!Upt@llT=ZTTM7;.Zo1l&0PThZI\7f$(Zohb`"Lk=%)DTuVG_X]cU@<9;<::=J3RkV_Pr4-#_l",KVpMCuZkH$IL`723*RqQuHBehNF/.FL62a_KCD%4(:!!T#"(4bK]>7L"VmmY4j7l^L%Sm\r2,tJMqV?js;H=B>Fp;n5FlkjHZcCKLkds;e8=D4Q5kU_E@MNMQe.'ALbT9Tt@%qa?2e2\dU3^q^<naMsS!76Sa1h$W66n[^>%/bCu]DcP17/<?Y8b>o#T>,^^>dDGOJl1Tm\+VfbM\#M,R]#>l.^[':/8h\A=mq\5J*(K`_*FkTEV@GA#<9*I7OtK</FL=JU*tE.p%W1D"gp>dJ'm1o1o&&g-1C%P8Hl$d>Ge$R)k,R#Ylba`Y!:l@N_B>rn)0L,h264Pd(eo`D!N+>I.HiKHdSk7t2QX\d.=UN)j-$!YT%fb)$ZK=!]R'(.p/Vm_(7A8nttn5S:HqX7\djU0<pFhE).TAs`6W)<nX&7$Kd!U4e_U".2?$;3B1?`hj4op6QT3e=W])<H>U(P\c`%"Tnlp]rh.d9#eAMB:ol7EaUb_P>5k(:KfH`n,_[cDQPCT1.B>NKGe(BS1t<n8(M<#/]LEq/j.4US\t_53NA`!b[/o3NG=3=PR+N0%;'JW)=B-]`6V%2HMb7k\\%APp"k4o+!.#eo$.RIo!<g%j.,sL4OLkur*Xkg/\K$`bn1fFsY#&FFXW))[s3,Yp+hGl"5#,bE-059)%'?3bQ\tX5O[]#'GfhJgq1^JB\EKAj0[5+Pof1gg#6m#6kX]f12#8n=!`pO5l^k`t@=?IRNIo4fer?KA,k'W3<[lCsNUZj*T`sTh)%=NNHk!-KPhG'5G<7V+h(o%Rt5olu$8$Jn=`,*G4)XL/Ah(k&99+&HUgoN<Cl"J[Ju`o-#Q/8oVNrI0R.M=4l>:=I1=Y&s?A4)%D[%<C)ptZiBHn6LrP"&ddXIrqd6KUol-a;39&`(^>t6\8b?2j,YBDLc66r2I(Ncn&m>`9I*SUU4H6B="ICcMXl_lK664gMGAu\@e;:j%\HIti:D%3oTfDk\21%s5,6-Lja19Ak5K:oX'?'VKa9`noE:b<f#>&NT#u=Im4aAUFeLVocBSuZGeDQICH`&;Y@htUsUBDS"''^5F%#P&,+dE/(J!u1P>1Pt??4-l-OefH:(3'd7Xbu9dYlbqOE-=`b>iGoYWqle%s.J%=GXml!l;q@5(E%NcL%s8Y1";h;1QU:2@O=?q_%Wt@1o_$XmA\n/jR=^Uk]-EFZ+H&jQXs#F<pJ3*7I&q,dRF1dPTr`:U0#,kiP<858LEIHJgeZa$^NQ4liD%fXqAIU-T^r3+Fo$Q5]%kQm[[mJ.cfguR?9R&>i[L@9J<LTn=7F9u$%5g6ERRZb3uq?2K%l#JuG+t*Y81CX?^ks@V"@VVbl\J9A.lU'`0LHs?GN*F3?Z2+p,%D^QAV\?FgN;s3Y!-h_Wc7j/I$TT\o"B3:'i![&rrqA^,.:r(=7/J0dN*Qucforn*Y+e%[8$b2gH5o!V]<3;ljP,0,aFf>bN71:5R%>g-aXi^R:C&53D*C4lEKVb5Y>;P)?b*K73M-?iN3V+meCnK4H%kerPJUI?)A"PIe8>b\XIL2t``WWZZ5\4'SD-,28LdNOb=j9hV*%Lr+4mbE5&%GbnDDiJQVXM0'WOR?2]&&P`#imJMR3=MPI8<>VOQ]1Om'SZX\0K9\3:gY5Gi,J>8!jQJ>1R$Z4<2$4;g3p5IgdFKQO%='\>K1oje4DFTmBKs"#q"K3!fAPk>p"%mQgR]b@P/>Bi-j69NlAkc3J-dJ8n$*"?S[,DubA+oD)f#+'$,0[rj!7F4'I"):CYtH6C%A/8loQj_H`+EP#$LI"[0W<Vf%`TR9ohgYImn%SbNhu(Og?iS#.r80a<oKW?Q:VZk*^]3,^s6f@UJWas9]Dd";s24k$.gc$`8@3UE%(W8Q;YAaI+s7lAYs7EM0s7h@fJ+[1KkJ-hjJ,/hgs7n<ts,[3LVgnObhu=-Rs5eb/n[JPghgbYbhqdeZIfEK!o,lHS?_=3Vr*OsR%T:SOPpA*n+p&/g#J,[W@s,11[X8i,oJ+r.+o:Q$SpV/p5qn%@Wdsq8dpHSVo5Q'QVr97Sfr;St\jnms6e"?[9?iKSfrqu_es.=f=%muTXrM<9<\=9%6/qd7)9s'iao1]~>%AI9_PrivateDataEnd